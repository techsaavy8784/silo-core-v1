{
  "address": "0x634322671380cF1ee7bD555a77fcdD41e680D817",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISiloRepository0612Like",
          "name": "_siloRepository",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "convexSiloWrapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "curvePoolId",
          "type": "uint256"
        }
      ],
      "name": "ConvexSiloWrapperCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERROR_INVALID_SILO_REPOSITORY",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERROR_WRAPPER_ALREADY_DEPLOYED",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILO_REPOSITORY",
      "outputs": [
        {
          "internalType": "contract ISiloRepository0612Like",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILO_REPOSITORY_PING_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexSiloWrapperFactoryPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "createConvexSiloWrapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedWrappers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWrapper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x02249aa207c49d9552ab7222d6fc822510c9011f5874e8d0be9c15d0bbd21cba",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0x634322671380cF1ee7bD555a77fcdD41e680D817",
    "transactionIndex": 86,
    "gasUsed": "4692256",
    "logsBloom": "0x
    "blockHash": "0x2410d0fb3b5a96f1c4eeaea65410bbbda8bfeb805deb68771e5a21caff83cd49",
    "transactionHash": "0x02249aa207c49d9552ab7222d6fc822510c9011f5874e8d0be9c15d0bbd21cba",
    "logs": [],
    "blockNumber": 17391870,
    "cumulativeGasUsed": "13642844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd998C35B7900b344bbBe6555cc11576942Cf309d"
  ],
  "numDeployments": 1,
  "solcInputHash": "441149b7c26e2b5628223654d4c03caa",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISiloRepository0612Like\",\"name\":\"_siloRepository\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"convexSiloWrapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"curvePoolId\",\"type\":\"uint256\"}],\"name\":\"ConvexSiloWrapperCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERROR_INVALID_SILO_REPOSITORY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_WRAPPER_ALREADY_DEPLOYED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILO_REPOSITORY\",\"outputs\":[{\"internalType\":\"contract ISiloRepository0612Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILO_REPOSITORY_PING_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexSiloWrapperFactoryPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"createConvexSiloWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWrapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ConvexSiloWrapperCreated(address,uint256)\":{\"details\":\"New ConvexSiloWrapper is deployed with an address `convexSiloWrapper`. Underlying LP token     is for `curvePoolId` Curve pool.\"}},\"kind\":\"dev\",\"methods\":{\"convexSiloWrapperFactoryPing()\":{\"details\":\"Ping library function for ConvexSiloWrapperFactory.\"},\"createConvexSiloWrapper(uint256)\":{\"details\":\"Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token     is transferred to the Silo DAO by calling `initializeSiloWrapper`.\",\"params\":{\"_poolId\":\"the Curve pool id in the Convex Booster. Curve LP token will be the underlying     token of a wrapper.\"},\"returns\":{\"wrapper\":\"is an address of deployed ConvexSiloWrapper\"}}},\"stateVariables\":{\"deployedWrappers\":{\"details\":\"Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.\",\"params\":{\"_poolId\":\"the Curve pool id in the Convex Booster\"}},\"isWrapper\":{\"details\":\"Check if an address is a ConvexSiloWrapper.\",\"params\":{\"_wrapper\":\"address to check.\"}}},\"title\":\"ConvexSiloWrapperFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Deploys ConvexSiloWrapper for Curve LP tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrappers/convex/ConvexSiloWrapperFactory.sol\":\"ConvexSiloWrapperFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-3.4.1/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-3.4.1/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/IBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2023 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IBooster.sol\\npragma solidity 0.6.12;\\n\\ninterface IBooster {\\n    function owner() external view returns(address);\\n    function setVoteDelegate(address _voteDelegate) external;\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\\n    function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\n}\\n\",\"keccak256\":\"0x14fa9cdd3219a13a233a31394de4d7a4fc1e6aa714c2bc5ecf8ebd98ad77a58a\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/IConvexDeposits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IConvexDeposits.sol\\npragma solidity 0.6.12;\\n\\ninterface IConvexDeposits {\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n    function deposit(uint256 _amount, bool _lock, address _stakeAddress) external;\\n}\\n\",\"keccak256\":\"0xed9eb0036d0ec663ddc82a06a5646ac64a0c6355d4cd1e430965224729cb96d1\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/ICvx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/ICvx.sol\\npragma solidity 0.6.12;\\n\\ninterface ICvx {\\n    function reductionPerCliff() external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n    function totalCliffs() external view returns(uint256);\\n    function maxSupply() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x6de5ae98095c2bd29b980121c33e2a1683458a290b4fa1189ebd43a3786c740a\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/IRewardHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IRewardHook.sol\\npragma solidity 0.6.12;\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x8333b9cce9a08d66f1fc70d176b89d234ce312855edd9b413a1ad38c71fea9ed\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/IRewardStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2023 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IRewardStaking.sol\\npragma solidity 0.6.12;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n    function stake( uint256) external;\\n    function withdraw(uint256 amount, bool claim) external;\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n    function earned(address account) external view returns (uint256);\\n    function getReward() external;\\n    function getReward(address _account, bool _claimExtras) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function extraRewards(uint256 _pid) external view returns (address);\\n    function rewardToken() external view returns (address);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function rewardRate() external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x0afb21a6f150a7bc038eeaa34c284bb087e59066e9f07ccea4fb94804ece2e1f\",\"license\":\"MIT\"},\"contracts/external/convex/interfaces/ITokenWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/ebd46ca7f05cca679568f6bd98cea54e27bbdd32/contracts/contracts/interfaces/ICvx.sol\\npragma solidity 0.6.12;\\n\\ninterface ITokenWrapper {\\n   function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x98955f8ddcc0b4e9556d42eb8bc2e7165ceebada4a07be4b647d8723f86896d6\",\"license\":\"MIT\"},\"contracts/external/convex/lib/CvxMining.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/CvxMining.sol\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/ICvx.sol\\\";\\n\\nlibrary CvxMining{\\n    ICvx public constant cvx = ICvx(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n\\n    function ConvertCrvToCvx(uint256 _amount) external view returns(uint256){\\n        uint256 supply = cvx.totalSupply();\\n        uint256 reductionPerCliff = cvx.reductionPerCliff();\\n        uint256 totalCliffs = cvx.totalCliffs();\\n        uint256 maxSupply = cvx.maxSupply();\\n\\n        uint256 cliff = supply / reductionPerCliff;\\n        //mint if below total cliffs\\n        if(cliff < totalCliffs){\\n            //for reduction% take inverse of current cliff\\n            uint256 reduction = totalCliffs - cliff;\\n            //reduce\\n            _amount = _amount * reduction / totalCliffs;\\n\\n            //supply cap check\\n            uint256 amtTillMax = maxSupply - supply;\\n            if(_amount > amtTillMax){\\n                _amount = amtTillMax;\\n            }\\n\\n            //mint\\n            return _amount;\\n        }\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0b70962fc06fe95ec6fa9a6647bb6cea15d8b55c345260132f29dbbba21f1d4\",\"license\":\"MIT\"},\"contracts/external/convex/wrappers/ConvexStakingWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2023 convex-eth\\n// Modified Copyright 2023 Silo Finance\\n// Original source: https://github.com/convex-eth/platform/blob/01a38d494ac2e9d5c3f1876c637b88b700678ea5/contracts/contracts/wrappers/ConvexStakingWrapper.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IRewardStaking.sol\\\";\\nimport \\\"../interfaces/IConvexDeposits.sol\\\";\\nimport \\\"../lib/CvxMining.sol\\\";\\nimport \\\"../interfaces/IBooster.sol\\\";\\nimport \\\"../interfaces/IRewardHook.sol\\\";\\nimport \\\"../interfaces/ITokenWrapper.sol\\\";\\nimport '@openzeppelin/contracts-3.4.1/math/SafeMath.sol';\\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/ERC20.sol';\\nimport \\\"@openzeppelin/contracts-3.4.1/utils/ReentrancyGuard.sol\\\";\\n\\n\\n//Example of a tokenize a convex staked position.\\n//if used as collateral some modifications will be needed to fit the specific platform\\n\\n//Based on Curve.fi's gauge wrapper implementations at https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers\\ncontract ConvexStakingWrapper is ERC20, ReentrancyGuard {\\n    using SafeERC20\\n    for IERC20;\\n    using SafeMath\\n    for uint256;\\n\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct RewardType {\\n        address reward_token;\\n        address reward_pool;\\n        uint256 reward_integral;\\n        uint256 reward_remaining;\\n        mapping(address => uint256) reward_integral_for;\\n        mapping(address => uint256) claimable_reward;\\n    }\\n\\n    //constants/immutables\\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    address public curveToken;\\n    address public convexToken;\\n    address public convexPool;\\n    uint256 public convexPoolId;\\n    address public collateralVault;\\n    uint256 private constant CRV_INDEX = 0;\\n    uint256 private constant CVX_INDEX = 1;\\n\\n    //rewards\\n    RewardType[] public rewards;\\n    mapping(address => uint256) public registeredRewards;\\n    address public rewardHook;\\n\\n    //management\\n    bool public isShutdown;\\n    bool public isInit;\\n    address public owner;\\n\\n    string internal _tokenname;\\n    string internal _tokensymbol;\\n\\n    event Deposited(address indexed _user, address indexed _account, uint256 _amount, bool _wrapped);\\n    event Withdrawn(address indexed _user, uint256 _amount, bool _unwrapped);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event RewardInvalidated(address _rewardToken);\\n    event RewardAdded(address _token);\\n    event Shutdown();\\n    event HookSet(address _hook);\\n    event UserCheckpoint(address _userA, address _userB);\\n\\n    constructor() public\\n        ERC20(\\n            \\\"StakedConvexToken\\\",\\n            \\\"stkCvx\\\"\\n        ){\\n    }\\n\\n    function initialize(uint256 _poolId)\\n    virtual external {\\n        require(!isInit,\\\"already init\\\");\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        (address _lptoken, address _token, , address _rewards, , ) = IBooster(convexBooster).poolInfo(_poolId);\\n        curveToken = _lptoken;\\n        convexToken = _token;\\n        convexPool = _rewards;\\n        convexPoolId = _poolId;\\n\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(_token).name() ));\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(_token).symbol()));\\n        isShutdown = false;\\n        isInit = true;\\n\\n        // collateralVault = _vault;\\n\\n        //add rewards\\n        addRewards();\\n        setApprovals();\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _tokenname;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _tokensymbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return 18;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    function shutdown() external onlyOwner {\\n        isShutdown = true;\\n        emit Shutdown();\\n    }\\n\\n    function setApprovals() public {\\n        IERC20(curveToken).safeApprove(convexBooster, 0);\\n        IERC20(curveToken).safeApprove(convexBooster, uint256(-1));\\n        IERC20(convexToken).safeApprove(convexPool, 0);\\n        IERC20(convexToken).safeApprove(convexPool, uint256(-1));\\n    }\\n\\n    function addRewards() public {\\n        address mainPool = convexPool;\\n\\n        if (rewards.length == 0) {\\n            rewards.push(\\n                RewardType({\\n                    reward_token: crv,\\n                    reward_pool: mainPool,\\n                    reward_integral: 0,\\n                    reward_remaining: 0\\n                })\\n            );\\n            rewards.push(\\n                RewardType({\\n                    reward_token: cvx,\\n                    reward_pool: address(0),\\n                    reward_integral: 0,\\n                    reward_remaining: 0\\n                })\\n            );\\n            registeredRewards[crv] = CRV_INDEX+1; //mark registered at index+1\\n            registeredRewards[cvx] = CVX_INDEX+1; //mark registered at index+1\\n            //send to self to warmup state\\n            IERC20(crv).transfer(address(this),0);\\n            //send to self to warmup state\\n            IERC20(cvx).transfer(address(this),0);\\n            emit RewardAdded(crv);\\n            emit RewardAdded(cvx);\\n        }\\n\\n        uint256 extraCount = IRewardStaking(mainPool).extraRewardsLength();\\n        for (uint256 i = 0; i < extraCount; i++) {\\n            address extraPool = IRewardStaking(mainPool).extraRewards(i);\\n            address extraToken = IRewardStaking(extraPool).rewardToken();\\n            //from pool 151, extra reward tokens are wrapped\\n            if(convexPoolId >= 151){\\n                extraToken = ITokenWrapper(extraToken).token();\\n            }\\n            if(extraToken == cvx){\\n                //update cvx reward pool address\\n                rewards[CVX_INDEX].reward_pool = extraPool;\\n            }else if(registeredRewards[extraToken] == 0){\\n                //add new token to list\\n                rewards.push(\\n                    RewardType({\\n                        reward_token: extraToken,\\n                        reward_pool: extraPool,\\n                        reward_integral: 0,\\n                        reward_remaining: 0\\n                    })\\n                );\\n                registeredRewards[extraToken] = rewards.length; //mark registered at index+1\\n                emit RewardAdded(extraToken);\\n            }\\n        }\\n    }\\n\\n    function addTokenReward(address _token) public onlyOwner {\\n\\n        //check if already registered\\n        if(registeredRewards[_token] == 0){\\n            //add new token to list\\n            rewards.push(\\n                RewardType({\\n                    reward_token: _token,\\n                    reward_pool: address(0),\\n                    reward_integral: 0,\\n                    reward_remaining: 0\\n                })\\n            );\\n            //add to registered map\\n            registeredRewards[_token] = rewards.length; //mark registered at index+1\\n            //send to self to warmup state\\n            IERC20(_token).transfer(address(this),0);   \\n            emit RewardAdded(_token);\\n        }else{\\n            //get previous used index of given token\\n            //this ensures that reviving can only be done on the previous used slot\\n            uint256 index = registeredRewards[_token];\\n            if(index > 0){\\n                //index is registeredRewards minus one\\n                RewardType storage reward = rewards[index-1];\\n                //check if it was invalidated\\n                if(reward.reward_token == address(0)){\\n                    //revive\\n                    reward.reward_token = _token;\\n                    emit RewardAdded(_token);\\n                }\\n            }\\n        }\\n    }\\n\\n    //allow invalidating a reward if the token causes trouble in calcRewardIntegral\\n    function invalidateReward(address _token) public onlyOwner {\\n        uint256 index = registeredRewards[_token];\\n        if(index > 0){\\n            //index is registered rewards minus one\\n            RewardType storage reward = rewards[index-1];\\n            require(reward.reward_token == _token, \\\"!mismatch\\\");\\n            //set reward token address to 0, integral calc will now skip\\n            reward.reward_token = address(0);\\n            emit RewardInvalidated(_token);\\n        }\\n    }\\n\\n    function setHook(address _hook) external onlyOwner{\\n        rewardHook = _hook;\\n        emit HookSet(_hook);\\n    }\\n\\n    function rewardLength() external view returns(uint256) {\\n        return rewards.length;\\n    }\\n\\n    function _getDepositedBalance(address _account) internal virtual view returns(uint256) {\\n        if (_account == address(0) || _account == collateralVault) {\\n            return 0;\\n        }\\n        //get balance from collateralVault\\n\\n        return balanceOf(_account);\\n    }\\n\\n    function _getTotalSupply() internal virtual view returns(uint256){\\n\\n        //override and add any supply needed (interest based growth)\\n\\n        return totalSupply();\\n    }\\n\\n    function _calcRewardIntegral(uint256 _index, address[2] memory _accounts, uint256[2] memory _balances, uint256 _supply, bool _isClaim) internal{\\n         RewardType storage reward = rewards[_index];\\n         if(reward.reward_token == address(0)){\\n            return;\\n         }\\n\\n        //get difference in balance and remaining rewards\\n        //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\\n        uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\\n\\n        if (_supply > 0 && bal > reward.reward_remaining) {\\n            reward.reward_integral = reward.reward_integral + bal.sub(reward.reward_remaining).mul(1e20).div(_supply);\\n        }\\n\\n        //update user integrals\\n        for (uint256 u = 0; u < _accounts.length; u++) {\\n            //do not give rewards to address 0\\n            if (_accounts[u] == address(0)) continue;\\n            if (_accounts[u] == collateralVault) continue;\\n            if(_isClaim && u != 0) continue; //only update/claim for first address and use second as forwarding\\n\\n            uint userI = reward.reward_integral_for[_accounts[u]];\\n            if(_isClaim || userI < reward.reward_integral){\\n                if(_isClaim){\\n                    uint256 receiveable = reward.claimable_reward[_accounts[u]].add(_balances[u].mul(reward.reward_integral.sub(userI)).div(1e20));\\n                    if(receiveable > 0){\\n                        reward.claimable_reward[_accounts[u]] = 0;\\n                        //cheat for gas savings by transfering to the second index in accounts list\\n                        //if claiming only the 0 index will update so 1 index can hold forwarding info\\n                        //guaranteed to have an address in u+1 so no need to check\\n                        IERC20(reward.reward_token).safeTransfer(_accounts[u+1], receiveable);\\n                        bal = bal.sub(receiveable);\\n                    }\\n                }else{\\n                    reward.claimable_reward[_accounts[u]] = reward.claimable_reward[_accounts[u]].add(_balances[u].mul(reward.reward_integral.sub(userI)).div(1e20));\\n                }\\n                reward.reward_integral_for[_accounts[u]] = reward.reward_integral;\\n            }\\n        }\\n\\n        //update remaining reward here since balance could have changed if claiming\\n        if(bal != reward.reward_remaining){\\n            reward.reward_remaining = bal;\\n        }\\n    }\\n\\n    function _checkpoint(address[2] memory _accounts) internal nonReentrant{\\n        uint256 supply = _getTotalSupply();\\n        uint256[2] memory depositedBalance;\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]);\\n        depositedBalance[1] = _getDepositedBalance(_accounts[1]);\\n\\n        //just in case, dont claim rewards directly if shutdown\\n        //can still technically claim via unguarded calls but skipping here\\n        //protects against outside calls reverting\\n        if(!isShutdown){\\n            IRewardStaking(convexPool).getReward(address(this), true);\\n        }\\n\\n        _claimExtras();\\n\\n        uint256 rewardCount = rewards.length;\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,false);\\n        }\\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\\n    }\\n\\n    function _checkpointAndClaim(address[2] memory _accounts) internal nonReentrant{\\n        uint256 supply = _getTotalSupply();\\n        uint256[2] memory depositedBalance;\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]); //only do first slot\\n\\n        //just in case, dont claim rewards directly if shutdown\\n        //can still technically claim via unguarded calls but skipping here\\n        //protects against outside calls reverting\\n        if(!isShutdown){\\n            IRewardStaking(convexPool).getReward(address(this), true);\\n        }\\n\\n        _claimExtras();\\n\\n        uint256 rewardCount = rewards.length;\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,true);\\n        }\\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\\n    }\\n\\n    //claim any rewards not part of the convex pool\\n    function _claimExtras() internal virtual{\\n        //override and add any external reward claiming\\n        if(rewardHook != address(0)){\\n            try IRewardHook(rewardHook).onRewardClaim(){\\n            }catch{}\\n        }\\n    }\\n\\n    function user_checkpoint(address _account) external returns(bool) {\\n        _checkpoint([_account, address(0)]);\\n        return true;\\n    }\\n\\n    function totalBalanceOf(address _account) external view returns(uint256){\\n        return _getDepositedBalance(_account);\\n    }\\n\\n    //run earned as a mutable function to claim everything before calculating earned rewards\\n    function earned(address _account) external returns(EarnedData[] memory claimable) {\\n        IRewardStaking(convexPool).getReward(address(this), true);\\n        _claimExtras();\\n        return _earned(_account);\\n    }\\n\\n    //run earned as a non-mutative function that may not claim everything, but should report standard convex rewards\\n    function earnedView(address _account) external view returns(EarnedData[] memory claimable) {\\n        return _earned(_account);\\n    }\\n\\n    function _earned(address _account) internal view returns(EarnedData[] memory claimable) {\\n        uint256 supply = _getTotalSupply();\\n        uint256 rewardCount = rewards.length;\\n        claimable = new EarnedData[](rewardCount);\\n\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n            RewardType storage reward = rewards[i];\\n            if(reward.reward_token == address(0)){\\n                continue;\\n            }\\n\\n            //change in reward is current balance - remaining reward + earned\\n            uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\\n            uint256 d_reward = bal.sub(reward.reward_remaining);\\n\\n            //some rewards (like minted cvx) may not have a reward pool directly on the convex pool so check if it exists\\n            if(reward.reward_pool != address(0)){\\n                //add earned from the convex reward pool for the given token\\n                d_reward = d_reward.add(IRewardStaking(reward.reward_pool).earned(address(this)));\\n            }\\n\\n            uint256 I = reward.reward_integral;\\n            if (supply > 0) {\\n                I = I + d_reward.mul(1e20).div(supply);\\n            }\\n\\n            uint256 newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\\n            claimable[i].amount = claimable[i].amount.add(reward.claimable_reward[_account].add(newlyClaimable));\\n            claimable[i].token = reward.reward_token;\\n\\n            //calc cvx minted from crv and add to cvx claimables\\n            //note: crv is always index 0 so will always run before cvx\\n            if(i == CRV_INDEX){\\n                //because someone can call claim for the pool outside of checkpoints, need to recalculate crv without the local balance\\n                I = reward.reward_integral;\\n                if (supply > 0) {\\n                    I = I + IRewardStaking(reward.reward_pool).earned(address(this)).mul(1e20).div(supply);\\n                }\\n                newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\\n                claimable[CVX_INDEX].amount = CvxMining.ConvertCrvToCvx(newlyClaimable);\\n                claimable[CVX_INDEX].token = cvx;\\n            }\\n        }\\n        return claimable;\\n    }\\n\\n    function getReward(address _account) external {\\n        //claim directly in checkpoint logic to save a bit of gas\\n        _checkpointAndClaim([_account, _account]);\\n    }\\n\\n    function getReward(address _account, address _forwardTo) external {\\n        require(msg.sender == _account, \\\"!self\\\");\\n        //claim directly in checkpoint logic to save a bit of gas\\n        //pack forwardTo into account array to save gas so that a proxy etc doesnt have to double transfer\\n        _checkpointAndClaim([_account,_forwardTo]);\\n    }\\n\\n    //deposit a curve token\\n    function deposit(uint256 _amount, address _to) public virtual {\\n        require(!isShutdown, \\\"shutdown\\\");\\n\\n        //dont need to call checkpoint since _mint() will\\n\\n        if (_amount > 0) {\\n            _mint(_to, _amount);\\n            IERC20(curveToken).safeTransferFrom(msg.sender, address(this), _amount);\\n            IConvexDeposits(convexBooster).deposit(convexPoolId, _amount, true);\\n        }\\n\\n        emit Deposited(msg.sender, _to, _amount, true);\\n    }\\n\\n    //stake a convex token\\n    function stake(uint256 _amount, address _to) external {\\n        require(!isShutdown, \\\"shutdown\\\");\\n\\n        //dont need to call checkpoint since _mint() will\\n\\n        if (_amount > 0) {\\n            _mint(_to, _amount);\\n            IERC20(convexToken).safeTransferFrom(msg.sender, address(this), _amount);\\n            IRewardStaking(convexPool).stake(_amount);\\n        }\\n\\n        emit Deposited(msg.sender, _to, _amount, false);\\n    }\\n\\n    //withdraw to convex deposit token\\n    function withdraw(uint256 _amount) external {\\n\\n        //dont need to call checkpoint since _burn() will\\n\\n        if (_amount > 0) {\\n            _burn(msg.sender, _amount);\\n            IRewardStaking(convexPool).withdraw(_amount, false);\\n            IERC20(convexToken).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        emit Withdrawn(msg.sender, _amount, false);\\n    }\\n\\n    //withdraw to underlying curve lp token\\n    function withdrawAndUnwrap(uint256 _amount) public virtual {\\n        \\n        //dont need to call checkpoint since _burn() will\\n\\n        if (_amount > 0) {\\n            _burn(msg.sender, _amount);\\n            IRewardStaking(convexPool).withdrawAndUnwrap(_amount, false);\\n            IERC20(curveToken).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        //events\\n        emit Withdrawn(msg.sender, _amount, true);\\n    }\\n\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\\n        _checkpoint([_from, _to]);\\n    }\\n}\\n\",\"keccak256\":\"0x94c13270202be1e85995172e8a70e880db693f647f604b711a74fb6334e6346f\",\"license\":\"MIT\"},\"contracts/interfaces/IConvexSiloWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\\n\\ninterface IConvexSiloWrapper {\\n    /// @dev Function to checkpoint single user rewards. This function has the same use case as the `user_checkpoint`\\n    ///     in `ConvexStakingWrapper` and implemented to match the `IConvexSiloWrapper` interface.\\n    /// @param _account address\\n    function checkpointSingle(address _account) external;\\n\\n    /// @dev Function to checkpoint pair of users rewards. This function must be used to checkpoint collateral transfer.\\n    /// @param _from sender address\\n    /// @param _to recipient address\\n    function checkpointPair(address _from, address _to) external;\\n\\n    /// @notice wrap underlying tokens\\n    /// @param _amount of underlying token to wrap\\n    /// @param _to receiver of the wrapped tokens\\n    function deposit(uint256 _amount, address _to) external;\\n\\n    /// @dev initializeSiloWrapper executes parent `initialize` function, transfers ownership to Silo DAO,\\n    ///     changes token name and symbol. After `initializeSiloWrapper` execution, execution of the parent `initialize`\\n    ///     function is not possible. This function must be called by `ConvexSiloWrapperFactory` in the same\\n    ///     transaction with the deployment of this contract. If the parent `initialize` function was already executed\\n    ///     for some reason, call to `initialize` is skipped.\\n    /// @param _poolId the Curve pool id in the Convex Booster.\\n    function initializeSiloWrapper(uint256 _poolId) external;\\n\\n    /// @notice unwrap and receive underlying tokens\\n    /// @param _amount of tokens to unwrap\\n    function withdrawAndUnwrap(uint256 _amount) external;\\n\\n    /// @dev Function to init or update Silo address. Saves the history of deprecated Silos and routers to not take it\\n    ///     into account for rewards calculation. Reverts if the first Silo is not created yet. Note, that syncSilo\\n    ///     updates collateral vault and it can cause the unclaimed and not checkpointed rewards to be lost in\\n    ///     deprecated Silos. This behaviour is intended. Taking into account deprecated Silos shares for rewards\\n    ///     calculations will significantly increase the gas costs for all interactions with Convex Silo. Users should\\n    ///     claim rewards before the Silo is replaced. Note that replacing Silo is improbable scenario and must be done\\n    ///     by the DAO only in very specific cases.\\n    function syncSilo() external;\\n\\n    /// @dev Function to get underlying curveLP token address. Created for a better naming,\\n    ///     the `curveToken` inherited variable name can be misleading.\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x441b9f3f4eb79e96810dc38c78c35b44c8cedc0aaa43fc1533af24ecc6105b15\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConvexSiloWrapperFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\\n\\ninterface IConvexSiloWrapperFactory {\\n    /// @dev Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token\\n    ///     is transferred to the Silo DAO by calling `initializeSiloWrapper`.\\n    /// @param _poolId the Curve pool id in the Convex Booster. Curve LP token will be the underlying\\n    ///     token of a wrapper.\\n    /// @return wrapper is an address of deployed ConvexSiloWrapper\\n    function createConvexSiloWrapper(uint256 _poolId) external returns (address wrapper);\\n\\n    /// @dev Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.\\n    /// @param _poolId the Curve pool id in the Convex Booster\\n    function deployedWrappers(uint256 _poolId) external view returns (address);\\n\\n    /// @dev Check if an address is a ConvexSiloWrapper.\\n    /// @param _wrapper address to check.\\n    function isWrapper(address _wrapper) external view returns (bool);\\n\\n    /// @dev Ping library function for ConvexSiloWrapperFactory.\\n    function convexSiloWrapperFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4444b990ffb61501f2330dd94d6784e078fcb02fe8fab6a0ae611f15726760cb\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping06.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.7.6; // solhint-disable-line compiler-version\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Ping library for the older versions of Solidity.\\nlibrary Ping06 {\\n    /// @notice Check if the target contract implements the expected ping function\\n    /// @param _target contract address\\n    /// @param _expectedSelector ping function that returns the value of it's own selector\\n    function pong(address _target, bytes4 _expectedSelector) internal view returns (bool) {\\n        (bool success, bytes memory data) = _target.staticcall(abi.encodeWithSelector(_expectedSelector));\\n        if (!success || data.length != 32) return false;\\n\\n        bytes4 pingSelector = abi.decode(data, (bytes4));\\n        return pingSelector == _expectedSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x068dbb0cb9faf2611535d728a1ef9ad7ac91506bc3834a2e17abd7d126b33a2f\",\"license\":\"BUSL-1.1\"},\"contracts/wrappers/convex/ConvexSiloWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Original Copyright 2021 convex-eth\\n// Modified Copyright 2022 Silo Finance\\npragma solidity 0.6.12; // solhint-disable-line compiler-version\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../external/convex/wrappers/ConvexStakingWrapper.sol\\\";\\nimport \\\"../../lib/Ping06.sol\\\";\\nimport \\\"./interfaces/ISiloRepository0612Like.sol\\\";\\nimport \\\"./interfaces/ISilo0612Like.sol\\\";\\nimport \\\"../../interfaces/IConvexSiloWrapper.sol\\\";\\n\\ncontract ConvexSiloWrapper is IConvexSiloWrapper, ConvexStakingWrapper {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bytes4 public constant SILO_REPOSITORY_PING_SELECTOR = bytes4(keccak256(\\\"siloRepositoryPing()\\\"));\\n    string public constant ERROR_SILO_WRAPPER_ALREADY_INIT = \\\"SiloWrapperAlreadyInit\\\";\\n    string public constant ERROR_INVALID_SILO_REPOSITORY = \\\"InvalidSiloRepositoryAddress\\\";\\n    string public constant ERROR_COLLATERAL_VAULT_ZERO = \\\"CollateralVaultNotCreated\\\";\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    ISiloRepository0612Like public immutable SILO_REPOSITORY;\\n\\n    /// @dev Check if the contract is Silo or Router to not account its balance in rewards distribution. Deprecated\\n    ///     Silo users will not get the rewards. We do not support deprecated Silo shares for balance calculations\\n    ///     to save gas.\\n    mapping(address => bool) public isSiloOrRouter;\\n\\n    /// @dev the flag for tracking the `initializeSiloWrapper` function execution\\n    bool public isSiloWrapperInit;\\n\\n    event CollateralVaultUpdated(address indexed newVault);\\n\\n    /// @dev Deploy this contract and save SiloRepository address for collateral vault syncing\\n    /// @param _siloRepository address\\n    constructor(ISiloRepository0612Like _siloRepository) public {\\n        if (!Ping06.pong(address(_siloRepository), SILO_REPOSITORY_PING_SELECTOR)) {\\n            revert(ERROR_INVALID_SILO_REPOSITORY);\\n        }\\n\\n        SILO_REPOSITORY = _siloRepository;\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function initializeSiloWrapper(uint256 _poolId) external override virtual {\\n        if (isSiloWrapperInit) revert(ERROR_SILO_WRAPPER_ALREADY_INIT);\\n        isSiloWrapperInit = true;\\n\\n        // if the parent `initialize` function was already called for some reason, do not block\\n        // `initializeSiloWrapper` from execution.\\n        if (!isInit) {\\n            this.initialize(_poolId);\\n        }\\n\\n        // after `this.initialize` call the owner will be address(this)\\n        owner = SILO_REPOSITORY.owner();\\n        emit OwnershipTransferred(address(this), owner);\\n\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(convexToken).name(), \\\" Silo\\\"));\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(convexToken).symbol(), \\\"-silo\\\"));\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function checkpointSingle(address _account) external override virtual {\\n        _checkpoint([_account, address(0)]);\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function checkpointPair(address _from, address _to) external override virtual {\\n        _checkpoint([_from, _to]);\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function syncSilo() external override virtual {\\n        address silo = SILO_REPOSITORY.getSilo(address(this));\\n        if (silo == address(0)) revert(ERROR_COLLATERAL_VAULT_ZERO);\\n        isSiloOrRouter[silo] = true;\\n\\n        address router = SILO_REPOSITORY.router();\\n        isSiloOrRouter[router] = true;\\n\\n        if (collateralVault != silo) {\\n            collateralVault = silo;\\n            emit CollateralVaultUpdated(silo);\\n        }\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function underlyingToken() external view override virtual returns (address) {\\n        return curveToken;\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function deposit(uint256 _amount, address _to) public virtual override(IConvexSiloWrapper, ConvexStakingWrapper) {\\n        super.deposit(_amount, _to);\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapper\\n    function withdrawAndUnwrap(uint256 _amount) public virtual override(IConvexSiloWrapper, ConvexStakingWrapper) {\\n        super.withdrawAndUnwrap(_amount);\\n    }\\n\\n    /// @dev Function to get user's ConvexSiloWrapper balance with deposited collateral included for proper\\n    ///     rewards calculation\\n    /// @param _account address\\n    function _getDepositedBalance(address _account) internal virtual override view returns (uint256) {\\n        if (_account == address(0) || isSiloOrRouter[_account]) {\\n            return 0;\\n        }\\n\\n        if (collateralVault == address(0)) {\\n            return balanceOf(_account);\\n        }\\n\\n        ISilo0612Like.AssetStorage memory assetStorage = ISilo0612Like(collateralVault).assetStorage(address(this));\\n\\n        uint256 shares = IERC20(assetStorage.collateralOnlyToken).balanceOf(_account);\\n        uint256 totalShares = IERC20(assetStorage.collateralOnlyToken).totalSupply();\\n        uint256 totalDeposits = assetStorage.collateralOnlyDeposits;\\n\\n        // ConvexStakingWrapper tokens will be used only as `collateralOnly` asset\\n        // that is why we take into account only `collateralOnly` type of Silo collateral\\n        // there will be no regular collateral, no interest applied to deposits\\n        return balanceOf(_account).add(_toAmount(shares, totalDeposits, totalShares));\\n    }\\n\\n    /// @dev Function for user's deposited amount calculation. It is used to include user's deposited tokens to\\n    ///     Convex rewards calculation. Rounding up or down the shares does not affect the rewards calculation.\\n    /// @param _share amount of user's collateral shares\\n    /// @param _totalAmount total deposited amount in Silo\\n    /// @param _totalShares shares total supply\\n    /// @return amount of user's collateral\\n    function _toAmount(uint256 _share, uint256 _totalAmount, uint256 _totalShares) internal pure returns (uint256) {\\n        if (_totalShares == 0 || _totalAmount == 0) {\\n            return 0;\\n        }\\n\\n        // we can use regular division, `_totalShares` != 0 because of the if statement above\\n        return _share.mul(_totalAmount) / _totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0x1fa3a4593ce7ff51ac341e59cf947c6f6cfbf1d93bee0dda4d6061889001699a\",\"license\":\"MIT\"},\"contracts/wrappers/convex/ConvexSiloWrapperFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12; // solhint-disable-line compiler-version\\n\\nimport \\\"../../lib/Ping06.sol\\\";\\nimport \\\"./ConvexSiloWrapper.sol\\\";\\nimport \\\"../../interfaces/IConvexSiloWrapperFactory.sol\\\";\\n\\n/// @title ConvexSiloWrapperFactory\\n/// @notice Deploys ConvexSiloWrapper for Curve LP tokens\\ncontract ConvexSiloWrapperFactory is IConvexSiloWrapperFactory {\\n    string public constant ERROR_INVALID_SILO_REPOSITORY = \\\"InvalidSiloRepository\\\";\\n    string public constant ERROR_WRAPPER_ALREADY_DEPLOYED = \\\"WrapperAlreadyDeployed\\\";\\n    bytes4 public constant SILO_REPOSITORY_PING_SELECTOR = bytes4(keccak256(\\\"siloRepositoryPing()\\\"));\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    ISiloRepository0612Like public immutable SILO_REPOSITORY;\\n\\n    /// @inheritdoc IConvexSiloWrapperFactory\\n    mapping(uint256 => address) public override deployedWrappers;\\n\\n    /// @inheritdoc IConvexSiloWrapperFactory\\n    mapping(address => bool) public override isWrapper;\\n\\n    /// @dev New ConvexSiloWrapper is deployed with an address `convexSiloWrapper`. Underlying LP token\\n    ///     is for `curvePoolId` Curve pool.\\n    event ConvexSiloWrapperCreated(address indexed convexSiloWrapper, uint256 indexed curvePoolId);\\n\\n    constructor(ISiloRepository0612Like _siloRepository) public {\\n        if (!Ping06.pong(address(_siloRepository), SILO_REPOSITORY_PING_SELECTOR)) {\\n            revert(ERROR_INVALID_SILO_REPOSITORY);\\n        }\\n\\n        SILO_REPOSITORY = _siloRepository;\\n    }\\n\\n    /// @inheritdoc IConvexSiloWrapperFactory\\n    function createConvexSiloWrapper(uint256 _poolId) external virtual override returns (address wrapper) {\\n        if (deployedWrappers[_poolId] != address(0)) revert(ERROR_WRAPPER_ALREADY_DEPLOYED);\\n\\n        wrapper = address(new ConvexSiloWrapper(SILO_REPOSITORY));\\n        ConvexSiloWrapper(wrapper).initializeSiloWrapper(_poolId);\\n        deployedWrappers[_poolId] = wrapper;\\n        isWrapper[wrapper] = true;\\n\\n        emit ConvexSiloWrapperCreated(wrapper, _poolId);\\n    }\\n\\n    function convexSiloWrapperFactoryPing() external pure override returns (bytes4) {\\n        return this.convexSiloWrapperFactoryPing.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc01efd8cd37375f69f4fc1171d88443c89f22ae6dd5497babce40be09a7a6733\",\"license\":\"BUSL-1.1\"},\"contracts/wrappers/convex/interfaces/ISilo0612Like.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12; // solhint-disable-line compiler-version\\npragma experimental ABIEncoderV2;\\n\\n// this interface is defined because ConvexStakingWrapper has incompatible 0.6.12\\n// original file is contracts/interfaces/IBaseSilo.sol\\ninterface ISilo0612Like {\\n    struct AssetStorage {\\n        address collateralToken;\\n        address collateralOnlyToken;\\n        address debtToken;\\n        uint256 totalDeposits;\\n        uint256 collateralOnlyDeposits;\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n}\\n\",\"keccak256\":\"0xe43ac355fce71cb34f79baeafa623bd6520dc397202134853a71f7b5323adcde\",\"license\":\"BUSL-1.1\"},\"contracts/wrappers/convex/interfaces/ISiloRepository0612Like.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12; // solhint-disable-line compiler-version\\n\\n// this interface is defined because ConvexStakingWrapper has incompatible 0.6.12\\n// original file is contracts/interfaces/ISiloRepository.sol\\ninterface ISiloRepository0612Like {\\n    function getSilo(address _asset) external returns (address);\\n    function owner() external returns (address);\\n    function router() external returns (address);\\n    function siloRepositoryPing() external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6c0f5e33b41f0f1f0a7bd2cf5b28a582fa142e5e2227f8afb78422516a44f65f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638d333b311161005b5780638d333b3114610170578063a7e8489d14610178578063b2be136614610180578063e0aa27971461019d57610088565b80630f149ff21461008d5780636e1933c3146100c657806378e351f3146101435780637f7af7781461014b575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101d7565b604080516001600160a01b039092168252519081900360200190f35b6100ce6101f2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101085781810151838201526020016100f0565b50505050905090810190601f1680156101355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100ce610223565b610153610255565b604080516001600160e01b03199092168252519081900360200190f35b610153610279565b6100aa610284565b6100aa6004803603602081101561019657600080fd5b50356102a8565b6101c3600480360360208110156101b357600080fd5b50356001600160a01b03166104a3565b604080519115158252519081900360200190f35b6000602081905290815260409020546001600160a01b031681565b60405180604001604052806015815260200174496e76616c696453696c6f5265706f7369746f727960581b81525081565b6040518060400160405280601681526020017515dc985c1c195c905b1c9958591e51195c1b1bde595960521b81525081565b7fe99ed41de618732efbc0d0095584567f6718769787fe3fbb41fd1632fd5481c281565b638d333b3160e01b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818152602081905260408120546001600160a01b031615610378576040518060400160405280601681526020017515dc985c1c195c905b1c9958591e51195c1b1bde595960521b81525060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561033d578181015183820152602001610325565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006040516103a5906105e1565b6001600160a01b03909116815260405190819003602001906000f0801580156103d2573d6000803e3d6000fd5b509050806001600160a01b03166381974e90836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561041b57600080fd5b505af115801561042f573d6000803e3d6000fd5b50505060008381526020818152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600192839052818420805460ff19169093179092555185935090917f36ade2fb676f076762c4f3d40f47e46540b09836bedeafb7388298fcade623ef91a3919050565b60016020526000908152604090205460ff1681565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b031985161781529151815160009384936060936001600160a01b03891693919290918291908083835b602083106105245780518252601f199092019160209182019101610505565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610584576040519150601f19603f3d011682016040523d82523d6000602084013e610589565b606091505b509150915081158061059d57508051602014155b156105ad576000925050506105db565b60008180602001905160208110156105c457600080fd5b50516001600160e01b031986811691161493505050505b92915050565b614d8a80620005f08339019056fe60a06040523480156200001157600080fd5b5060405162004d8a38038062004d8a833981016040819052620000349162000316565b604080518082018252601181527029ba30b5b2b221b7b73b32bc2a37b5b2b760791b6020808301918252835180850190945260068452650e6e8d686ecf60d31b9084015281519192916200008b9160039162000249565b508051620000a190600490602084019062000249565b505060058054601260ff19909116179055506001600655620000f0817fe99ed41de618732efbc0d0095584567f6718769787fe3fbb41fd1632fd5481c262000161602090811b620024fc17901c565b6200014b57604080518082018252601c81527f496e76616c696453696c6f5265706f7369746f727941646472657373000000006020820152905162461bcd60e51b81526200014291906004016200035d565b60405180910390fd5b60601b6001600160601b031916608052620003c5565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160009182916060916001600160a01b03871691620001ad91906200033f565b600060405180830381855afa9150503d8060008114620001ea576040519150601f19603f3d011682016040523d82523d6000602084013e620001ef565b606091505b50915091508115806200020457508051602014155b15620002165760009250505062000243565b6000818060200190518101906200022e9190620002e5565b6001600160e01b031986811691161493505050505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028c57805160ff1916838001178555620002bc565b82800160010185558215620002bc579182015b82811115620002bc5782518255916020019190600101906200029f565b50620002ca929150620002ce565b5090565b5b80821115620002ca5760008155600101620002cf565b600060208284031215620002f7578081fd5b81516001600160e01b0319811681146200030f578182fd5b9392505050565b60006020828403121562000328578081fd5b81516001600160a01b03811681146200030f578182fd5b600082516200035381846020870162000392565b9190910192915050565b60006020825282518060208401526200037e81604085016020870162000392565b601f01601f19169190910160400192915050565b60005b83811015620003af57818101518382015260200162000395565b83811115620003bf576000848401525b50505050565b60805160601c614998620003f26000398061145a5280611571528061185e5280611f0452506149986000f3fe608060405234801561001057600080fd5b50600436106103825760003560e01c80637acb7757116101de578063b277e8f01161010f578063e529ee95116100ad578063f8112eed1161007c578063f8112eed146106b8578063fc0e74d1146106cb578063fe4b84df146106d3578063ff833485146106e657610382565b8063e529ee9514610672578063e89133b21461067a578063f2fde38b14610682578063f301af421461069557610382565b8063c00007b0116100e9578063c00007b01461063c578063cc7d510e1461064f578063dcb4cd6314610657578063dd62ed3e1461065f57610382565b8063b277e8f014610619578063b95c57461461062c578063bf86d6901461063457610382565b8063923c1d611161017c578063a457c2d711610156578063a457c2d7146105e3578063a7e8489d146105f6578063a9059cbb146105fe578063b145a5b81461061157610382565b8063923c1d61146105cb57806395d89b41146105d35780639a6fd6fc146105db57610382565b806386824aca116101b857806386824aca1461059557806386c52694146105a85780638757b15b146105bb5780638da5cb5b146105c357610382565b80637acb77571461055a5780637f7af7781461056d57806381974e901461058257610382565b806339509351116102b85780636a4874a1116102565780636e553f65116102305780636e553f651461052457806370a0823114610537578063715018a61461054a578063742c20851461055257610382565b80636a4874a1146105015780636b091695146105095780636e1933c31461051c57610382565b806344214ecf1161029257806344214ecf146104cb5780634b0ee02a146104d35780634b820093146104e65780634f39059c146104f957610382565b806339509351146104925780633969dfb4146104a55780633dfd3873146104b857610382565b806318160ddd116103255780632495a599116102ff5780632495a5991461045a5780632cdacb50146104625780632e1a7d4d1461046a578063313ce5671461047d57610382565b806318160ddd1461041f5780631f52f2d11461043457806323b872dd1461044757610382565b806306fdde031161036157806306fdde03146103da578063095ea7b3146103ef5780630bece79c1461040257806314d6aed01461041757610382565b80628cc2621461038757806301e462dd146103b057806305fcaff1146103c5575b600080fd5b61039a610395366004613dd4565b6106f9565b6040516103a79190614276565b60405180910390f35b6103c36103be366004613e0c565b610778565b005b6103cd6107a3565b6040516103a791906142ce565b6103e26107ac565b6040516103a791906142ee565b6103cd6103fd366004613f0e565b610842565b61040a610860565b6040516103a791906141c7565b6103c361086f565b610427611028565b6040516103a791906147e6565b6103c3610442366004613dd4565b61102e565b6103cd610455366004613ece565b611057565b61040a6110df565b61040a6110ee565b6103c3610478366004614085565b611106565b6104856111da565b6040516103a79190614817565b6103cd6104a0366004613f0e565b6111df565b6103c36104b3366004614085565b61122d565b6103c36104c6366004613dd4565b611236565b61040a6112bf565b6104276104e1366004613dd4565b6112ce565b6103cd6104f4366004613dd4565b6112d9565b61040a61130a565b61040a611319565b6103c3610517366004613e0c565b611331565b6103e2611380565b6103c36105323660046140b5565b6113b9565b610427610545366004613dd4565b6113c3565b6103c36113de565b6103c3611440565b6103c36105683660046140b5565b61166e565b610575611775565b6040516103a791906142d9565b6103c3610590366004614085565b611799565b6103cd6105a3366004613dd4565b611aa6565b6103c36105b6366004613dd4565b611abb565b6103c3611d45565b61040a611ddd565b61040a611dec565b6103e2611e04565b6103e2611e65565b6103cd6105f1366004613f0e565b611e9a565b61040a611f02565b6103cd61060c366004613f0e565b611f26565b6103cd611f3a565b61039a610627366004613dd4565b611f4a565b610427611f55565b6103cd611f5b565b6103c361064a366004613dd4565b611f6b565b61040a611f90565b6103e2611f9f565b61042761066d366004613e0c565b611fd1565b610427611ffc565b61040a612002565b6103c3610690366004613dd4565b612011565b6106a86106a3366004614085565b6120ab565b6040516103a79493929190614219565b6103c36106c6366004613dd4565b6120ee565b6103c36121c6565b6103c36106e1366004614085565b61222e565b6104276106f4366004613dd4565b6124ea565b600954604051637050ccd960e01b81526060916001600160a01b031690637050ccd99061072d903090600190600401614242565b600060405180830381600087803b15801561074757600080fd5b505af115801561075b573d6000803e3d6000fd5b505050506107676125db565b61077082612656565b90505b919050565b604080518082019091526001600160a01b0380841682528216602082015261079f90612b2a565b5050565b60135460ff1681565b60108054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b5050505050905090565b600061085661084f612c77565b8484612c7b565b5060015b92915050565b600b546001600160a01b031681565b600954600c546001600160a01b0390911690610c6757600c604051806080016040528073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b03168152602001836001600160a01b03168152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301555050600c6040518060800160405280734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015550506000600101600d600073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b03166001600160a01b031681526020019081526020016000208190555060018001600d6000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03166001600160a01b031681526020019081526020016000208190555073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b031663a9059cbb3060006040518363ffffffff1660e01b8152600401610b1492919061425d565b602060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190613f39565b5060405163a9059cbb60e01b8152734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b9063a9059cbb90610ba190309060009060040161425d565b602060405180830381600087803b158015610bbb57600080fd5b505af1158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf39190613f39565b506000805160206148b083398151915273d533a949740bb3306d119cc777fa900ba034cd52604051610c2591906141c7565b60405180910390a16000805160206148b0833981519152734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b604051610c5e91906141c7565b60405180910390a15b6000816001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda919061409d565b905060005b8181101561102357604051632061aa2360e11b81526000906001600160a01b038516906340c3544690610d169085906004016147e6565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190613df0565b90506000816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610da357600080fd5b505afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190613df0565b90506097600a5410610e5b57806001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190613df0565b90505b6001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415610ec95781600c600181548110610e8f57fe5b906000526020600020906006020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611019565b6001600160a01b0381166000908152600d602052604090205461101957604080516080810182526001600160a01b038084168083528582166020808501918252600085870181815260608701828152600c8054600181018255818552985160069099027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7810180549a8a166001600160a01b03199b8c1617905595517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c88701805491909916991698909817909655517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c984015593517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca909201919091559254908252600d90925282902055516000805160206148b0833981519152906110109083906141c7565b60405180910390a15b5050600101610cdf565b505050565b60025490565b604080518082019091526001600160a01b03821681526000602082015261105490612b2a565b50565b6000611064848484612d2f565b6110d484611070612c77565b6110cf856040518060600160405280602881526020016148f6602891396001600160a01b038a166000908152600160205260408120906110ae612c77565b6001600160a01b031681526020810191909152604001600020549190612e44565b612c7b565b5060015b9392505050565b6007546001600160a01b031690565b73f403c135812408bfbe8713b5a23a04b3d48aae3181565b8015611193576111163382612e70565b600954604051631c683a1b60e11b81526001600160a01b03909116906338d07436906111499084906000906004016147ef565b600060405180830381600087803b15801561116357600080fd5b505af1158015611177573d6000803e3d6000fd5b505060085461119392506001600160a01b031690503383612f46565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a58260006040516111cf9291906147ef565b60405180910390a250565b601290565b60006108566111ec612c77565b846110cf85600160006111fd612c77565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612f9c565b61105481612fc1565b600f546001600160a01b031633146112695760405162461bcd60e51b81526004016112609061453e565b60405180910390fd5b600e80546001600160a01b0319166001600160a01b0383161790556040517f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a906112b49083906141c7565b60405180910390a150565b600e546001600160a01b031681565b60006107708261308a565b604080518082019091526001600160a01b03821681526000602082018190529061130290612b2a565b506001919050565b6007546001600160a01b031681565b73d533a949740bb3306d119cc777fa900ba034cd5281565b336001600160a01b038316146113595760405162461bcd60e51b815260040161126090614573565b604080518082019091526001600160a01b0380841682528216602082015261079f9061329b565b6040518060400160405280601c81526020017f496e76616c696453696c6f5265706f7369746f7279416464726573730000000081525081565b61079f8282613387565b6001600160a01b031660009081526020819052604090205490565b600f546001600160a01b031633146114085760405162461bcd60e51b81526004016112609061453e565b600f546040516000916001600160a01b03169060008051602061491e833981519152908390a3600f80546001600160a01b0319169055565b604051630c5a30b960e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906318b461729061148f9030906004016141c7565b602060405180830381600087803b1580156114a957600080fd5b505af11580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190613df0565b90506001600160a01b03811661153857604080518082018252601981527810dbdb1b185d195c985b15985d5b1d139bdd10dc99585d1959603a1b6020820152905162461bcd60e51b815261126091906004016142ee565b6001600160a01b038082166000908152601260209081526040808320805460ff1916600117905580516303e21fa960e61b8152905192937f0000000000000000000000000000000000000000000000000000000000000000169263f887ea409260048084019391929182900301818787803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190613df0565b6001600160a01b038082166000908152601260205260409020805460ff19166001179055600b549192509081169083161461079f57600b80546001600160a01b0319166001600160a01b0384169081179091556040517f98591b379d0945355df2687e7941177774bf190304dba561b029c0f63fcbc17990600090a25050565b600e54600160a01b900460ff16156116985760405162461bcd60e51b815260040161126090614618565b8115611723576116a881836134b1565b6008546116c0906001600160a01b0316333085613565565b60095460405163534a7e1d60e11b81526001600160a01b039091169063a694fc3a906116f09085906004016147e6565b600060405180830381600087803b15801561170a57600080fd5b505af115801561171e573d6000803e3d6000fd5b505050505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460006040516117699291906147ef565b60405180910390a35050565b7fe99ed41de618732efbc0d0095584567f6718769787fe3fbb41fd1632fd5481c281565b60135460ff16156117e857604080518082018252601681527514da5b1bd5dc985c1c195c905b1c9958591e525b9a5d60521b6020820152905162461bcd60e51b815261126091906004016142ee565b6013805460ff19166001179055600e54600160a81b900460ff1661185c5760405163fe4b84df60e01b8152309063fe4b84df906118299084906004016147e6565b600060405180830381600087803b15801561184357600080fd5b505af1158015611857573d6000803e3d6000fd5b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef9190613df0565b600f80546001600160a01b0319166001600160a01b039283161790819055604051911690309060008051602061491e83398151915290600090a3600860009054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561197757600080fd5b505afa15801561198b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b39190810190613f81565b6040516020016119c39190614124565b604051602081830303815290604052601090805190602001906119e7929190613cbb565b50600860009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611a3657600080fd5b505afa158015611a4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a729190810190613f81565b604051602001611a82919061418d565b6040516020818303038152906040526011908051906020019061079f929190613cbb565b60126020526000908152604090205460ff1681565b600f546001600160a01b03163314611ae55760405162461bcd60e51b81526004016112609061453e565b6001600160a01b0381166000908152600d6020526040902054611cae57604080516080810182526001600160a01b038084168083526000602080850182815285870183815260608701848152600c8054600181018255818752985160069099027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7810180549a8a166001600160a01b03199b8c1617905593517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c88501805491909916991698909817909655517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c982015593517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca909401939093559254818452600d90925283832091909155915163a9059cbb60e01b815263a9059cbb91611c319130919060040161425d565b602060405180830381600087803b158015611c4b57600080fd5b505af1158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c839190613f39565b506000805160206148b083398151915281604051611ca191906141c7565b60405180910390a1611054565b6001600160a01b0381166000908152600d6020526040902054801561079f576000600c6001830381548110611cdf57fe5b6000918252602090912060069091020180549091506001600160a01b03166110235780546001600160a01b0319166001600160a01b0384161781556040516000805160206148b083398151915290611d389085906141c7565b60405180910390a1505050565b600754611d71906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae316000613586565b600754611d9e906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae31600019613586565b600954600854611dbc916001600160a01b0391821691166000613586565b600954600854611ddb916001600160a01b039182169116600019613586565b565b600f546001600160a01b031681565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b60118054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108385780601f1061080d57610100808354040283529160200191610838565b6040518060400160405280601981526020017810dbdb1b185d195c985b15985d5b1d139bdd10dc99585d1959603a1b81525081565b6000610856611ea7612c77565b846110cf8560405180606001604052806025815260200161493e6025913960016000611ed1612c77565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190612e44565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610856611f33612c77565b8484612d2f565b600e54600160a81b900460ff1681565b606061077082612656565b600c5490565b600e54600160a01b900460ff1681565b604080518082019091526001600160a01b03821680825260208201526110549061329b565b6009546001600160a01b031681565b6040518060400160405280601681526020017514da5b1bd5dc985c1c195c905b1c9958591e525b9a5d60521b81525081565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600a5481565b6008546001600160a01b031681565b600f546001600160a01b0316331461203b5760405162461bcd60e51b81526004016112609061453e565b6001600160a01b0381166120615760405162461bcd60e51b815260040161126090614364565b600f546040516001600160a01b0380841692169060008051602061491e83398151915290600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600c81815481106120b857fe5b600091825260209091206006909102018054600182015460028301546003909301546001600160a01b0392831694509116919084565b600f546001600160a01b031633146121185760405162461bcd60e51b81526004016112609061453e565b6001600160a01b0381166000908152600d6020526040902054801561079f576000600c600183038154811061214957fe5b6000918252602090912060069091020180549091506001600160a01b038481169116146121885760405162461bcd60e51b8152600401611260906146b5565b80546001600160a01b03191681556040517f646cfe9445aed85f4853d501d1924d2bdabb1bbf12531df29f929f07ba4169e090611d389085906141c7565b600f546001600160a01b031633146121f05760405162461bcd60e51b81526004016112609061453e565b600e805460ff60a01b1916600160a01b1790556040517f4426aa1fb73e391071491fcfe21a88b5c38a0a0333a1f6e77161470439704cf890600090a1565b600e54600160a81b900460ff16156122585760405162461bcd60e51b8152600401611260906144d7565b600f80546001600160a01b0319163317908190556040516001600160a01b03919091169060009060008051602061491e833981519152908290a3604051631526fe2760e01b81526000908190819073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe27906122d09087906004016147e6565b60c06040518083038186803b1580156122e857600080fd5b505afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190613e44565b5050600780546001600160a01b038087166001600160a01b0319928316179092556008805483871690831681179091556009805493851693909216929092179055600a899055604080516306fdde0360e01b81529051959850939650909450926306fdde03926004808201935060009291829003018186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123e19190810190613f81565b6040516020016123f191906140f5565b60405160208183030381529060405260109080519060200190612415929190613cbb565b50816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561244f57600080fd5b505afa158015612463573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261248b9190810190613f81565b60405160200161249b9190614162565b604051602081830303815290604052601190805190602001906124bf929190613cbb565b50600e805461ffff60a01b1916600160a81b1790556124dc61086f565b6124e4611d45565b50505050565b600d6020526000908152604090205481565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160009182916060916001600160a01b0387169161254691906140d9565b600060405180830381855afa9150503d8060008114612581576040519150601f19603f3d011682016040523d82523d6000602084013e612586565b606091505b509150915081158061259a57508051602014155b156125aa5760009250505061085a565b6000818060200190518101906125c09190613f59565b6001600160e01b031990811690861614935050505092915050565b600e546001600160a01b031615611ddb57600e60009054906101000a90046001600160a01b03166001600160a01b0316632663fcfc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561263c57600080fd5b505af192505050801561264d575060015b611ddb57611ddb565b60606000612662613649565b600c549091508067ffffffffffffffff8111801561267f57600080fd5b506040519080825280602002602001820160405280156126b957816020015b6126a6613d39565b81526020019060019003908161269e5790505b50925060005b81811015612b22576000600c82815481106126d657fe5b6000918252602090912060069091020180549091506001600160a01b03166126fe5750612b1a565b80546040516370a0823160e01b81526000916001600160a01b0316906370a082319061272e9030906004016141c7565b60206040518083038186803b15801561274657600080fd5b505afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e919061409d565b9050600061279983600301548361365890919063ffffffff16565b60018401549091506001600160a01b03161561283b5760018301546040516246613160e11b8152612838916001600160a01b031690628cc262906127e19030906004016141c7565b60206040518083038186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612831919061409d565b8290612f9c565b90505b60028301548615612865576128638761285d8468056bc75e2d63100000613680565b906136ba565b015b6001600160a01b03891660009081526004850160205260408120546128ad9068056bc75e2d631000009061285d9061289e908690613658565b6128a78e61308a565b90613680565b6001600160a01b038b1660009081526005870160205260409020549091506128ff906128d99083612f9c565b8a88815181106128e557fe5b602002602001015160200151612f9c90919063ffffffff16565b89878151811061290b57fe5b6020908102919091018101510152845489516001600160a01b03909116908a908890811061293557fe5b60209081029190910101516001600160a01b03909116905285612b14576002850154915087156129f95760018501546040516246613160e11b81526129f4918a9161285d9168056bc75e2d63100000916001600160a01b0390911690628cc262906129a49030906004016141c7565b60206040518083038186803b1580156129bc57600080fd5b505afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a7919061409d565b820191505b6001600160a01b038a166000908152600486016020526040902054612a329068056bc75e2d631000009061285d9061289e908690613658565b604051638487474560e01b815290915073__$bc773559428fe6419d41a765665bfcab46$__90638487474590612a6c9084906004016147e6565b60206040518083038186803b158015612a8457600080fd5b505af4158015612a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abc919061409d565b89600181518110612ac957fe5b60200260200101516020018181525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b89600181518110612afb57fe5b60209081029190910101516001600160a01b0390911690525b50505050505b6001016126bf565b505050919050565b60026006541415612b4d5760405162461bcd60e51b815260040161126090614722565b60026006556000612b5c613649565b9050612b66613d50565b612b778360005b602002015161308a565b8152612b84836001612b6d565b6020820152600e54600160a01b900460ff16612c0057600954604051637050ccd960e01b81526001600160a01b0390911690637050ccd990612bcd903090600190600401614242565b600060405180830381600087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050505b612c086125db565b600c5460005b81811015612c2c57612c248186858760006136ec565b600101612c0e565b50835160208501516040517ffbb924eaf6a0dae4d734ad9fd5399b11487e7da53ec2871839b24fa30381b5ff92612c649290916141db565b60405180910390a1505060016006555050565b3390565b6001600160a01b038316612ca15760405162461bcd60e51b81526004016112609061463a565b6001600160a01b038216612cc75760405162461bcd60e51b8152600401611260906143aa565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612d229085906147e6565b60405180910390a3505050565b6001600160a01b038316612d555760405162461bcd60e51b8152600401611260906145d3565b6001600160a01b038216612d7b5760405162461bcd60e51b815260040161126090614321565b612d86838383613ab9565b612dc3816040518060600160405280602681526020016148d0602691396001600160a01b0386166000908152602081905260409020549190612e44565b6001600160a01b038085166000908152602081905260408082209390935590841681522054612df29082612f9c565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612d229085906147e6565b60008184841115612e685760405162461bcd60e51b815260040161126091906142ee565b505050900390565b6001600160a01b038216612e965760405162461bcd60e51b815260040161126090614592565b612ea282600083613ab9565b612edf8160405180606001604052806022815260200161488e602291396001600160a01b0385166000908152602081905260409020549190612e44565b6001600160a01b038316600090815260208190526040902055600254612f059082613658565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906117699085906147e6565b6110238363a9059cbb60e01b8484604051602401612f6592919061425d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613ae0565b6000828201838110156110d85760405162461bcd60e51b8152600401611260906143ec565b801561304e57612fd13382612e70565b600954604051636197390160e11b81526001600160a01b039091169063c32e7202906130049084906000906004016147ef565b600060405180830381600087803b15801561301e57600080fd5b505af1158015613032573d6000803e3d6000fd5b505060075461304e92506001600160a01b031690503383612f46565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a58260016040516111cf9291906147ef565b60006001600160a01b03821615806130ba57506001600160a01b03821660009081526012602052604090205460ff165b156130c757506000610773565b600b546001600160a01b03166130e7576130e0826113c3565b9050610773565b6130ef613d6e565b600b5460405163bf27304160e01b81526001600160a01b039091169063bf2730419061311f9030906004016141c7565b60c06040518083038186803b15801561313757600080fd5b505afa15801561314b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316f919061400d565b9050600081602001516001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016131a391906141c7565b60206040518083038186803b1580156131bb57600080fd5b505afa1580156131cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f3919061409d565b9050600082602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323457600080fd5b505afa158015613248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326c919061409d565b6080840151909150613291613282848385613b6f565b61328b886113c3565b90612f9c565b9695505050505050565b600260065414156132be5760405162461bcd60e51b815260040161126090614722565b600260065560006132cd613649565b90506132d7613d50565b6132e2836000612b6d565b8152600e54600160a01b900460ff1661335b57600954604051637050ccd960e01b81526001600160a01b0390911690637050ccd990613328903090600190600401614242565b600060405180830381600087803b15801561334257600080fd5b505af1158015613356573d6000803e3d6000fd5b505050505b6133636125db565b600c5460005b81811015612c2c5761337f8186858760016136ec565b600101613369565b600e54600160a01b900460ff16156133b15760405162461bcd60e51b815260040161126090614618565b811561346b576133c181836134b1565b6007546133d9906001600160a01b0316333085613565565b600a546040516321d0683360e11b815273f403c135812408bfbe8713b5a23a04b3d48aae31916343a0d06691613417919086906001906004016147ff565b602060405180830381600087803b15801561343157600080fd5b505af1158015613445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134699190613f39565b505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460016040516117699291906147ef565b6001600160a01b0382166134d75760405162461bcd60e51b8152600401611260906147af565b6134e360008383613ab9565b6002546134f09082612f9c565b6002556001600160a01b0382166000908152602081905260409020546135169082612f9c565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906117699085906147e6565b6124e4846323b872dd60e01b858585604051602401612f65939291906141f5565b80158061360e5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906135bc90309086906004016141db565b60206040518083038186803b1580156135d457600080fd5b505afa1580156135e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360c919061409d565b155b61362a5760405162461bcd60e51b815260040161126090614759565b6110238363095ea7b360e01b8484604051602401612f6592919061425d565b6000613653611028565b905090565b60008282111561367a5760405162461bcd60e51b815260040161126090614423565b50900390565b60008261368f5750600061085a565b8282028284828161369c57fe5b04146110d85760405162461bcd60e51b8152600401611260906144fd565b60008082116136db5760405162461bcd60e51b8152600401611260906144a0565b8183816136e457fe5b049392505050565b6000600c86815481106136fb57fe5b6000918252602090912060069091020180549091506001600160a01b03166137235750613ab2565b80546040516370a0823160e01b81526000916001600160a01b0316906370a08231906137539030906004016141c7565b60206040518083038186803b15801561376b57600080fd5b505afa15801561377f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a3919061409d565b90506000841180156137b85750816003015481115b156137f2576137e58461285d68056bc75e2d631000006128a786600301548661365890919063ffffffff16565b6002830180549190910190555b60005b6002811015613a9b57600087826002811061380c57fe5b60200201516001600160a01b0316141561382557613a93565b600b546001600160a01b031687826002811061383d57fe5b60200201516001600160a01b0316141561385657613a93565b83801561386257508015155b1561386c57613a93565b600083600401600089846002811061388057fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002054905084806138b75750836002015481105b15613a915784156139cc57600061394b61390568056bc75e2d6310000061285d6138ee868a6002015461365890919063ffffffff16565b8c88600281106138fa57fe5b602002015190613680565b8660050160008c876002811061391757fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002054612f9c90919063ffffffff16565b905080156139c65760008560050160008b866002811061396757fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055506139b98984600101600281106139a257fe5b602002015186546001600160a01b03169083612f46565b6139c38482613658565b93505b50613a50565b613a14613a0268056bc75e2d6310000061285d6139f685896002015461365890919063ffffffff16565b8b87600281106138fa57fe5b8560050160008b866002811061391757fe5b8460050160008a8560028110613a2657fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b83600201548460040160008a8560028110613a6757fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b505b6001016137f5565b5081600301548114613aaf57600382018190555b50505b5050505050565b604080518082019091526001600160a01b0380851682528316602082015261102390612b2a565b6060613b35826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ba49092919063ffffffff16565b8051909150156110235780806020019051810190613b539190613f39565b6110235760405162461bcd60e51b8152600401611260906146d8565b6000811580613b7c575082155b15613b89575060006110d8565b81613b948585613680565b81613b9b57fe5b04949350505050565b6060613bb38484600085613bbb565b949350505050565b606082471015613bdd5760405162461bcd60e51b81526004016112609061445a565b613be685613c7c565b613c025760405162461bcd60e51b81526004016112609061467e565b60006060866001600160a01b03168587604051613c1f91906140d9565b60006040518083038185875af1925050503d8060008114613c5c576040519150601f19603f3d011682016040523d82523d6000602084013e613c61565b606091505b5091509150613c71828286613c82565b979650505050505050565b3b151590565b60608315613c915750816110d8565b825115613ca15782518084602001fd5b8160405162461bcd60e51b815260040161126091906142ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613cfc57805160ff1916838001178555613d29565b82800160010185558215613d29579182015b82811115613d29578251825591602001919060010190613d0e565b50613d35929150613dbf565b5090565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b5b80821115613d355760008155600101613dc0565b600060208284031215613de5578081fd5b81356110d881614878565b600060208284031215613e01578081fd5b81516110d881614878565b60008060408385031215613e1e578081fd5b8235613e2981614878565b91506020830135613e3981614878565b809150509250929050565b60008060008060008060c08789031215613e5c578182fd5b8651613e6781614878565b6020880151909650613e7881614878565b6040880151909550613e8981614878565b6060880151909450613e9a81614878565b6080880151909350613eab81614878565b60a08801519092508015158114613ec0578182fd5b809150509295509295509295565b600080600060608486031215613ee2578283fd5b8335613eed81614878565b92506020840135613efd81614878565b929592945050506040919091013590565b60008060408385031215613f20578182fd5b8235613f2b81614878565b946020939093013593505050565b600060208284031215613f4a578081fd5b815180151581146110d8578182fd5b600060208284031215613f6a578081fd5b81516001600160e01b0319811681146110d8578182fd5b600060208284031215613f92578081fd5b815167ffffffffffffffff80821115613fa9578283fd5b818401915084601f830112613fbc578283fd5b815181811115613fca578384fd5b613fdd601f8201601f1916602001614825565b9150808252856020828501011115613ff3578384fd5b61400481602084016020860161484c565b50949350505050565b600060c0828403121561401e578081fd5b61402860c0614825565b825161403381614878565b8152602083015161404381614878565b6020820152604083015161405681614878565b80604083015250606083015160608201526080830151608082015260a083015160a08201528091505092915050565b600060208284031215614096578081fd5b5035919050565b6000602082840312156140ae578081fd5b5051919050565b600080604083850312156140c7578182fd5b823591506020830135613e3981614878565b600082516140eb81846020870161484c565b9190910192915050565b600066029ba30b5b2b2160cd1b8252825161411781600785016020870161484c565b9190910160070192915050565b600066029ba30b5b2b2160cd1b8252825161414681600785016020870161484c565b642053696c6f60d81b6007939091019283015250600c01919050565b60006273746b60e81b8252825161418081600385016020870161484c565b9190910160030192915050565b60006273746b60e81b825282516141ab81600385016020870161484c565b642d73696c6f60d81b6003939091019283015250600801919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156142c157815180516001600160a01b03168552860151868501529284019290850190600101614293565b5091979650505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b600060208252825180602084015261430d81604085016020870161484c565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600c908201526b185b1c9958591e481a5b9a5d60a21b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526005908201526410b9b2b63360d91b604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260099082015268042dad2e6dac2e8c6d60bb1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561484457600080fd5b604052919050565b60005b8381101561486757818101518382015260200161484f565b838111156124e45750506000910152565b6001600160a01b038116811461105457600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365b13fd610fe4e1b384966826794a9b2f6100ad031f352cc5ec6f22667f607498045524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63658be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e045524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209aa1acae1a294b1b477351ec7fa338d5edf3260e8a29e85b1c4d19963d143dde64736f6c634300060c0033a26469706673582212203177812e36d9da2be089c63013bc9f6136bcf1ad49078f9efd5bd4261afd139f64736f6c634300060c0033",
  "libraries": {
    "CvxMining": "0x3eA735304D2e5055a2e85987096dA029A683dc28"
  },
  "devdoc": {
    "events": {
      "ConvexSiloWrapperCreated(address,uint256)": {
        "details": "New ConvexSiloWrapper is deployed with an address `convexSiloWrapper`. Underlying LP token     is for `curvePoolId` Curve pool."
      }
    },
    "kind": "dev",
    "methods": {
      "convexSiloWrapperFactoryPing()": {
        "details": "Ping library function for ConvexSiloWrapperFactory."
      },
      "createConvexSiloWrapper(uint256)": {
        "details": "Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token     is transferred to the Silo DAO by calling `initializeSiloWrapper`.",
        "params": {
          "_poolId": "the Curve pool id in the Convex Booster. Curve LP token will be the underlying     token of a wrapper."
        },
        "returns": {
          "wrapper": "is an address of deployed ConvexSiloWrapper"
        }
      }
    },
    "stateVariables": {
      "deployedWrappers": {
        "details": "Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.",
        "params": {
          "_poolId": "the Curve pool id in the Convex Booster"
        }
      },
      "isWrapper": {
        "details": "Check if an address is a ConvexSiloWrapper.",
        "params": {
          "_wrapper": "address to check."
        }
      }
    },
    "title": "ConvexSiloWrapperFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Deploys ConvexSiloWrapper for Curve LP tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4113,
        "contract": "contracts/wrappers/convex/ConvexSiloWrapperFactory.sol:ConvexSiloWrapperFactory",
        "label": "deployedWrappers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4119,
        "contract": "contracts/wrappers/convex/ConvexSiloWrapperFactory.sol:ConvexSiloWrapperFactory",
        "label": "isWrapper",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}