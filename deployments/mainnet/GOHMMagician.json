{
  "address": "0xd4240aed295fF0fc2D76b3160E5D63692bA72133",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "contract IOlympusStakingV3Like",
          "name": "_olympusStakingV3",
          "type": "address"
        },
        {
          "internalType": "contract IBalancerVaultLike",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerOhmPool",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBalancerPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BALANCER_OHM_POOL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BALANCER_VAULT",
      "outputs": [
        {
          "internalType": "contract IBalancerVaultLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOHM",
      "outputs": [
        {
          "internalType": "contract IGOHMLikeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OHM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OLYMPUS_STAKING_CLAIM",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OLYMPUS_STAKING_REBASING",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OLYMPUS_STAKING_TRIGGER",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OLYMPUS_STAKING_V3",
      "outputs": [
        {
          "internalType": "contract IOlympusStakingV3Like",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_AMOUNT_IN_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_AMOUNT_OUT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEN_POW_GOHM_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_EXTRA_WEIS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gOhmAmount",
          "type": "uint256"
        }
      ],
      "name": "ohmBalanceFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ohmAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBalancerVaultLike",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_poolId",
          "type": "bytes32"
        }
      ],
      "name": "verifyPoolAndVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbd81ff9011028da3dc76e5637ac9019540e252dd350333aba4dedccde21e9a4",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0xd4240aed295fF0fc2D76b3160E5D63692bA72133",
    "transactionIndex": 107,
    "gasUsed": "1078970",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x827dfe90637c2a6b64c867f7303fe06daf8a4e175268e4f270ee6d4230a01f65",
    "transactionHash": "0xbbd81ff9011028da3dc76e5637ac9019540e252dd350333aba4dedccde21e9a4",
    "logs": [],
    "blockNumber": 16242186,
    "cumulativeGasUsed": "9428274",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xB63cac384247597756545b500253ff8E607a8020",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0xd1ec5e215e8148d76f4460e4097fd3d5ae0a35580002000000000000000003d3"
  ],
  "numDeployments": 2,
  "solcInputHash": "1c3ed62bc78b1723b3d9b7897a5ae84d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"contract IOlympusStakingV3Like\",\"name\":\"_olympusStakingV3\",\"type\":\"address\"},{\"internalType\":\"contract IBalancerVaultLike\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerOhmPool\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalancerPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BALANCER_OHM_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"contract IBalancerVaultLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOHM\",\"outputs\":[{\"internalType\":\"contract IGOHMLikeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLYMPUS_STAKING_CLAIM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLYMPUS_STAKING_REBASING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLYMPUS_STAKING_TRIGGER\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLYMPUS_STAKING_V3\",\"outputs\":[{\"internalType\":\"contract IOlympusStakingV3Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_AMOUNT_IN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_AMOUNT_OUT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEN_POW_GOHM_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_EXTRA_WEIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gOhmAmount\",\"type\":\"uint256\"}],\"name\":\"ohmBalanceFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ohmAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBalancerVaultLike\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"name\":\"verifyPoolAndVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"gOHM Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\",\"kind\":\"dev\",\"methods\":{\"ohmBalanceFrom(uint256)\":{\"details\":\"calculate gOHM -> OHMv2 amounts.     Our goal is to calculate right amount of OHM that will give us `_gOhmAmount` when we stake it.     2 extra weis added to make sure that we will not receive less than `_gOhmAmount`.     First `1 wei` explanation:     We can lose up to one wei on step of OHM -> gOHM inside OlympusStaking.stake():     OHM -> gOHM formula: `ohmAmount * (10**18) / (index);`.     The operation of `/(index)` can cause the lost of [0..index-1] from `ohmAmount * (10**18)`.     If we add 1 wei to `ohmAmount`, `(ohmAmount + 1 wei) * (10**18) > ohmAmount * (10**18) - (index - 1)`.     Index has 9 basis points, it will work until it will not increase 10**18.     Second `1 wei` explanation:     We can lose up to one wei on step of gOHM -> OHM calculation below.     gOHM -> OHM formula: `(gOhmAmount * index) / (10**18)`.     The operation of `/ (10**18)` can cause the lost of [0..10**18 - 1] from `(gOhmAmount * index)`.     Let's add extra wei to gOHM -> OHM formula.     Then on gOHM -> OHM calculations, worst case scenario:     ((gOhmAmount * index) / (10**18) + 1) * (10**18) / (index) >=     = (gOhmAmount * index - (10**18 - 1) + 10**18) / index =     = (gOhmAmount * index + 1) / index >= gOhmAmount\",\"params\":{\"_gOhmAmount\":\"input amount of gOHM\"},\"returns\":{\"ohmAmount\":\"equal amount in OHMv2\"}},\"towardsAsset(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be wrapped\"},\"returns\":{\"_0\":\"A token that the `_asset` has been converted to\",\"_1\":\"Amount of the quote token that we spent to get `_amoun` of the `_asset`\"}},\"towardsNative(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be unwrapped\"},\"returns\":{\"_0\":\"A token that the `_asset` has been converted to\",\"_1\":\"Amount of the `tokenOut` that we received\"}},\"verifyPoolAndVault(address,bytes32)\":{\"details\":\"verify the Balancer pool and the vault. Sanity check for vault address is a call of getPoolTokens(_poolId).     Pool is valid if it has OHMv2 and quote tokens.\",\"params\":{\"_balancerVault\":\"address of the Balancer vault\",\"_poolId\":\"pool id\"},\"returns\":{\"_0\":\"true if the pool is valid for the swap\"}}},\"stateVariables\":{\"BALANCER_OHM_POOL\":{\"details\":\"OHMv2 pool that is used for swap.\"},\"BALANCER_VAULT\":{\"details\":\"Required for OHMv2 swap.\"},\"GOHM\":{\"details\":\"Wrapper for rebasing sOHM token.\"},\"OHM\":{\"details\":\"Original token, OHMv2.\"},\"OLYMPUS_STAKING_CLAIM\":{\"details\":\"Argument for Olympus Staking `stake()`. Mint gOHM tokens instantly on stake.\"},\"OLYMPUS_STAKING_REBASING\":{\"details\":\"Argument for Olympus Staking `stake()` or `unstake()`. Receive gOHM tokens instead of rebasing sOHM.\"},\"OLYMPUS_STAKING_TRIGGER\":{\"details\":\"Argument for Olympus Staking `unstake()`. Do not trigger rebase() of OHM tokens, save gas.\"},\"OLYMPUS_STAKING_V3\":{\"details\":\"Olympus staking contract for OHMv2 <-> gOHM wrapping and unwrapping.\"},\"QUOTE\":{\"details\":\"The address of quote token.\"},\"SWAP_AMOUNT_IN_LIMIT\":{\"details\":\"Limit for OHMv2 swap.\"},\"SWAP_AMOUNT_OUT_LIMIT\":{\"details\":\"Limit for OHMv2 swap.\"},\"TEN_POW_GOHM_DECIMALS\":{\"details\":\"10 ** (gOHM decimals), constant and equal to 10**18.\"},\"TWO_EXTRA_WEIS\":{\"details\":\"Value for gOHM -> OHMv2 balances calculation\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"towardsAsset(address,uint256)\":{\"notice\":\"Performs operation opposit to `towardsNative`\"},\"towardsNative(address,uint256)\":{\"notice\":\"Operates to unwrap an `_asset`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/magicians/GOHMMagician.sol\":\"GOHMMagician\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/GOHMMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IMagician.sol\\\";\\nimport \\\"./interfaces/IOlympusStakingV3Like.sol\\\";\\nimport \\\"./interfaces/IGOHMLikeV2.sol\\\";\\nimport \\\"./interfaces/IBalancerVaultLike.sol\\\";\\n\\n/// @dev gOHM Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract GOHMMagician is IMagician {\\n    /// @dev Value for gOHM -> OHMv2 balances calculation\\n    uint256 public constant TWO_EXTRA_WEIS = (1 wei) + (1 wei);\\n\\n    /// @dev Argument for Olympus Staking `stake()`. Mint gOHM tokens instantly on stake.\\n    bool public constant OLYMPUS_STAKING_CLAIM = true;\\n\\n    /// @dev Argument for Olympus Staking `stake()` or `unstake()`. Receive gOHM tokens instead of rebasing sOHM.\\n    bool public constant OLYMPUS_STAKING_REBASING = false;\\n\\n    /// @dev Argument for Olympus Staking `unstake()`. Do not trigger rebase() of OHM tokens, save gas.\\n    bool public constant OLYMPUS_STAKING_TRIGGER = false;\\n\\n    /// @dev Limit for OHMv2 swap.\\n    uint256 public constant SWAP_AMOUNT_OUT_LIMIT = type(uint256).max;\\n\\n    /// @dev Limit for OHMv2 swap.\\n    uint256 public constant SWAP_AMOUNT_IN_LIMIT = 1;\\n\\n    /// @dev Required for OHMv2 swap.\\n    // solhint-disable-next-line var-name-mixedcase\\n    IBalancerVaultLike public immutable BALANCER_VAULT;\\n\\n    /// @dev OHMv2 pool that is used for swap.\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public immutable BALANCER_OHM_POOL;\\n\\n    /// @dev The address of quote token.\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable QUOTE;\\n\\n    /// @dev 10 ** (gOHM decimals), constant and equal to 10**18.\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable TEN_POW_GOHM_DECIMALS;\\n\\n    /// @dev Original token, OHMv2.\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OHM;\\n\\n    /// @dev Wrapper for rebasing sOHM token.\\n    // solhint-disable-next-line var-name-mixedcase\\n    IGOHMLikeV2 public immutable GOHM;\\n\\n    /// @dev Olympus staking contract for OHMv2 <-> gOHM wrapping and unwrapping.\\n    // solhint-disable-next-line var-name-mixedcase\\n    IOlympusStakingV3Like public immutable OLYMPUS_STAKING_V3;\\n\\n    error InvalidAsset();\\n    error InvalidBalancerPool();\\n\\n    constructor(\\n        address _quote,\\n        IOlympusStakingV3Like _olympusStakingV3,\\n        IBalancerVaultLike _balancerVault,\\n        bytes32 _balancerOhmPool\\n    ) {\\n        QUOTE = _quote;\\n\\n        GOHM = IGOHMLikeV2(_olympusStakingV3.gOHM());\\n        TEN_POW_GOHM_DECIMALS = 10 ** GOHM.decimals();\\n        OHM = _olympusStakingV3.OHM();\\n\\n        OLYMPUS_STAKING_V3 = _olympusStakingV3;\\n        BALANCER_VAULT = _balancerVault;\\n        BALANCER_OHM_POOL = _balancerOhmPool;\\n\\n        if (!verifyPoolAndVault(_balancerVault, _balancerOhmPool)) revert InvalidBalancerPool();\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsNative(address _asset, uint256 _amount) external returns (address, uint256) {\\n        if (_asset != address(GOHM)) revert InvalidAsset();\\n\\n        GOHM.approve(address(OLYMPUS_STAKING_V3), _amount);\\n\\n        uint256 ohmAmount = OLYMPUS_STAKING_V3.unstake(\\n            address(this),\\n                _amount,\\n                OLYMPUS_STAKING_TRIGGER,\\n                OLYMPUS_STAKING_REBASING\\n        );\\n\\n        return (QUOTE, _swapOHMForQuote(ohmAmount));\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address, uint256) {\\n        if (_asset != address(GOHM)) revert InvalidAsset();\\n\\n        uint256 ohmAmount = ohmBalanceFrom(_amount);\\n        uint256 quoteSpent = _swapQuoteForOHM(ohmAmount);\\n\\n        IERC20(OHM).approve(address(OLYMPUS_STAKING_V3), ohmAmount);\\n        OLYMPUS_STAKING_V3.stake(address(this), ohmAmount, OLYMPUS_STAKING_REBASING, OLYMPUS_STAKING_CLAIM);\\n\\n        return (address(GOHM), quoteSpent);\\n    }\\n\\n    /// @dev calculate gOHM -> OHMv2 amounts.\\n    ///     Our goal is to calculate right amount of OHM that will give us `_gOhmAmount` when we stake it.\\n    ///     2 extra weis added to make sure that we will not receive less than `_gOhmAmount`.\\n    ///     First `1 wei` explanation:\\n    ///     We can lose up to one wei on step of OHM -> gOHM inside OlympusStaking.stake():\\n    ///     OHM -> gOHM formula: `ohmAmount * (10**18) / (index);`.\\n    ///     The operation of `/(index)` can cause the lost of [0..index-1] from `ohmAmount * (10**18)`.\\n    ///     If we add 1 wei to `ohmAmount`, `(ohmAmount + 1 wei) * (10**18) > ohmAmount * (10**18) - (index - 1)`.\\n    ///     Index has 9 basis points, it will work until it will not increase 10**18.\\n    ///     Second `1 wei` explanation:\\n    ///     We can lose up to one wei on step of gOHM -> OHM calculation below.\\n    ///     gOHM -> OHM formula: `(gOhmAmount * index) / (10**18)`.\\n    ///     The operation of `/ (10**18)` can cause the lost of [0..10**18 - 1] from `(gOhmAmount * index)`.\\n    ///     Let's add extra wei to gOHM -> OHM formula.\\n    ///     Then on gOHM -> OHM calculations, worst case scenario:\\n    ///     ((gOhmAmount * index) / (10**18) + 1) * (10**18) / (index) >=\\n    ///     = (gOhmAmount * index - (10**18 - 1) + 10**18) / index =\\n    ///     = (gOhmAmount * index + 1) / index >= gOhmAmount\\n    /// @param _gOhmAmount input amount of gOHM\\n    /// @return ohmAmount equal amount in OHMv2\\n    function ohmBalanceFrom(uint256 _gOhmAmount) public view returns (uint256 ohmAmount) {\\n        ohmAmount = _gOhmAmount * GOHM.index();\\n\\n        // we can safely divide by 10 ** 18 and add 2\\n        unchecked {\\n            ohmAmount = ohmAmount / TEN_POW_GOHM_DECIMALS + TWO_EXTRA_WEIS;\\n        }\\n    }\\n\\n    /// @dev verify the Balancer pool and the vault. Sanity check for vault address is a call of getPoolTokens(_poolId).\\n    ///     Pool is valid if it has OHMv2 and quote tokens.\\n    /// @param _balancerVault address of the Balancer vault\\n    /// @param _poolId pool id\\n    /// @return true if the pool is valid for the swap\\n    function verifyPoolAndVault(IBalancerVaultLike _balancerVault, bytes32 _poolId) public view returns (bool) {\\n        (address[] memory tokens,,) = IBalancerVaultLike(_balancerVault).getPoolTokens(_poolId);\\n        bool isQuote;\\n        bool isOhm;\\n\\n        for (uint256 i; i < tokens.length && !(isOhm && isQuote);) {\\n            if (!isOhm && tokens[i] == OHM) {\\n                isOhm = true;\\n            } else if (!isQuote && tokens[i] == QUOTE) {\\n                isQuote = true;\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return isQuote && isOhm;\\n    }\\n\\n    /// @dev it swaps OHMv2 for quote token\\n    /// @param _ohmAmount exact amountIn of OHMv2 token\\n    /// @return quoteReceived amount of quote token received\\n    function _swapOHMForQuote(uint256 _ohmAmount) internal returns (uint256 quoteReceived) {\\n        IERC20(OHM).approve(address(BALANCER_VAULT), _ohmAmount);\\n        quoteReceived = _swapAmountIn(OHM, QUOTE, _ohmAmount, BALANCER_OHM_POOL);\\n    }\\n\\n    /// @dev it swaps quote token for OHMv2\\n    /// @param _ohmAmount exact amountOut of OHMv2\\n    /// @return quoteSpent amount of quote token spent\\n    function _swapQuoteForOHM(uint256 _ohmAmount) internal returns (uint256 quoteSpent) {\\n        IERC20(QUOTE).approve(address(BALANCER_VAULT), SWAP_AMOUNT_OUT_LIMIT);\\n        quoteSpent = _swapAmountOut(QUOTE, OHM, _ohmAmount, BALANCER_OHM_POOL);\\n    }\\n\\n    /// @dev it swaps _tokenIn for _tokenOut\\n    /// @param _tokenIn address of the tokenIn\\n    /// @param _tokenOut address of the tokenOut\\n    /// @param _amountOut amount of the tokenOut to receive\\n    /// @param _poolId balancer pool id\\n    /// @return amount of _tokenIn spent\\n    function _swapAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOut,\\n        bytes32 _poolId\\n    ) internal returns (uint256) {\\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_OUT, address(_tokenIn), address(_tokenOut), _amountOut, \\\"\\\"\\n        );\\n\\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\\n            address(this), false, payable(address(this)), false\\n        );\\n\\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_OUT_LIMIT, block.timestamp);\\n    }\\n\\n    /// @dev it swaps _tokenIn for _tokenOut\\n    /// @param _tokenIn address of the tokenIn\\n    /// @param _tokenOut address of the tokenOut\\n    /// @param _amountIn amount of the tokenIn to spend\\n    /// @param _poolId balancer pool id\\n    /// @return amount of _tokenOut received\\n    function _swapAmountIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        bytes32 _poolId\\n    ) internal returns (uint256) {\\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_IN, address(_tokenIn), address(_tokenOut), _amountIn, \\\"\\\"\\n        );\\n\\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\\n            address(this), false, payable(address(this)), false\\n        );\\n\\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_IN_LIMIT, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x284c0f9949bc99b06af2174d17f17833c50a9ef91293fe06f3aee63060dfe0e6\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IBalancerVaultLike.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IBalancerVaultLike {\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n}\\n\",\"keccak256\":\"0xacbd0cf3ad2fb0f51664ea2842edb0da075cf8067c93e35d205127d136905027\",\"license\":\"BUSL-1.1\"},\"contracts/liquidation/magicians/interfaces/IGOHMLikeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGOHMLikeV2 is IERC20 {\\n    function index() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21001093cd4f95b6529bf051ea6c4b2293a9ec386eb43683a04c71f70d7d2b48\",\"license\":\"BUSL-1.1\"},\"contracts/liquidation/magicians/interfaces/IMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xb48290785d1be3d5b1ed767ee628faa69ee7ded238de776d66b9e0795536ff50\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IOlympusStakingV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev A simplified version of the Olympus staking V3 interface with methods\\n/// that are required for the gOHM magician contract.\\ninterface IOlympusStakingV3Like {\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256 amount_);\\n\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function OHM() external view returns (address);\\n    function gOHM() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7e2477f42496f89b7980ceaca142f59c04f5e12d3fbf3ec5bbb6bf3e1c4a765f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019a9380380620019a9833981016040819052620000359162000362565b836001600160a01b031660c0816001600160a01b031681525050826001600160a01b0316630cd305856040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b49190620003bc565b6001600160a01b03166101208190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015620000ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001259190620003e3565b6200013290600a62000510565b60e08181525050826001600160a01b031663a6c41fec6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000178573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019e9190620003bc565b6001600160a01b039081166101005283811661014052821660805260a0819052620001ca8282620001f2565b620001e857604051633ee6ea3360e01b815260040160405180910390fd5b50505050620006f1565b604051631f29a8cd60e31b81526004810182905260009081906001600160a01b0385169063f94d466890602401600060405180830381865afa1580156200023d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000267919081019062000600565b5050905060008060005b8351811080156200028a5750818015620002885750825b155b15620003315781158015620002cf5750610100516001600160a01b0316848281518110620002bc57620002bc620006db565b60200260200101516001600160a01b0316145b15620002df576001915062000328565b821580156200031d575060c0516001600160a01b03168482815181106200030a576200030a620006db565b60200260200101516001600160a01b0316145b156200032857600192505b60010162000271565b508180156200033d5750805b93505050505b92915050565b6001600160a01b03811681146200035f57600080fd5b50565b600080600080608085870312156200037957600080fd5b8451620003868162000349565b6020860151909450620003998162000349565b6040860151909350620003ac8162000349565b6060959095015193969295505050565b600060208284031215620003cf57600080fd5b8151620003dc8162000349565b9392505050565b600060208284031215620003f657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000454578160001904821115620004385762000438620003fd565b808516156200044657918102915b93841c939080029062000418565b509250929050565b6000826200046d5750600162000343565b816200047c5750600062000343565b8160018114620004955760028114620004a057620004c0565b600191505062000343565b60ff841115620004b457620004b4620003fd565b50506001821b62000343565b5060208310610133831016604e8410600b8410161715620004e5575081810a62000343565b620004f1838362000413565b8060001904821115620005085762000508620003fd565b029392505050565b6000620003dc83836200045c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200055f576200055f6200051e565b604052919050565b60006001600160401b038211156200058357620005836200051e565b5060051b60200190565b600082601f8301126200059f57600080fd5b81516020620005b8620005b28362000567565b62000534565b82815260059290921b84018101918181019086841115620005d857600080fd5b8286015b84811015620005f55780518352918301918301620005dc565b509695505050505050565b6000806000606084860312156200061657600080fd5b83516001600160401b03808211156200062e57600080fd5b818601915086601f8301126200064357600080fd5b8151602062000656620005b28362000567565b82815260059290921b8401810191818101908a8411156200067657600080fd5b948201945b83861015620006a1578551620006918162000349565b825294820194908201906200067b565b91890151919750909350505080821115620006bb57600080fd5b50620006ca868287016200058d565b925050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e0516101005161012051610140516111a762000802600039600081816102800152818161035c015281816104260152818161079d01526108690152600081816102a7015281816102f50152818161038b015281816106540152818161071e01526108e101526000818161023201528181610576015281816107cf01528181610954015281816109c90152610b1601526000818161017f01526106e40152600081816101e20152818161049f015281816105dc015281816109ea01528181610a800152610af50152600081816102ce01528181610a0c0152610b380152600081816102590152818161092201528181610a4d01528181610c000152610d4201526111a76000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639c579839116100a2578063a6c41fec11610071578063a6c41fec1461022d578063bc16384614610254578063ca8c1d561461027b578063d1d5b4c8146102a2578063e40b3c82146102c957600080fd5b80639c579839146101dd578063a0c823451461021c578063a32ddf451461012d578063a65f5d881461022457600080fd5b80633b2fcd09116100de5780633b2fcd091461017a5780635afa4f98146101af5780636a6d6633146101c25780636ea477da146101ca57600080fd5b80630eb9ac4e146101105780630f0ebadd1461012d57806321ebbf0114610135578063269b177e14610167575b600080fd5b610118600181565b60405190151581526020015b60405180910390f35b610118600081565b610148610143366004610dac565b6102f0565b604080516001600160a01b039093168352602083019190915201610124565b610118610175366004610dac565b6104d3565b6101a17f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610124565b6101a16101bd366004610dd8565b610650565b6101a1600181565b6101486101d8366004610dac565b610719565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b6101a1600281565b6101a160001981565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101a17f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461034557604051636448d6e960e11b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610df1565b5060405163990966d560e01b81523060048201526024810184905260006044820181905260648201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063990966d5906084016020604051808303816000875af1158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610e1a565b90507f00000000000000000000000000000000000000000000000000000000000000006104c78261090b565b92509250509250929050565b604051631f29a8cd60e31b81526004810182905260009081906001600160a01b0385169063f94d466890602401600060405180830381865afa15801561051d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105459190810190610f09565b5050905060008060005b83518110801561056657508180156105645750825b155b1561063b57811580156105c357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482815181106105b0576105b0610fd7565b60200260200101516001600160a01b0316145b156105d15760019150610633565b8215801561062957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061061657610616610fd7565b60200260200101516001600160a01b0316145b1561063357600192505b60010161054f565b508180156106465750805b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610e1a565b6106de9083610fed565b905060027f000000000000000000000000000000000000000000000000000000000000000082816107115761071161101a565b040192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461076e57604051636448d6e960e11b815260040160405180910390fd5b600061077984610650565b9050600061078682610a36565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190610df1565b50604051631b0cd93b60e31b81523060048201526024810183905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d866c9d8906084016020604051808303816000875af11580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190610e1a565b507f0000000000000000000000000000000000000000000000000000000000000000969095509350505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190610df1565b50610a307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610b5c565b92915050565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190610df1565b50610a307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610c9f565b6000806040518060c0016040528084815260200160006001811115610b8357610b83611030565b8152602001876001600160a01b03168152602001866001600160a01b0316815260200185815260200160405180602001604052806000815250815250905060006040518060800160405280306001600160a01b03168152602001600015158152602001306001600160a01b031681526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352bbbe2983836001426040518563ffffffff1660e01b8152600401610c519493929190611093565b6020604051808303816000875af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190610e1a565b979650505050505050565b6000806040518060c00160405280848152602001600180811115610cc557610cc5611030565b8152602001876001600160a01b03168152602001866001600160a01b0316815260200185815260200160405180602001604052806000815250815250905060006040518060800160405280306001600160a01b03168152602001600015158152602001306001600160a01b031681526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352bbbe298383600019426040518563ffffffff1660e01b8152600401610c519493929190611093565b6001600160a01b0381168114610da957600080fd5b50565b60008060408385031215610dbf57600080fd5b8235610dca81610d94565b946020939093013593505050565b600060208284031215610dea57600080fd5b5035919050565b600060208284031215610e0357600080fd5b81518015158114610e1357600080fd5b9392505050565b600060208284031215610e2c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e7257610e72610e33565b604052919050565b600067ffffffffffffffff821115610e9457610e94610e33565b5060051b60200190565b600082601f830112610eaf57600080fd5b81516020610ec4610ebf83610e7a565b610e49565b82815260059290921b84018101918181019086841115610ee357600080fd5b8286015b84811015610efe5780518352918301918301610ee7565b509695505050505050565b600080600060608486031215610f1e57600080fd5b835167ffffffffffffffff80821115610f3657600080fd5b818601915086601f830112610f4a57600080fd5b81516020610f5a610ebf83610e7a565b82815260059290921b8401810191818101908a841115610f7957600080fd5b948201945b83861015610fa0578551610f9181610d94565b82529482019490820190610f7e565b91890151919750909350505080821115610fb957600080fd5b50610fc686828701610e9e565b925050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561101557634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000815180845260005b8181101561106c57602081850181015186830182015201611050565b8181111561107e576000602083870101525b50601f01601f19169290920160200192915050565b60e08152845160e082015260006020860151600281106110c357634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b031661012083015260608601516110f86101408401826001600160a01b03169052565b50608086015161016083015260a086015160c061018084015261111f6101a0840182611046565b91505061115f602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c001529291505056fea26469706673582212209a00d315f05cba865e34d5b414b3b49c022e903fbe19bacac9decd39b3a2ddd264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80639c579839116100a2578063a6c41fec11610071578063a6c41fec1461022d578063bc16384614610254578063ca8c1d561461027b578063d1d5b4c8146102a2578063e40b3c82146102c957600080fd5b80639c579839146101dd578063a0c823451461021c578063a32ddf451461012d578063a65f5d881461022457600080fd5b80633b2fcd09116100de5780633b2fcd091461017a5780635afa4f98146101af5780636a6d6633146101c25780636ea477da146101ca57600080fd5b80630eb9ac4e146101105780630f0ebadd1461012d57806321ebbf0114610135578063269b177e14610167575b600080fd5b610118600181565b60405190151581526020015b60405180910390f35b610118600081565b610148610143366004610dac565b6102f0565b604080516001600160a01b039093168352602083019190915201610124565b610118610175366004610dac565b6104d3565b6101a17f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610124565b6101a16101bd366004610dd8565b610650565b6101a1600181565b6101486101d8366004610dac565b610719565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b6101a1600281565b6101a160001981565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101a17f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461034557604051636448d6e960e11b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610df1565b5060405163990966d560e01b81523060048201526024810184905260006044820181905260648201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063990966d5906084016020604051808303816000875af1158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610e1a565b90507f00000000000000000000000000000000000000000000000000000000000000006104c78261090b565b92509250509250929050565b604051631f29a8cd60e31b81526004810182905260009081906001600160a01b0385169063f94d466890602401600060405180830381865afa15801561051d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105459190810190610f09565b5050905060008060005b83518110801561056657508180156105645750825b155b1561063b57811580156105c357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482815181106105b0576105b0610fd7565b60200260200101516001600160a01b0316145b156105d15760019150610633565b8215801561062957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061061657610616610fd7565b60200260200101516001600160a01b0316145b1561063357600192505b60010161054f565b508180156106465750805b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610e1a565b6106de9083610fed565b905060027f000000000000000000000000000000000000000000000000000000000000000082816107115761071161101a565b040192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461076e57604051636448d6e960e11b815260040160405180910390fd5b600061077984610650565b9050600061078682610a36565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190610df1565b50604051631b0cd93b60e31b81523060048201526024810183905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d866c9d8906084016020604051808303816000875af11580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190610e1a565b507f0000000000000000000000000000000000000000000000000000000000000000969095509350505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190610df1565b50610a307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610b5c565b92915050565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190610df1565b50610a307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610c9f565b6000806040518060c0016040528084815260200160006001811115610b8357610b83611030565b8152602001876001600160a01b03168152602001866001600160a01b0316815260200185815260200160405180602001604052806000815250815250905060006040518060800160405280306001600160a01b03168152602001600015158152602001306001600160a01b031681526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352bbbe2983836001426040518563ffffffff1660e01b8152600401610c519493929190611093565b6020604051808303816000875af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190610e1a565b979650505050505050565b6000806040518060c00160405280848152602001600180811115610cc557610cc5611030565b8152602001876001600160a01b03168152602001866001600160a01b0316815260200185815260200160405180602001604052806000815250815250905060006040518060800160405280306001600160a01b03168152602001600015158152602001306001600160a01b031681526020016000151581525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352bbbe298383600019426040518563ffffffff1660e01b8152600401610c519493929190611093565b6001600160a01b0381168114610da957600080fd5b50565b60008060408385031215610dbf57600080fd5b8235610dca81610d94565b946020939093013593505050565b600060208284031215610dea57600080fd5b5035919050565b600060208284031215610e0357600080fd5b81518015158114610e1357600080fd5b9392505050565b600060208284031215610e2c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e7257610e72610e33565b604052919050565b600067ffffffffffffffff821115610e9457610e94610e33565b5060051b60200190565b600082601f830112610eaf57600080fd5b81516020610ec4610ebf83610e7a565b610e49565b82815260059290921b84018101918181019086841115610ee357600080fd5b8286015b84811015610efe5780518352918301918301610ee7565b509695505050505050565b600080600060608486031215610f1e57600080fd5b835167ffffffffffffffff80821115610f3657600080fd5b818601915086601f830112610f4a57600080fd5b81516020610f5a610ebf83610e7a565b82815260059290921b8401810191818101908a841115610f7957600080fd5b948201945b83861015610fa0578551610f9181610d94565b82529482019490820190610f7e565b91890151919750909350505080821115610fb957600080fd5b50610fc686828701610e9e565b925050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561101557634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000815180845260005b8181101561106c57602081850181015186830182015201611050565b8181111561107e576000602083870101525b50601f01601f19169290920160200192915050565b60e08152845160e082015260006020860151600281106110c357634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b031661012083015260608601516110f86101408401826001600160a01b03169052565b50608086015161016083015260a086015160c061018084015261111f6101a0840182611046565b91505061115f602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c001529291505056fea26469706673582212209a00d315f05cba865e34d5b414b3b49c022e903fbe19bacac9decd39b3a2ddd264736f6c634300080d0033",
  "devdoc": {
    "details": "gOHM Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.",
    "kind": "dev",
    "methods": {
      "ohmBalanceFrom(uint256)": {
        "details": "calculate gOHM -> OHMv2 amounts.     Our goal is to calculate right amount of OHM that will give us `_gOhmAmount` when we stake it.     2 extra weis added to make sure that we will not receive less than `_gOhmAmount`.     First `1 wei` explanation:     We can lose up to one wei on step of OHM -> gOHM inside OlympusStaking.stake():     OHM -> gOHM formula: `ohmAmount * (10**18) / (index);`.     The operation of `/(index)` can cause the lost of [0..index-1] from `ohmAmount * (10**18)`.     If we add 1 wei to `ohmAmount`, `(ohmAmount + 1 wei) * (10**18) > ohmAmount * (10**18) - (index - 1)`.     Index has 9 basis points, it will work until it will not increase 10**18.     Second `1 wei` explanation:     We can lose up to one wei on step of gOHM -> OHM calculation below.     gOHM -> OHM formula: `(gOhmAmount * index) / (10**18)`.     The operation of `/ (10**18)` can cause the lost of [0..10**18 - 1] from `(gOhmAmount * index)`.     Let's add extra wei to gOHM -> OHM formula.     Then on gOHM -> OHM calculations, worst case scenario:     ((gOhmAmount * index) / (10**18) + 1) * (10**18) / (index) >=     = (gOhmAmount * index - (10**18 - 1) + 10**18) / index =     = (gOhmAmount * index + 1) / index >= gOhmAmount",
        "params": {
          "_gOhmAmount": "input amount of gOHM"
        },
        "returns": {
          "ohmAmount": "equal amount in OHMv2"
        }
      },
      "towardsAsset(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be wrapped"
        },
        "returns": {
          "_0": "A token that the `_asset` has been converted to",
          "_1": "Amount of the quote token that we spent to get `_amoun` of the `_asset`"
        }
      },
      "towardsNative(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be unwrapped"
        },
        "returns": {
          "_0": "A token that the `_asset` has been converted to",
          "_1": "Amount of the `tokenOut` that we received"
        }
      },
      "verifyPoolAndVault(address,bytes32)": {
        "details": "verify the Balancer pool and the vault. Sanity check for vault address is a call of getPoolTokens(_poolId).     Pool is valid if it has OHMv2 and quote tokens.",
        "params": {
          "_balancerVault": "address of the Balancer vault",
          "_poolId": "pool id"
        },
        "returns": {
          "_0": "true if the pool is valid for the swap"
        }
      }
    },
    "stateVariables": {
      "BALANCER_OHM_POOL": {
        "details": "OHMv2 pool that is used for swap."
      },
      "BALANCER_VAULT": {
        "details": "Required for OHMv2 swap."
      },
      "GOHM": {
        "details": "Wrapper for rebasing sOHM token."
      },
      "OHM": {
        "details": "Original token, OHMv2."
      },
      "OLYMPUS_STAKING_CLAIM": {
        "details": "Argument for Olympus Staking `stake()`. Mint gOHM tokens instantly on stake."
      },
      "OLYMPUS_STAKING_REBASING": {
        "details": "Argument for Olympus Staking `stake()` or `unstake()`. Receive gOHM tokens instead of rebasing sOHM."
      },
      "OLYMPUS_STAKING_TRIGGER": {
        "details": "Argument for Olympus Staking `unstake()`. Do not trigger rebase() of OHM tokens, save gas."
      },
      "OLYMPUS_STAKING_V3": {
        "details": "Olympus staking contract for OHMv2 <-> gOHM wrapping and unwrapping."
      },
      "QUOTE": {
        "details": "The address of quote token."
      },
      "SWAP_AMOUNT_IN_LIMIT": {
        "details": "Limit for OHMv2 swap."
      },
      "SWAP_AMOUNT_OUT_LIMIT": {
        "details": "Limit for OHMv2 swap."
      },
      "TEN_POW_GOHM_DECIMALS": {
        "details": "10 ** (gOHM decimals), constant and equal to 10**18."
      },
      "TWO_EXTRA_WEIS": {
        "details": "Value for gOHM -> OHMv2 balances calculation"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "towardsAsset(address,uint256)": {
        "notice": "Performs operation opposit to `towardsNative`"
      },
      "towardsNative(address,uint256)": {
        "notice": "Operates to unwrap an `_asset`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}