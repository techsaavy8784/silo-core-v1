{
  "address": "0x240A30427E765464A5428eF6A2028e17B079d319",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedCollateral",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFINITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "addSilo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrowFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeERC20Implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalInterestsForDeltaTime",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ISiloFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowAmountValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getTotalDepositsUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        }
      ],
      "name": "seizeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract BridgeERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmountLastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateLastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x030a5c1826a953f9d81ef09c7e8e0d76b35cc40dd03ae4ec8d6a3c5c372a9528",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0x240A30427E765464A5428eF6A2028e17B079d319",
    "transactionIndex": 67,
    "gasUsed": "4405200",
    "logsBloom": "0x
    "blockHash": "0x7415b5799bed3b5bb9ae36000e6e19721a70d3d1ff320588097870fe0637d72b",
    "transactionHash": "0x030a5c1826a953f9d81ef09c7e8e0d76b35cc40dd03ae4ec8d6a3c5c372a9528",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 13628543,
        "transactionHash": "0x030a5c1826a953f9d81ef09c7e8e0d76b35cc40dd03ae4ec8d6a3c5c372a9528",
        "address": "0xbC78aef969Fca7684C83f36938BDaf31C159Cc8c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000240a30427e765464a5428ef6a2028e17b079d319"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x7415b5799bed3b5bb9ae36000e6e19721a70d3d1ff320588097870fe0637d72b"
      }
    ],
    "blockNumber": 13628543,
    "cumulativeGasUsed": "8100504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x012D960E091587A6075C8233FDEba7db87142923"
  ],
  "solcInputHash": "537831d942c1ab4870aa40f6dd7512c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedCollateral\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFINITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"addSilo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeERC20Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInterestsForDeltaTime\",\"type\":\"uint256\"}],\"name\":\"calculateInterestShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ISiloFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowAmountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getTotalDepositsUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"seizeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract BridgeERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowAmountValue(address,address)\":{\"details\":\"value of asset borrowed by user\"},\"getCollateralValue(address,address)\":{\"details\":\"value of collateral (asset) provided by user\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloBridgePool.sol\":\"SiloBridgePool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/SiloBridgePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/ISiloBridgePool.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IVirtualBalances.sol\\\";\\n\\nimport \\\"./utils/BridgeERC20Upgradeable.sol\\\";\\nimport \\\"./lib/EasyMath.sol\\\";\\n\\ncontract SiloBridgePool is ISiloBridgePool, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using SafeERC20 for ERC20Upgradeable;\\n    using EasyMath for uint256;\\n\\n    struct BridgeSiloStorage {\\n        BridgeERC20Upgradeable token;\\n        uint256 totalDeposits;\\n        uint256 totalBorrowAmount;\\n        uint256 borrowAmountLastUpdateTimestamp;\\n        uint256 totalBorrowShare;\\n        uint256 interestRate;\\n        uint256 interestRateLastUpdateTimestamp;\\n        uint256 protocolFees;\\n        uint256 deposit;\\n        mapping(address => uint256) borrowShare;\\n    }\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    //Implementation of BridgeERC20 for cloning\\n    address public immutable bridgeERC20Implementation;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable DECIMAL_POINTS;\\n    ISiloFactory immutable public factory;\\n\\n    address public override asset;\\n\\n    // silo address => BridgeSiloStorage\\n    mapping(address => BridgeSiloStorage) public state;\\n\\n    event Deposit(address indexed silo, address indexed user, uint256 amount);\\n    event Withdraw(address indexed silo, address indexed user, uint256 amount);\\n    event Borrow(address indexed silo, address indexed user, uint256 amount);\\n    event Repay(address indexed silo, address indexed user, uint256 amount);\\n    event Liquidate(address indexed silo, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == factory.router(), \\\"SiloBridgePool: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"SiloBridgePool: onlyFactory\\\");\\n        _;\\n    }\\n\\n    modifier onlySilo() {\\n        require(factory.isSilo(msg.sender), \\\"SiloBridgePool: onlySilo\\\");\\n        _;\\n    }\\n\\n    modifier interest(address _silo) {\\n        accrueInterest(_silo);\\n        _;\\n    }\\n\\n    /// @dev check if user has enough collateral deposited to bridgePool to support withstanding borrow position on silo\\n    modifier siloPositionSolvent(address _silo, address _user) {\\n        _;\\n        require(ISilo(_silo).isSolvent(_user), \\\"SiloBridgePool: not solvent in silo position\\\");\\n    }\\n\\n    modifier validateBorrow(address _silo, address _user) {\\n        _;\\n        require(\\n            getLTV(_silo, _user) <= factory.getMaximumLTV(address(this)),\\n            \\\"SiloBridgePool: maximumLTV\\\"\\n        );\\n    }\\n\\n    modifier validateMaxDeposits(address _silo) {\\n        _;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n        require(\\n            oracle.getPrice(asset) * state[_silo].totalDeposits / DECIMAL_POINTS <=\\n                IGuardedLaunch(address(factory)).getMaxSiloBridgeDeposits(_silo),\\n            \\\"SiloBridgePool: total deposits exceed liquidity limit\\\"\\n        );\\n    }\\n\\n    constructor (address _factory) {\\n        factory = ISiloFactory(_factory);\\n        asset = ISiloFactory(_factory).bridgeAsset();\\n        DECIMAL_POINTS = 10**ERC20Upgradeable(asset).decimals();\\n        BridgeERC20Upgradeable bridgeERC20Impl = new BridgeERC20Upgradeable();\\n        bridgeERC20Impl.initialize(\\\"Bridge\\\", \\\"bridge\\\", asset);\\n        bridgeERC20Implementation = address(bridgeERC20Impl);\\n    }\\n\\n    function deposit(address _silo, uint256 _amount) external {\\n        _deposit(_silo, msg.sender, msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _silo, address _user, uint256 _amount) external override onlyRouter {\\n        _deposit(_silo, _user, msg.sender, _amount);\\n    }\\n\\n    function withdraw(address _silo, uint256 _amount) external {\\n        _withdraw(_silo, msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(address _silo, address _user, uint256 _amount) external onlyRouter {\\n        _withdraw(_silo, _user, _amount);\\n    }\\n\\n    function borrow(address _silo, uint256 _amount)\\n        external\\n        validateBorrow(_silo, msg.sender)\\n        interest(_silo)\\n    {\\n        _borrow(_silo, msg.sender, msg.sender, _amount);\\n    }\\n\\n    function borrowFor(address _silo, address _user, address _to, uint256 _amount)\\n        external\\n        override\\n        onlyRouter\\n        validateBorrow(_silo, _user)\\n        interest(_silo)\\n    {\\n        _borrow(_silo, _user, _to, _amount);\\n    }\\n\\n    function repay(address _silo, uint256 _amount) external {\\n        _repay(_silo, msg.sender, msg.sender, _amount);\\n    }\\n\\n    function repayFor(address _silo, address _user, uint256 _amount) external onlyRouter {\\n        _repay(_silo, _user, msg.sender, _amount);\\n    }\\n\\n    function seizeCollateral(address _user, address _liquidator) external override onlySilo returns (uint256) {\\n        BridgeSiloStorage storage _state = state[msg.sender];\\n        uint256 collateral = _state.token.balanceOf(_user);\\n        _state.token.forceTransfer(_user, _liquidator, collateral);\\n        return collateral.toAmount(_state.totalDeposits, _state.token.totalSupply());\\n    }\\n\\n    function liquidate(address _silo, address[] memory _users) external interest(_silo) returns (uint256[] memory) {\\n        uint256[] memory liquidated = new uint256[](_users.length);\\n        uint256 n = _users.length;\\n        for (uint256 i = 0; i < n; i++) {\\n            liquidated[i] = _liquidate(_silo, _users[i]);\\n        }\\n        return liquidated;\\n    }\\n\\n    function addSilo(address _silo, string memory _name, string memory _symbol) external override onlyFactory {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        string memory name = string(abi.encodePacked(string(\\\"Bridge \\\"), _name));\\n        string memory symbol = string(abi.encodePacked(string(\\\"bridge-\\\"), _symbol));\\n        address clone = Clones.clone(bridgeERC20Implementation);\\n        BridgeERC20Upgradeable(clone).initialize(name, symbol, _silo);\\n        _state.token = BridgeERC20Upgradeable(clone);\\n    }\\n\\n    function accrueInterest(address _silo) public {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        _accrueInterest(_state, block.timestamp);\\n    }\\n\\n    function getTotalDepositsUpdated(address _silo) public view returns (uint256 _totalDeposits) {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations(_state);\\n        (,_totalDeposits) = calculateInterestShares(\\n            _state.protocolFees,\\n            _state.totalDeposits,\\n            output.totalInterests\\n        );\\n    }\\n\\n    function isSolvent(address _silo, address _user) public view override returns (bool) {\\n        require(_user != address(0), \\\"SiloBridgePool: user != address(0)\\\");\\n        uint256 liquidationThreshold = factory.getLiquidationThreshold(address(this));\\n        return getLTV(_silo, _user) <= liquidationThreshold;\\n    }\\n\\n    function getLTV(address _silo, address _user) public view override returns (uint256) {\\n        uint256 borrowAmountValue = getBorrowAmountValue(_silo, _user);\\n        if (borrowAmountValue == 0) return 0;\\n\\n        uint256 collateralValue = ISilo(_silo).getCollateralValue(_user);\\n        if (collateralValue == 0) return INFINITY;\\n        return borrowAmountValue * BASIS_POINTS / collateralValue;\\n    }\\n\\n    /// @dev value of collateral (asset) provided by user\\n    function getCollateralValue(address _silo, address _user) public view override returns (uint256) {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        uint256 assetAmount = _state.token.balanceOf(_user).toAmount(\\n            getTotalDepositsUpdated(_silo),\\n            _state.token.totalSupply()\\n        );\\n        // TODO: price must have 1e18 decimals\\n        return assetAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    /// @dev value of asset borrowed by user\\n    function getBorrowAmountValue(address _silo, address _user) public view returns (uint256) {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n\\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations(_state);\\n\\n        uint256 assetDebtAmount = _state.borrowShare[_user].toAmount(output.newBorrowAmount, _state.totalBorrowShare);\\n\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        // TODO: price must have 1e18 decimals\\n        return assetDebtAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    function liquidity() public view returns (uint256) {\\n        return BridgeERC20Upgradeable(asset).balanceOf(address(this));\\n    }\\n\\n    function balanceOfUnderlying(address _silo, address _user) public view returns (uint256) {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        uint256 share = _state.token.balanceOf(_user);\\n        return share.toAmount(getTotalDepositsUpdated(_silo), _state.token.totalSupply());\\n    }\\n\\n    function calcFee(uint256 _amount) public view returns (uint256) {\\n        uint256 entryFee = factory.entryFee();\\n        if (entryFee == 0) return 0; // no fee\\n        return _amount * entryFee / BASIS_POINTS;\\n    }\\n\\n    function getBorrowShare(address _silo, address _user) public view returns (uint256) {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        return _state.borrowShare[_user];\\n    }\\n\\n    function calculateInterestShares(\\n        uint256 _protocolFees,\\n        uint256 _totalDeposits,\\n        uint256 _totalInterestsForDeltaTime\\n    ) public view returns (\\n        uint256 newProtocolFees,\\n        uint256 newTotalDeposits\\n    ) {\\n        uint256 protocolInterestShare = _totalInterestsForDeltaTime * factory.protocolShareFee() / BASIS_POINTS;\\n        uint256 siloInterestShare = _totalInterestsForDeltaTime - protocolInterestShare;\\n\\n        newProtocolFees = _protocolFees + protocolInterestShare;\\n        newTotalDeposits = _totalDeposits + siloInterestShare;\\n    }\\n\\n    function _accrueInterest(BridgeSiloStorage storage _state, uint256 _blockTimestamp) internal {\\n        uint256 borrowAmountLastUpdateTimestampCached = _state.borrowAmountLastUpdateTimestamp;\\n\\n        if (_blockTimestamp == borrowAmountLastUpdateTimestampCached) {\\n            return;\\n        }\\n\\n        uint256 totalDepositsCached = _state.totalDeposits;\\n        address model = factory.getVirtualBalances(address(this));\\n\\n        IVirtualBalances.VirtualBalancesOutput memory output =  IVirtualBalances(model).getInterestData(\\n            IVirtualBalances.VirtualBalancesInputData({\\n                currentTimestamp: _blockTimestamp,\\n                deposit: totalDepositsCached,\\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\\n                borrowAmount: _state.totalBorrowAmount,\\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestampCached,\\n                interestRate: _state.interestRate,\\n                interestRateLastUpdateTimestamp: _state.interestRateLastUpdateTimestamp\\n            })\\n        );\\n\\n        // update contract state\\n        _state.totalBorrowAmount = output.newBorrowAmount;\\n        _state.borrowAmountLastUpdateTimestamp = output.newBorrowAmountUpdateTimestamp;\\n        _state.interestRate = output.newInterestRate;\\n        _state.interestRateLastUpdateTimestamp = output.newInterestRateTimestamp;\\n\\n        // accrue interest\\n        (\\n            _state.protocolFees,\\n            _state.totalDeposits\\n        ) = calculateInterestShares(_state.protocolFees, totalDepositsCached, output.totalInterests);\\n    }\\n\\n    function _deposit(address _silo, address _user, address _from, uint256 _amount)\\n        internal\\n        nonReentrant\\n        interest(_silo)\\n        validateMaxDeposits(_silo)\\n    {\\n        uint256 balanceBefore = liquidity();\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = liquidity();\\n\\n        BridgeSiloStorage storage _state = state[_silo];\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 share = _amount.toShare(_state.totalDeposits, _state.token.totalSupply());\\n        _state.totalDeposits += _amount;\\n        _state.deposit += _amount;\\n\\n        _state.token.mint(_user, share);\\n        emit Deposit(_silo, _user, _amount);\\n    }\\n\\n    function _withdraw(address _silo, address _user, uint256 _amount)\\n        internal\\n        nonReentrant\\n        siloPositionSolvent(_silo, _user)\\n        interest(_silo)\\n    {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        uint256 share;\\n        if (_amount == type(uint256).max) {\\n            share = _state.token.balanceOf(_user);\\n            _amount = share.toAmount(_state.totalDeposits, _state.token.totalSupply());\\n        } else {\\n            share = _amount.toShare(_state.totalDeposits, _state.token.totalSupply());\\n        }\\n        _state.totalDeposits -= _amount;\\n        _state.deposit -= _amount;\\n        _state.token.burn(_user, share);\\n        emit Withdraw(_silo, _user, _amount);\\n\\n        ERC20(asset).safeTransfer(_user, _amount);\\n    }\\n\\n    function _borrow(address _silo, address _user, address _to, uint256 _amount) internal nonReentrant {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        require(_state.deposit >= _amount, \\\"SiloBridge: deposit shortage\\\");\\n\\n        uint256 fee = calcFee(_amount);\\n        uint256 borrowerShare = (_amount + fee).toShare(_state.totalBorrowAmount, _state.totalBorrowShare);\\n        _state.borrowShare[_user] += borrowerShare;\\n        _state.totalBorrowShare += borrowerShare;\\n        _state.totalBorrowAmount += _amount + fee;\\n        _state.protocolFees += fee;\\n        _state.deposit -= _amount;\\n\\n        emit Borrow(_silo, _user, _amount);\\n\\n        ERC20(asset).safeTransfer(_to, _amount);\\n    }\\n\\n    function _repay(address _silo, address _user, address _from, uint256 _amount)\\n        internal nonReentrant interest(_silo) returns (uint256)\\n    {\\n        BridgeSiloStorage storage _state = state[_silo];\\n        uint256 repayShare;\\n        if (_amount == type(uint256).max) {\\n            repayShare = _state.borrowShare[_user];\\n            _amount = repayShare.toAmount(_state.totalBorrowAmount, _state.totalBorrowShare);\\n        } else {\\n            repayShare = _amount.toShare(_state.totalBorrowAmount, _state.totalBorrowShare);\\n        }\\n\\n        _state.borrowShare[_user] -= repayShare;\\n        _state.totalBorrowShare -= repayShare;\\n        _state.totalBorrowAmount -= _amount;\\n        _state.deposit += _amount;\\n\\n        emit Repay(_silo, _user, _amount);\\n\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n        return _amount;\\n    }\\n\\n    function _liquidate(address _silo, address _user) internal nonReentrant returns (uint256 seizedCollateral) {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_silo, _user)) return 0;\\n\\n        uint256 amountRepaid = _repay(_silo, _user, msg.sender, type(uint256).max);\\n        seizedCollateral = ISilo(_silo).seizeCollateral(_user, msg.sender);\\n\\n        emit Liquidate(_silo, _user, amountRepaid, seizedCollateral);\\n\\n        require(isSolvent(_silo, _user), \\\"SiloBridgePool: user not solvent\\\");\\n    }\\n\\n    function _executeInterestRateCalculations(BridgeSiloStorage storage _state)\\n        internal\\n        view\\n        returns (IVirtualBalances.VirtualBalancesOutput memory output)\\n    {\\n        address model = factory.getVirtualBalances(address(this));\\n\\n        return IVirtualBalances(model).getInterestData(\\n            IVirtualBalances.VirtualBalancesInputData({\\n                currentTimestamp: block.timestamp,\\n                deposit: _state.totalDeposits,\\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\\n                borrowAmount: _state.totalBorrowAmount,\\n                borrowAmountLastUpdateTimestamp: _state.borrowAmountLastUpdateTimestamp,\\n                interestRate: _state.interestRate,\\n                interestRateLastUpdateTimestamp: _state.interestRateLastUpdateTimestamp\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd490bf435efb0335fa7f288d4e2182202b782769a1931bf10c1c7adb4d25020f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IGuardedLaunch {\\n    function getMaxSiloDeposits(address silo) external view returns (uint256);\\n    function getMaxSiloBridgeDeposits(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8f9ba8ec2528d4ba94e792cb75458e0105a0eb90633d866286a657a05fcd21b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISilo {\\n    function deposit(uint256 amount) external;\\n    function borrow(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function withdrawFor(address user, uint256 amount) external;\\n    function repay(uint256 amount) external;\\n    function repayFor(address user, uint256 amount) external;\\n    function liquidate(address[] memory user) external returns (uint256[] memory);\\n    function depositFor(address user, uint256 amount) external;\\n    function borrowFor(address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function asset() external view returns (address);\\n    function isSolvent(address user) external view returns (bool);\\n    function getCollateralValue(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x03a164ae2aa24b3b93923bb197d23fd38fca7b2be138ce3c752bde48c5ff35eb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloBridgePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloBridgePool {\\n    function depositFor(address silo, address user, uint256 amount) external;\\n    function borrowFor(address silo, address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function addSilo(address silo, string memory name, string memory symbol) external;\\n    function getCollateralValue(address silo, address user) external view returns (uint256);\\n    function getLTV(address silo, address user) external view returns (uint256);\\n    function isSolvent(address silo, address user) external view returns (bool);\\n    function asset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8ec77f9a1c55da69a18ab2b78e0980ba1f07b1928f3e60632a48a6b4110f982a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address silo) external view returns (address);\\n    function router() external view returns (address);\\n    function bridgePool() external view returns (address);\\n    function bridgeAsset() external view returns (address);\\n    function oracle() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getVirtualBalances(address silo) external view returns (address);\\n    function getMaximumLTV(address silo) external view returns (uint256);\\n    function getLiquidationThreshold(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1cdcada73331a8004c4f48317c960200e059b50cbd2afee296929ceaa41b581c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n    // TODO do research (do we need to refresh price?) and make sure this can stay as a view\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d75cea95fee54e5af92bc86e24fb1c69c63850f6c324549c8d95ec11498ac46\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVirtualBalances.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IVirtualBalances {\\n    /// @param currentTimestamp block.timestamp\\n    /// @param siloShareFee BASIS_POINTS - factory.protocolShareFee\\n    /// @param deposit total deposit of the asset\\n    /// @param borrowAmount total borrow amount\\n    /// @param borrowAmountLastUpdateTimestamp time when `borrowAmount` was updated\\n    /// @param interestRate interest rate at `interestRateLastUpdateTimestamp`\\n    /// @param interestRateLastUpdateTimestamp time when `interestRate` was updated\\n    struct VirtualBalancesInputData {\\n        uint256 currentTimestamp;\\n        uint256 siloShareFee;\\n        uint256 deposit;\\n        uint256 borrowAmount;\\n        uint256 borrowAmountLastUpdateTimestamp;\\n        uint256 interestRate;\\n        uint256 interestRateLastUpdateTimestamp;\\n    }\\n\\n    /// @param newDeposit new deposit after apply interests for interval\\n    /// @param newBorrowAmount new borrowAmount after apply interests for interval\\n    /// @param newBorrowAmountUpdateTimestamp timestamp for `newBorrowAmount`\\n    /// @param newInterestRate new current interest rate\\n    /// @param newInterestRateTimestamp timestamp for `newInterestRate`\\n    /// @param totalInterests interest for provided period of time\\n    ///        from `borrowAmountLastUpdateTimestamp` to `newBorrowAmountUpdateTimestamp`\\n    /// @param protocolInterestShare % for protocol\\n    /// @param siloInterestShare % for users\\n    struct VirtualBalancesOutput {\\n        uint256 newDeposit;\\n        uint256 newBorrowAmount;\\n        uint256 newBorrowAmountUpdateTimestamp;\\n        uint256 newInterestRate;\\n        uint256 newInterestRateTimestamp;\\n        uint256 totalInterests;\\n        uint256 protocolInterestShare;\\n        uint256 siloInterestShare;\\n    }\\n\\n    /// @notice calculates total interests since `_lastUpdateTimestamp`\\n    /// @param _params see VirtualBalancesInputData\\n    /// @return output see InterestDataOuptut\\n    function getInterestData(VirtualBalancesInputData memory _params)\\n        external view returns (VirtualBalancesOutput memory output);\\n}\\n\",\"keccak256\":\"0xca32ee9e268a280bddf2affd0da6d9d847182900a55d57e2fd60ee7708dcde9a\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount * 1e14;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount * 1e14;\\n    }\\n}\\n\",\"keccak256\":\"0x6fad7557ec8708b17bfe6919acf2fb2ad59635591a12d82a8ba662786dd6e019\",\"license\":\"MIT\"},\"contracts/utils/BridgeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"./TwoStepOwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ISilo.sol\\\";\\n\\ncontract BridgeERC20Upgradeable is Initializable, ERC20Upgradeable, TwoStepOwnableUpgradeable {\\n\\n    ISilo public silo;\\n\\n    function mint(address _account, uint256 _amount) external onlyOwner {\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external onlyOwner {\\n        _burn(_account, _amount);\\n    }\\n\\n    function forceTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public onlyOwner returns (bool) {\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _silo\\n    ) public initializer {\\n        require(_silo != address(0), \\\"BridgeERC20: _silo != address(0)\\\");\\n        __Context_init_unchained();\\n        __TwoStepOwnableUpgradeable_init_unchained();\\n        __ERC20_init_unchained(_name, _symbol);\\n        silo = ISilo(_silo);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        require(silo.isSolvent(sender), \\\"BridgeERC20: not solvent in silo position\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x38bf97523f076e06eebdd6ce46ab0cbfa119a0ea55e7e63616945782723a97aa\",\"license\":\"MIT\"},\"contracts/utils/TwoStepOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract TwoStepOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(_msgSender() == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __TwoStepOwnableUpgradeable_init() internal initializer {\\n        __Context_init_unchained();\\n        __TwoStepOwnableUpgradeable_init_unchained();\\n    }\\n\\n    function __TwoStepOwnableUpgradeable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n    /* solhint-enable func-name-mixedcase */\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x873d6e83242c64736b4822d3e41f98e0e9301fa4714a0b98bb315bb7f6ab4480\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c806375dc7d8c11610104578063b3db428b116100a2578063d5a9b34811610071578063d5a9b348146104e8578063dbc5b4811461050f578063e1f1c4a714610522578063f3fef3a31461052b57600080fd5b8063b3db428b1461045f578063c45a015514610472578063ce47696f14610499578063d2ecda0e146104c057600080fd5b8063980f9689116100de578063980f9689146103dc5780639f1d9267146103ef578063a00a103414610402578063b02b54091461043f57600080fd5b806375dc7d8c146103a35780639198e515146103b6578063976ce495146103c957600080fd5b806338d52e0f116101715780634b8a35291161014b5780634b8a352914610351578063590630f0146103645780635f48f44b14610387578063680f43b11461039057600080fd5b806338d52e0f146103005780633d6d44511461032b57806347e7ef241461033e57600080fd5b80631d5f143e116101ad5780631d5f143e146102165780631eee3aa31461022957806322867d781461023c57806331e658a51461024f57600080fd5b8062ebe350146101d35780631a686502146101e85780631be655e814610203575b600080fd5b6101e66101e13660046130e2565b61053e565b005b6101f061070e565b6040519081526020015b60405180910390f35b6101f0610211366004612f49565b61078f565b6101f0610224366004612f49565b6108bf565b6101f0610237366004612f49565b610b0f565b6101e661024a366004613158565b610da0565b6102b261025d366004612f0f565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460078701546008909701546001600160a01b0390961697969495939492939192909189565b604080516001600160a01b03909a168a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016101fa565b600154610313906001600160a01b031681565b6040516001600160a01b0390911681526020016101fa565b6101f0610339366004612f0f565b610db1565b6101e661034c366004613158565b610df5565b6101e661035f366004613158565b610e05565b610377610372366004612f49565b610f13565b60405190151581526020016101fa565b6101f060001981565b6101f061039e366004612f49565b611027565b6101f06103b1366004613236565b6110ec565b6101e66103c4366004612f0f565b6111ae565b6101e66103d7366004612fd3565b6111d0565b6101f06103ea366004612f49565b61129d565b6101e66103fd366004612fd3565b611464565b6101f0610410366004612f49565b6001600160a01b0391821660009081526002602090815260408083209390941682526009909201909152205490565b61045261044d366004613014565b611530565b6040516101fa919061330b565b6101e661046d366004612fd3565b6115ef565b6103137f000000000000000000000000000000000000000000000000000000000000000081565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6104d36104ce366004613268565b6116bc565b604080519283526020830191909152016101fa565b6103137f000000000000000000000000000000000000000000000000000000000000000081565b6101e661051d366004612f82565b61179b565b6101f061271081565b6101e6610539366004613158565b61196c565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105bb5760405162461bcd60e51b815260206004820152601b60248201527f53696c6f427269646765506f6f6c3a206f6e6c79466163746f7279000000000060448201526064015b60405180910390fd5b6001600160a01b03831660009081526002602090815260408083208151808301835260078152660213934b233b2960cd1b81850152915190939261060292918791016132dc565b60405160208183030381529060405290506000604051806040016040528060078152602001666272696467652d60c81b815250846040516020016106479291906132dc565b604051602081830303815290604052905060006106837f0000000000000000000000000000000000000000000000000000000000000000611977565b6040516303bf912560e11b81529091506001600160a01b0382169063077f224a906106b690869086908c90600401613362565b600060405180830381600087803b1580156106d057600080fd5b505af11580156106e4573d6000803e3d6000fd5b505085546001600160a01b0319166001600160a01b03939093169290921790945550505050505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a919061324f565b905090565b6001600160a01b03828116600090815260026020526040808220805491516370a0823160e01b81528585166004820152929390928492909116906370a082319060240160206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610822919061324f565b90506108b461083086610db1565b8354604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061324f565b839190611a14565b925050505b92915050565b60405163025e1b9b60e31b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906312f0dcd89060240160206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613184565b6109a55760405162461bcd60e51b815260206004820152601860248201527f53696c6f427269646765506f6f6c3a206f6e6c7953696c6f000000000000000060448201526064016105b2565b33600090815260026020526040808220805491516370a0823160e01b81526001600160a01b03878116600483015291939291909116906370a082319060240160206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a34919061324f565b82546040516333bebb7760e01b81526001600160a01b0388811660048301528781166024830152604482018490529293509116906333bebb7790606401602060405180830381600087803b158015610a8b57600080fd5b505af1158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac39190613184565b5060018201548254604080516318160ddd60e01b815290516108b493926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561087457600080fd5b60008060026000856001600160a01b03166001600160a01b03168152602001908152602001600020905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc9190612f2c565b6001546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908316906341976e099060240160206040518083038186803b158015610c1757600080fd5b505afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061324f565b90506000610d5e610c5f88610db1565b8554604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061324f565b86546040516370a0823160e01b81526001600160a01b038b81166004830152909116906370a082319060240160206040518083038186803b158015610d1f57600080fd5b505afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d57919061324f565b9190611a14565b90507f0000000000000000000000000000000000000000000000000000000000000000610d8b83836134c7565b610d9591906134a5565b979650505050505050565b610dac82333384611a4b565b505050565b6001600160a01b038116600090815260026020526040812081610dd382611bea565b9050610dec826007015483600101548360a001516116bc565b95945050505050565b610e0182333384611e2d565b5050565b813383610e11816111ae565b610e1d853333876122a8565b50604051632f341ddf60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635e683bbe9060240160206040518083038186803b158015610e7d57600080fd5b505afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb5919061324f565b610ebf8383611027565b1115610f0d5760405162461bcd60e51b815260206004820152601a60248201527f53696c6f427269646765506f6f6c3a206d6178696d756d4c545600000000000060448201526064016105b2565b50505050565b60006001600160a01b038216610f765760405162461bcd60e51b815260206004820152602260248201527f53696c6f427269646765506f6f6c3a207573657220213d206164647265737328604482015261302960f01b60648201526084016105b2565b604051631ee1b90b60e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637b86e42c9060240160206040518083038186803b158015610fd857600080fd5b505afa158015610fec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611010919061324f565b90508061101d8585611027565b1115949350505050565b600080611034848461129d565b9050806110455760009150506108b9565b604051634bc8272160e11b81526001600160a01b038481166004830152600091908616906397904e429060240160206040518083038186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c2919061324f565b9050806110d557600019925050506108b9565b806110e2612710846134c7565b6108b491906134a5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114857600080fd5b505afa15801561115c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611180919061324f565b9050806111905750600092915050565b61271061119d82856134c7565b6111a791906134a5565b9392505050565b6001600160a01b0381166000908152600260205260409020610e018142612479565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190612f2c565b6001600160a01b0316336001600160a01b0316146112915760405162461bcd60e51b81526004016105b2906133a0565b610f0d83833384611a4b565b60008060026000856001600160a01b03166001600160a01b03168152602001908152602001600020905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a9190612f2c565b9050600061136783611bea565b60208082015160048601546001600160a01b0389166000908152600988019093526040832054939450919261139e92909190611a14565b6001546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908516906341976e099060240160206040518083038186803b1580156113e957600080fd5b505afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611421919061324f565b90507f000000000000000000000000000000000000000000000000000000000000000061144e82846134c7565b61145891906134a5565b98975050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bd57600080fd5b505afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190612f2c565b6001600160a01b0316336001600160a01b0316146115255760405162461bcd60e51b81526004016105b2906133a0565b610dac8383836126da565b60608261153c816111ae565b6000835167ffffffffffffffff81111561155857611558613570565b604051908082528060200260200182016040528015611581578160200160208202803683370190505b50845190915060005b818110156115e4576115b5878783815181106115a8576115a861355a565b6020026020010151612a82565b8382815181106115c7576115c761355a565b6020908102919091010152806115dc81613529565b91505061158a565b509095945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561164857600080fd5b505afa15801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190612f2c565b6001600160a01b0316336001600160a01b0316146116b05760405162461bcd60e51b81526004016105b2906133a0565b610dac83833384611e2d565b60008060006127107f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611755919061324f565b61175f90866134c7565b61176991906134a5565b9050600061177782866134e6565b9050611783828861348d565b935061178f818761348d565b92505050935093915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f457600080fd5b505afa158015611808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182c9190612f2c565b6001600160a01b0316336001600160a01b03161461185c5760405162461bcd60e51b81526004016105b2906133a0565b838385611868816111ae565b611874878787876122a8565b50604051632f341ddf60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635e683bbe9060240160206040518083038186803b1580156118d457600080fd5b505afa1580156118e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190c919061324f565b6119168383611027565b11156119645760405162461bcd60e51b815260206004820152601a60248201527f53696c6f427269646765506f6f6c3a206d6178696d756d4c545600000000000060448201526064016105b2565b505050505050565b610e018233836126da565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611a0f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016105b2565b919050565b6000811580611a21575082155b15611a2e575060006111a7565b81611a3984866134c7565b611a4391906134a5565b949350505050565b600060026000541415611a705760405162461bcd60e51b81526004016105b2906133d7565b600260005584611a7f816111ae565b6001600160a01b038616600090815260026020526040812090600019851415611ada57506001600160a01b038616600090815260098201602052604090205460028201546004830154611ad3918391611a14565b9450611af2565b60028201546004830154611aef918791612c13565b90505b6001600160a01b038716600090815260098301602052604081208054839290611b1c9084906134e6565b9250508190555080826004016000828254611b3791906134e6565b9250508190555084826002016000828254611b5291906134e6565b9250508190555084826008016000828254611b6d919061348d565b92505081905550866001600160a01b0316886001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468487604051611bb991815260200190565b60405180910390a3600154611bd9906001600160a01b0316873088612c37565b505060016000555090949350505050565b611c3260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163b67ae54f60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b67ae54f9060240160206040518083038186803b158015611c9457600080fd5b505afa158015611ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccc9190612f2c565b9050806001600160a01b031663c894a0716040518060e001604052804281526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4757600080fd5b505afa158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f919061324f565b611d8b906127106134e6565b81526020018660010154815260200186600201548152602001866003015481526020018660050154815260200186600601548152506040518263ffffffff1660e01b8152600401611ddc919061340e565b6101006040518083038186803b158015611df557600080fd5b505afa158015611e09573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a791906131a6565b60026000541415611e505760405162461bcd60e51b81526004016105b2906133d7565b600260005583611e5f816111ae565b846000611e6a61070e565b600154909150611e85906001600160a01b0316863087612c37565b6000611e8f61070e565b6001600160a01b0389166000908152600260205260409020909150611eb483836134e6565b60018201548254604080516318160ddd60e01b81529051939950600093611f4593926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611f0557600080fd5b505afa158015611f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3d919061324f565b899190612c13565b905086826001016000828254611f5b919061348d565b9250508190555086826008016000828254611f76919061348d565b909155505081546040516340c10f1960e01b81526001600160a01b038b8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015611fc857600080fd5b505af1158015611fdc573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628960405161202591815260200190565b60405180910390a35050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190612f2c565b604051635c8610b960e01b81526001600160a01b0384811660048301529192507f000000000000000000000000000000000000000000000000000000000000000090911690635c8610b99060240160206040518083038186803b15801561212a57600080fd5b505afa15801561213e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612162919061324f565b6001600160a01b0383811660009081526002602052604090819020600190810154905491516341976e0960e01b815291831660048301527f0000000000000000000000000000000000000000000000000000000000000000929091908516906341976e099060240160206040518083038186803b1580156121e257600080fd5b505afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a919061324f565b61222491906134c7565b61222e91906134a5565b111561229a5760405162461bcd60e51b815260206004820152603560248201527f53696c6f427269646765506f6f6c3a20746f74616c206465706f7369747320656044820152741e18d95959081b1a5c5d5a591a5d1e481b1a5b5a5d605a1b60648201526084016105b2565b505060016000555050505050565b600260005414156122cb5760405162461bcd60e51b81526004016105b2906133d7565b600260008181556001600160a01b038616815260209190915260409020600881015482111561233c5760405162461bcd60e51b815260206004820152601c60248201527f53696c6f4272696467653a206465706f7369742073686f72746167650000000060448201526064016105b2565b6000612347836110ec565b9050600061236b836002015484600401548487612364919061348d565b9190612c13565b6001600160a01b038716600090815260098501602052604081208054929350839290919061239a90849061348d565b92505081905550808360040160008282546123b5919061348d565b909155506123c59050828561348d565b8360020160008282546123d8919061348d565b92505081905550818360070160008282546123f3919061348d565b925050819055508383600801600082825461240e91906134e6565b92505081905550856001600160a01b0316876001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b528660405161245a91815260200190565b60405180910390a360015461229a906001600160a01b03168686612ca2565b60038201548181141561248b57505050565b600183015460405163b67ae54f60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b67ae54f9060240160206040518083038186803b1580156124f257600080fd5b505afa158015612506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252a9190612f2c565b90506000816001600160a01b031663c894a0716040518060e001604052808881526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a757600080fd5b505afa1580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125df919061324f565b6125eb906127106134e6565b8152602001868152602001896002015481526020018781526020018960050154815260200189600601548152506040518263ffffffff1660e01b8152600401612634919061340e565b6101006040518083038186803b15801561264d57600080fd5b505afa158015612661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268591906131a6565b60208101516002880155604081015160038801556060810151600588015560808101516006880155600787015460a08201519192506126c59185906116bc565b60018801556007909601959095555050505050565b600260005414156126fd5760405162461bcd60e51b81526004016105b2906133d7565b600260005582828161270e816111ae565b6001600160a01b03861660009081526002602052604081209060001986141561280e5781546040516370a0823160e01b81526001600160a01b038981166004830152909116906370a082319060240160206040518083038186803b15801561277557600080fd5b505afa158015612789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ad919061324f565b905061280782600101548360000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087457600080fd5b955061289c565b60018201548254604080516318160ddd60e01b8152905161289993926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561285957600080fd5b505afa15801561286d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612891919061324f565b889190612c13565b90505b858260010160008282546128b091906134e6565b92505081905550858260080160008282546128cb91906134e6565b90915550508154604051632770a7eb60e21b81526001600160a01b0389811660048301526024820184905290911690639dc29fac90604401600060405180830381600087803b15801561291d57600080fd5b505af1158015612931573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8860405161297a91815260200190565b60405180910390a3600154612999906001600160a01b03168888612ca2565b50506040516338b51ce160e01b81526001600160a01b038381166004830152841691506338b51ce19060240160206040518083038186803b1580156129dd57600080fd5b505afa1580156129f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a159190613184565b612a765760405162461bcd60e51b815260206004820152602c60248201527f53696c6f427269646765506f6f6c3a206e6f7420736f6c76656e7420696e207360448201526b34b637903837b9b4ba34b7b760a11b60648201526084016105b2565b50506001600055505050565b600060026000541415612aa75760405162461bcd60e51b81526004016105b2906133d7565b6002600055612ab68383610f13565b15612ac357506000612c08565b6000612ad3848433600019611a4b565b604051630eaf8a1f60e11b81526001600160a01b03858116600483015233602483015291925090851690631d5f143e90604401602060405180830381600087803b158015612b2057600080fd5b505af1158015612b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b58919061324f565b9150826001600160a01b0316846001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef9728385604051612ba8929190918252602082015260400190565b60405180910390a3612bba8484610f13565b612c065760405162461bcd60e51b815260206004820181905260248201527f53696c6f427269646765506f6f6c3a2075736572206e6f7420736f6c76656e7460448201526064016105b2565b505b600160005592915050565b6000811580612c20575082155b15612c2c5750826111a7565b82611a3983866134c7565b6040516001600160a01b0380851660248301528316604482015260648101829052610f0d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612cd2565b6040516001600160a01b038316602482015260448101829052610dac90849063a9059cbb60e01b90606401612c6b565b6000612d27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612da49092919063ffffffff16565b805190915015610dac5780806020019051810190612d459190613184565b610dac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b2565b6060611a43848460008585843b612dfd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b2565b600080866001600160a01b03168587604051612e1991906132c0565b60006040518083038185875af1925050503d8060008114612e56576040519150601f19603f3d011682016040523d82523d6000602084013e612e5b565b606091505b5091509150610d9582828660608315612e755750816111a7565b825115612e855782518084602001fd5b8160405162461bcd60e51b81526004016105b2919061334f565b600082601f830112612eb057600080fd5b813567ffffffffffffffff811115612eca57612eca613570565b612edd601f8201601f191660200161345c565b818152846020838601011115612ef257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612f2157600080fd5b81356111a781613586565b600060208284031215612f3e57600080fd5b81516111a781613586565b60008060408385031215612f5c57600080fd5b8235612f6781613586565b91506020830135612f7781613586565b809150509250929050565b60008060008060808587031215612f9857600080fd5b8435612fa381613586565b93506020850135612fb381613586565b92506040850135612fc381613586565b9396929550929360600135925050565b600080600060608486031215612fe857600080fd5b8335612ff381613586565b9250602084013561300381613586565b929592945050506040919091013590565b6000806040838503121561302757600080fd5b823561303281613586565b915060208381013567ffffffffffffffff8082111561305057600080fd5b818601915086601f83011261306457600080fd5b81358181111561307657613076613570565b8060051b915061308784830161345c565b8181528481019084860184860187018b10156130a257600080fd5b600095505b838610156130d157803594506130bc85613586565b848352600195909501949186019186016130a7565b508096505050505050509250929050565b6000806000606084860312156130f757600080fd5b833561310281613586565b9250602084013567ffffffffffffffff8082111561311f57600080fd5b61312b87838801612e9f565b9350604086013591508082111561314157600080fd5b5061314e86828701612e9f565b9150509250925092565b6000806040838503121561316b57600080fd5b823561317681613586565b946020939093013593505050565b60006020828403121561319657600080fd5b815180151581146111a757600080fd5b60006101008083850312156131ba57600080fd5b6040519081019067ffffffffffffffff821181831017156131dd576131dd613570565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b60006020828403121561324857600080fd5b5035919050565b60006020828403121561326157600080fd5b5051919050565b60008060006060848603121561327d57600080fd5b505081359360208301359350604090920135919050565b600081518084526132ac8160208601602086016134fd565b601f01601f19169290920160200192915050565b600082516132d28184602087016134fd565b9190910192915050565b600083516132ee8184602088016134fd565b8351908301906133028183602088016134fd565b01949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561334357835183529284019291840191600101613327565b50909695505050505050565b6020815260006111a76020830184613294565b6060815260006133756060830186613294565b82810360208401526133878186613294565b91505060018060a01b0383166040830152949350505050565b6020808252601a908201527f53696c6f427269646765506f6f6c3a206f6e6c79526f75746572000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561348557613485613570565b604052919050565b600082198211156134a0576134a0613544565b500190565b6000826134c257634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156134e1576134e1613544565b500290565b6000828210156134f8576134f8613544565b500390565b60005b83811015613518578181015183820152602001613500565b83811115610f0d5750506000910152565b600060001982141561353d5761353d613544565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461359b57600080fd5b5056fea2646970667358221220345673eb0c2abd4f970f75652230114eebcee1451c305c7d74e741d732cc580a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowAmountValue(address,address)": {
        "details": "value of asset borrowed by user"
      },
      "getCollateralValue(address,address)": {
        "details": "value of collateral (asset) provided by user"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1590,
        "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6172,
        "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
        "label": "asset",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6177,
        "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
        "label": "state",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(BridgeSiloStorage)6152_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BridgeERC20Upgradeable)10465": {
        "encoding": "inplace",
        "label": "contract BridgeERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(BridgeSiloStorage)6152_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SiloBridgePool.BridgeSiloStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeSiloStorage)6152_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BridgeSiloStorage)6152_storage": {
        "encoding": "inplace",
        "label": "struct SiloBridgePool.BridgeSiloStorage",
        "members": [
          {
            "astId": 6131,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(BridgeERC20Upgradeable)10465"
          },
          {
            "astId": 6133,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "totalDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6135,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "totalBorrowAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6137,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "borrowAmountLastUpdateTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6139,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "totalBorrowShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6141,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "interestRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6143,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "interestRateLastUpdateTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6145,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "protocolFees",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6147,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "deposit",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6151,
            "contract": "contracts/SiloBridgePool.sol:SiloBridgePool",
            "label": "borrowShare",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}