{
  "address": "0x3BCa0e9780f63508938Cc3D8F870EB2bFef1Aa77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NewOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "OracleForAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetsOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "changeBestOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "findBestOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredOracles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleId",
          "type": "uint256"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setBestOracleForAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "bestOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52c138b3a2f4dfd1cc14c8317c5a13ef7b88d1b573255bff3dacc1eae6d201ec",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0x3BCa0e9780f63508938Cc3D8F870EB2bFef1Aa77",
    "transactionIndex": 166,
    "gasUsed": "1223181",
    "logsBloom": "0x
    "blockHash": "0xaf1c241a5ec6d6da502258446b88ecac23945a556dc752a4f884e9ac7a5b42a1",
    "transactionHash": "0x52c138b3a2f4dfd1cc14c8317c5a13ef7b88d1b573255bff3dacc1eae6d201ec",
    "logs": [
      {
        "transactionIndex": 166,
        "blockNumber": 13628547,
        "transactionHash": "0x52c138b3a2f4dfd1cc14c8317c5a13ef7b88d1b573255bff3dacc1eae6d201ec",
        "address": "0x3BCa0e9780f63508938Cc3D8F870EB2bFef1Aa77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003e61fa24520c2754593b4544acb936bc786206ec"
        ],
        "data": "0x",
        "logIndex": 273,
        "blockHash": "0xaf1c241a5ec6d6da502258446b88ecac23945a556dc752a4f884e9ac7a5b42a1"
      }
    ],
    "blockNumber": 13628547,
    "cumulativeGasUsed": "14160306",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x012D960E091587A6075C8233FDEba7db87142923"
  ],
  "solcInputHash": "537831d942c1ab4870aa40f6dd7512c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"OracleForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"changeBestOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"findBestOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleId\",\"type\":\"uint256\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setBestOracleForAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bestOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"initOracleForAsset(address,address,bytes)\":{\"details\":\"this method does two things:      - init new asset if oracle is provided      - search for best oracle and updates if we found better\",\"params\":{\"_asset\":\"address od token to be initialise\",\"_data\":\"(optional) custom data required for asset initialisation\",\"_oracle\":\"(optional) address of silo oracle that will be initialised with new asset        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initOracleForAsset(address,address,bytes)\":{\"notice\":\"initialise oracle for asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloOracleRepository.sol\":\"SiloOracleRepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/SiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./utils/TwoStepOwnableUpgradeable.sol\\\";\\n\\ncontract SiloOracleRepository is ISiloOracleRepository, TwoStepOwnableUpgradeable {\\n    uint256 public constant ONE = 10**18;\\n\\n    address public immutable factory;\\n    address public immutable quoteToken;\\n\\n    mapping(address => bool) public registeredOracles;\\n    mapping(address => address) public assetsOracles;\\n\\n    address[] public oracles;\\n\\n    event NewOracle(address newOracle, uint256 id);\\n    event OracleRemoved(address oracle);\\n    event OracleForAsset(address oracle, address asset);\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"SiloOracleRepository: onlyFactory\\\");\\n        _;\\n    }\\n\\n    constructor(address _quoteToken, address _factory) {\\n        __TwoStepOwnableUpgradeable_init();\\n        factory = _factory;\\n        quoteToken = _quoteToken;\\n    }\\n\\n    function addOracle(address _oracle) external override onlyOwner {\\n        require(!registeredOracles[_oracle], \\\"SiloOracleRepository: oracle already exists\\\");\\n        require(IOracle(_oracle).isSiloOracle(), \\\"SiloOracleRepository: not an oracle\\\");\\n        require(IOracle(_oracle).quoteToken() == quoteToken, \\\"SiloOracleRepository: invalid quoteToken in oracle\\\");\\n\\n        emit NewOracle(_oracle, oracles.length);\\n\\n        registeredOracles[_oracle] = true;\\n        oracles.push(_oracle);\\n    }\\n\\n    function removeOracle(uint256 _oracleId) external override onlyOwner {\\n        address oracleToRemove = oracles[_oracleId];\\n        require(registeredOracles[oracleToRemove], \\\"SiloOracleRepository: oracle does not exist\\\");\\n\\n        emit OracleRemoved(oracleToRemove);\\n\\n        registeredOracles[oracleToRemove] = false;\\n        oracles[_oracleId] = oracles[oracles.length - 1];\\n        oracles.pop();\\n    }\\n\\n    /// @notice initialise oracle for asset\\n    /// @dev this method does two things:\\n    ///      - init new asset if oracle is provided\\n    ///      - search for best oracle and updates if we found better\\n    /// @param _asset address od token to be initialise\\n    /// @param _oracle (optional) address of silo oracle that will be initialised with new asset\\n    ///        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway\\n    /// @param _data (optional) custom data required for asset initialisation\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external override {\\n        if (_oracle != address(0)) {\\n            IOracle(_oracle).initAsset(_asset, _data);\\n        }\\n\\n        _findBestOracleForAsset(_asset);\\n    }\\n\\n    function setBestOracleForAsset(address _asset) external override returns (address bestOracle) {\\n        return _findBestOracleForAsset(_asset);\\n    }\\n\\n    function changeBestOracleForAsset(address _asset, address _oracle) external virtual override {\\n        require(registeredOracles[_oracle], \\\"SiloOracleRepository: oracle not registered\\\");\\n\\n        address assetOracles = assetsOracles[_asset];\\n        require(assetOracles != address(0), \\\"SiloOracleRepository: use setBestOracleForAsset to init asset\\\");\\n\\n        uint256 currentLiquidity = IOracle(assetOracles).getQuoteLiquidity(_asset);\\n        uint256 suggestedLiquidity = IOracle(_oracle).getQuoteLiquidity(_asset);\\n        require(suggestedLiquidity >= currentLiquidity, \\\"SiloOracleRepository: chosen oracle is worse\\\");\\n\\n        _setOracleForAsset(_asset, _oracle);\\n    }\\n\\n    function findBestOracle(address _asset) external view returns (address) {\\n        return _findBestOracle(_asset);\\n    }\\n\\n    function oraclesCount() external view returns (uint256) {\\n        return oracles.length;\\n    }\\n\\n    function oracleList() external view returns (address[] memory) {\\n        return oracles;\\n    }\\n\\n    function getPrice(address _base) public view override virtual returns (uint256) {\\n        if (_base == quoteToken) return ONE;\\n\\n        return IOracle(assetsOracles[_base]).getPrice(_base);\\n    }\\n\\n    /// @notice search for best oracle for asset\\n    function _findBestOracleForAsset(address _asset) internal returns (address bestOracle) {\\n        bestOracle = _findBestOracle(_asset);\\n        require(bestOracle != address(0), \\\"SiloOracleRepository: can not find oracle for asset\\\");\\n\\n        _setOracleForAsset(_asset, bestOracle);\\n    }\\n\\n    function _setOracleForAsset(address _asset, address _oracle) internal {\\n        emit OracleForAsset(_asset, _oracle);\\n        IOracle(_oracle).notifyAboutChoice(_asset);\\n        assetsOracles[_asset] = _oracle;\\n    }\\n\\n    function _findBestOracle(address _asset) internal view returns (address bestOracle) {\\n        uint256 maxLiquidity;\\n\\n        for (uint256 i = 0; i < oracles.length; i++) {\\n            address oracle = oracles[i];\\n            uint256 quoteLiquidity = IOracle(oracle).getQuoteLiquidity(_asset);\\n\\n            if (quoteLiquidity > maxLiquidity) {\\n                bestOracle = oracle;\\n                maxLiquidity = quoteLiquidity;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3643cd4f332a986872f51bc79ec42435b2eb4c7c2c0ac14917136a91e7dc65fc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo oracles\\ninterface IOracle {\\n    /// @notice initAsset can be used to do custom setup for new asset\\n    /// @dev Should be used for initialisation of asset for oracle (if initialisation is needed).\\n    ///      It sets all necessary data that are require to call `getPrice` for the asset.\\n    ///      Throws if initialisation fail.\\n    ///      When called multiple times it does not override better settings and it might throws.\\n    ///      e.g.: if with current settings we getting higher liquidity pool, initialisation should have no effect\\n    /// @param _asset token address (base token) for which we initialising oracle\\n    /// @param _data additional data (optional) that is required for initialisation process\\n    function initAsset(address _asset, bytes calldata _data) external;\\n\\n    /// @notice when changing oracle, notify that we start using it for asset.\\n    /// @dev It is used when we discover, that this oracle is better for asset.\\n    ///      If we need to setup anything in additional, in order to use this oracle for asset, it should be done\\n    ///      inside this method. At this point asset should be initialised (so we have all necessary data for it).\\n    ///      Throws if this oracle can not be use for provided asset.\\n    /// @param _asset token address (base token) for which this oracle will be used from now on.\\n    function notifyAboutChoice(address _asset) external;\\n\\n    /// @notice calculates price for asset/quote\\n    ///         It unifies all tokens decimal to 18, examples:\\n    ///         - if asses == quote it returns 1e18\\n    ///         - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18\\n    /// @return price of asses with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Informs if oracle has all required settings for asset and can provide data for it\\n    /// @dev It is not always a case, that asset must be initialized before it can be use by oracle.\\n    ///      Some oracles implementations can work out of the box for any assets.\\n    ///      If asset is not supported, it does not mean it can not be used,\\n    ///      it might need initialization to become supported.\\n    /// @param _asset token address\\n    /// @return true is oracle is able to provide price for asset\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    // TODO should we have minimalRequiredLiquidity?\\n\\n    /// @notice Search for highest possible liquidity for quote token.\\n    ///         This method is used to establish, if pool is better (not less liquidity) or worse (less liquidity)\\n    /// @dev For some oracles, asset must be initialized in order to be able to run this method\\n    ///      or there might be some additional (dedicated to oracle) settings, that must be set up in order search works\\n    ///      Implementation of this method must be dome in a way, that when asset is initialized and we have\\n    ///      any additional required settings in place, it will highest existing liquidity pool for asset.\\n    ///      It is possible, that it will throw on invalid data or uninitialized asset.\\n    /// @return liquidity of quote token for specified asset\\n    function getQuoteLiquidity(address _asset) external view returns (uint256 liquidity);\\n\\n    /// @return address of quote token that must be a copy of SiloBridgePool.asset\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is SiloOracle\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    ///      but this should NOT be treated as security check\\n    /// @return always true\\n    function isSiloOracle() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xa24e20072fc123e6b161bae08d4ca052da08fb79cbcfca2401cb7fd2f3caf4b6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n    // TODO do research (do we need to refresh price?) and make sure this can stay as a view\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d75cea95fee54e5af92bc86e24fb1c69c63850f6c324549c8d95ec11498ac46\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract TwoStepOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(_msgSender() == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __TwoStepOwnableUpgradeable_init() internal initializer {\\n        __Context_init_unchained();\\n        __TwoStepOwnableUpgradeable_init_unchained();\\n    }\\n\\n    function __TwoStepOwnableUpgradeable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n    /* solhint-enable func-name-mixedcase */\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x873d6e83242c64736b4822d3e41f98e0e9301fa4714a0b98bb315bb7f6ab4480\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001770380380620017708339810160408190526200003491620002c7565b6200003e6200005e565b6001600160601b0319606091821b811660805291901b1660a052620002ff565b600054610100900460ff168062000078575060005460ff16155b620000d05760405162461bcd60e51b815260206004820152602e60248201526000805160206200175083398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015620000f3576000805461ffff19166101011790555b620000fd6200011d565b62000107620001c2565b80156200011a576000805461ff00191690555b50565b600054610100900460ff168062000137575060005460ff16155b6200018b5760405162461bcd60e51b815260206004820152602e60248201526000805160206200175083398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000c7565b600054610100900460ff1615801562000107576000805461ffff191661010117905580156200011a576000805461ff001916905550565b600054610100900460ff1680620001dc575060005460ff16155b620002305760405162461bcd60e51b815260206004820152602e60248201526000805160206200175083398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000c7565b600054610100900460ff1615801562000253576000805461ffff19166101011790555b6200010733603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620002c257600080fd5b919050565b60008060408385031215620002db57600080fd5b620002e683620002aa565b9150620002f660208401620002aa565b90509250929050565b60805160601c60a05160601c6114176200033960003960008181610187015281816106ce0152610c5f0152600061028e01526114176000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806379ba5097116100b8578063c45a01551161007c578063c45a015514610289578063d58bcd04146102b0578063df5dd1a5146102c5578063e30c3978146102d8578063e4362b23146102e9578063f2fde38b1461031c57600080fd5b806379ba50971461023b5780637bb0e9e81461024357806380935dbf146102565780638da5cb5b14610269578063c2ee3a081461027a57600080fd5b806341976e09116100ff57806341976e09146101e45780634cee966a146102055780635b69a7d814610218578063715018a61461022b57806376f709001461023357600080fd5b80630ef0e5e81461013c578063217a4b70146101825780632979f8f1146101a95780633278c694146101be578063332f3c21146101d1575b600080fd5b61016561014a366004611136565b6036602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101bc6101b7366004611177565b61032f565b005b6101bc6101cc366004611136565b6105b2565b6101bc6101df3660046111b0565b61064f565b6101f76101f2366004611136565b6106ca565b604051908152602001610179565b610165610213366004611136565b6107a8565b610165610226366004611264565b6107b3565b6101bc6107dd565b6037546101f7565b6101bc610813565b610165610251366004611136565b6108a9565b6101bc610264366004611264565b6108b4565b6033546001600160a01b0316610165565b6101f7670de0b6b3a764000081565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6102b8610a8b565b60405161017991906112d6565b6101bc6102d3366004611136565b610aed565b6034546001600160a01b0316610165565b61030c6102f7366004611136565b60356020526000908152604090205460ff1681565b6040519015158152602001610179565b6101bc61032a366004611136565b610e15565b6001600160a01b03811660009081526035602052604090205460ff166103b05760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c65206e6f7460448201526a081c9959da5cdd195c995960aa1b60648201526084015b60405180910390fd5b6001600160a01b03808316600090815260366020526040902054168061043e5760405162461bcd60e51b815260206004820152603d60248201527f53696c6f4f7261636c655265706f7369746f72793a207573652073657442657360448201527f744f7261636c65466f72417373657420746f20696e697420617373657400000060648201526084016103a7565b604051630b8abf1d60e31b81526001600160a01b03848116600483015260009190831690635c55f8e89060240160206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061127d565b604051630b8abf1d60e31b81526001600160a01b038681166004830152919250600091851690635c55f8e89060240160206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a919061127d565b9050818110156105a15760405162461bcd60e51b815260206004820152602c60248201527f53696c6f4f7261636c655265706f7369746f72793a2063686f73656e206f726160448201526b636c6520697320776f72736560a01b60648201526084016103a7565b6105ab8585610eb0565b5050505050565b6033546001600160a01b031633146105dc5760405162461bcd60e51b81526004016103a790611323565b806001600160a01b03166105f86033546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3603480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316156106c157604051635e3263fb60e01b81526001600160a01b03841690635e3263fb9061068e90879086908690600401611296565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050505b6105ab84610f7c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156107155750670de0b6b3a7640000919050565b6001600160a01b03828116600081815260366020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b15801561076a57600080fd5b505afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a2919061127d565b92915050565b60006107a28261100a565b603781815481106107c357600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146108075760405162461bcd60e51b81526004016103a790611323565b61081160006110e4565b565b6034546001600160a01b0316331461087d5760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b60648201526084016103a7565b6108976108926034546001600160a01b031690565b6110e4565b603480546001600160a01b0319169055565b60006107a282610f7c565b6033546001600160a01b031633146108de5760405162461bcd60e51b81526004016103a790611323565b6000603782815481106108f3576108f36113b6565b60009182526020808320909101546001600160a01b0316808352603590915260409091205490915060ff1661097e5760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016103a7565b6040516001600160a01b03821681527f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7129060200160405180910390a16001600160a01b0381166000908152603560205260409020805460ff19169055603780546109ea90600190611358565b815481106109fa576109fa6113b6565b600091825260209091200154603780546001600160a01b039092169184908110610a2657610a266113b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506037805480610a6557610a656113a0565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b60606037805480602002602001604051908101604052809291908181526020018280548015610ae357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ac5575b5050505050905090565b6033546001600160a01b03163314610b175760405162461bcd60e51b81526004016103a790611323565b6001600160a01b03811660009081526035602052604090205460ff1615610b945760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520616c7260448201526a656164792065786973747360a81b60648201526084016103a7565b806001600160a01b031663ecdcb0ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190611242565b610c5d5760405162461bcd60e51b815260206004820152602360248201527f53696c6f4f7261636c655265706f7369746f72793a206e6f7420616e206f7261604482015262636c6560e81b60648201526084016103a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc057600080fd5b505afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061115a565b6001600160a01b031614610d695760405162461bcd60e51b815260206004820152603260248201527f53696c6f4f7261636c655265706f7369746f72793a20696e76616c69642071756044820152716f7465546f6b656e20696e206f7261636c6560701b60648201526084016103a7565b603754604080516001600160a01b038416815260208101929092527f45f1932942561e7d7562d1677fd99002dd4106d397ed7b756168542c4c5c0fac910160405180910390a16001600160a01b03166000818152603560205260408120805460ff191660019081179091556037805491820181559091527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319169091179055565b6033546001600160a01b03163314610e3f5760405162461bcd60e51b81526004016103a790611323565b6001600160a01b038116610ea45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a7565b610ead816110e4565b50565b604080516001600160a01b038085168252831660208201527f87987abe74f65c11e5ed91847ea2a5d8f269929df44aab920a9dc3799e29ec70910160405180910390a16040516326b9797f60e01b81526001600160a01b0383811660048301528216906326b9797f90602401600060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b505050506001600160a01b03918216600090815260366020526040902080546001600160a01b03191691909216179055565b6000610f878261100a565b90506001600160a01b038116610ffb5760405162461bcd60e51b815260206004820152603360248201527f53696c6f4f7261636c655265706f7369746f72793a2063616e206e6f742066696044820152721b99081bdc9858db1948199bdc88185cdcd95d606a1b60648201526084016103a7565b6110058282610eb0565b919050565b60008060005b6037548110156110dd5760006037828154811061102f5761102f6113b6565b6000918252602082200154604051630b8abf1d60e31b81526001600160a01b03888116600483015290911692508290635c55f8e89060240160206040518083038186803b15801561107f57600080fd5b505afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b7919061127d565b9050838111156110c8578194508093505b505080806110d59061136f565b915050611010565b5050919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561114857600080fd5b8135611153816113cc565b9392505050565b60006020828403121561116c57600080fd5b8151611153816113cc565b6000806040838503121561118a57600080fd5b8235611195816113cc565b915060208301356111a5816113cc565b809150509250929050565b600080600080606085870312156111c657600080fd5b84356111d1816113cc565b935060208501356111e1816113cc565b9250604085013567ffffffffffffffff808211156111fe57600080fd5b818701915087601f83011261121257600080fd5b81358181111561122157600080fd5b88602082850101111561123357600080fd5b95989497505060200194505050565b60006020828403121561125457600080fd5b8151801515811461115357600080fd5b60006020828403121561127657600080fd5b5035919050565b60006020828403121561128f57600080fd5b5051919050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6020808252825182820181905260009190848201906040850190845b818110156113175783516001600160a01b0316835292840192918401916001016112f2565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561136a5761136a61138a565b500390565b60006000198214156113835761138361138a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610ead57600080fdfea2646970667358221220cc07f0396affd26160c65655507892eb4e280413a655b77721ad9b3f39831b0c64736f6c63430008070033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "initOracleForAsset(address,address,bytes)": {
        "details": "this method does two things:      - init new asset if oracle is provided      - search for best oracle and updates if we found better",
        "params": {
          "_asset": "address od token to be initialise",
          "_data": "(optional) custom data required for asset initialisation",
          "_oracle": "(optional) address of silo oracle that will be initialised with new asset        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initOracleForAsset(address,address,bytes)": {
        "notice": "initialise oracle for asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 822,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10714,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 10716,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 8378,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "registeredOracles",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8382,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "assetsOracles",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8385,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "oracles",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}