{
  "address": "0x138f032e839f247e5fa913E7bA52BEa509c16225",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CRV3_POOL",
      "outputs": [
        {
          "internalType": "contract ICurvePoolLike128",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_USDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_USDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_WETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRICRYPTO2_POOL",
      "outputs": [
        {
          "internalType": "contract ICurvePoolLike256",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNKNOWN_MIN_DY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_INDEX_3CRV",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_INDEX_XAIPOOL",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_INDEX_3CRV",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_INDEX_TRICRYPTO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_INDEX_TRICRYPTO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XAI_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XAI_FRAXBP_POOL",
      "outputs": [
        {
          "internalType": "contract ICurveMetaPoolLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XAI_INDEX_XAIPOOL",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb74128a8f9a3d37a29e0002059fea058761649ce3fa74148b603824d8c770b1",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0x138f032e839f247e5fa913E7bA52BEa509c16225",
    "transactionIndex": 110,
    "gasUsed": "1267591",
    "logsBloom": "0x
    "blockHash": "0xab93854c2ba59ed2b477aa33c5251c43fb8d60a7a385a9b551ff7af0b0621f97",
    "transactionHash": "0xcb74128a8f9a3d37a29e0002059fea058761649ce3fa74148b603824d8c770b1",
    "logs": [],
    "blockNumber": 16284392,
    "cumulativeGasUsed": "10650945",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ae39fd37380c49dd9f8313ff53be00f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CRV3_POOL\",\"outputs\":[{\"internalType\":\"contract ICurvePoolLike128\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRICRYPTO2_POOL\",\"outputs\":[{\"internalType\":\"contract ICurvePoolLike256\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNKNOWN_MIN_DY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_INDEX_3CRV\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_INDEX_XAIPOOL\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_INDEX_3CRV\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_INDEX_TRICRYPTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_INDEX_TRICRYPTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XAI_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XAI_FRAXBP_POOL\",\"outputs\":[{\"internalType\":\"contract ICurveMetaPoolLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XAI_INDEX_XAIPOOL\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Magician to support liquidations through Curve-XAI pool IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\",\"errors\":{\"InvalidAsset()\":[{\"details\":\"Revert if `towardsNative` or `towardsAsset` will be executed for the asset other than XAI\"}]},\"kind\":\"dev\",\"methods\":{\"towardsAsset(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be wrapped\"},\"returns\":{\"amountOut\":\"Amount of the quote token that we spent to get `_amoun` of the `_asset`\",\"tokenOut\":\"A token that the `_asset` has been converted to\"}},\"towardsNative(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be unwrapped\"},\"returns\":{\"amountOut\":\"Amount of the `tokenOut` that we received\",\"tokenOut\":\"A token that the `_asset` has been converted to\"}}},\"stateVariables\":{\"USDC_INDEX_3CRV\":{\"details\":\"Index value for the coin (curve DAI/USDC/USDT pool)\"},\"USDC_INDEX_XAIPOOL\":{\"details\":\"Index value for the underlying coin (curve XAI/FRAXBP pool)\"},\"USDT_INDEX_3CRV\":{\"details\":\"Index value for the coin (curve DAI/USDC/USDT pool)\"},\"USDT_INDEX_TRICRYPTO\":{\"details\":\"Index value for the coin (curve USDT/WETH/WBTC pool)\"},\"WETH_INDEX_TRICRYPTO\":{\"details\":\"Index value for the coin (curve USDT/WETH/WBTC pool)\"},\"XAI_INDEX_XAIPOOL\":{\"details\":\"Index value for the coin (curve XAI/FRAXBP pool)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"towardsAsset(address,uint256)\":{\"notice\":\"Performs operation opposit to `towardsNative`\"},\"towardsNative(address,uint256)\":{\"notice\":\"Operates to unwrap an `_asset`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/magicians/XAICurveMagicianETH.sol\":\"XAICurveMagicianETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/XAICurveMagicianETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IMagician.sol\\\";\\nimport \\\"./interfaces/ICurveMetaPoolLike.sol\\\";\\nimport \\\"./interfaces/ICurvePoolLike128.sol\\\";\\nimport \\\"./interfaces/ICurvePoolLike256.sol\\\";\\n\\n/// @dev Magician to support liquidations through Curve-XAI pool\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract XAICurveMagicianETH is IMagician {\\n    using SafeERC20 for IERC20;\\n\\n    // XAI/FRAXBP(FRAX/USDC)\\n    ICurveMetaPoolLike public constant XAI_FRAXBP_POOL = ICurveMetaPoolLike(0x326290A1B0004eeE78fa6ED4F1d8f4b2523ab669);\\n    // DAI/USDC/USDT\\n    ICurvePoolLike128 public constant CRV3_POOL = ICurvePoolLike128(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    // USDT/WETH/WBTC\\n    ICurvePoolLike256 public constant TRICRYPTO2_POOL = ICurvePoolLike256(0xD51a44d3FaE010294C616388b506AcdA1bfAAE46);\\n\\n    IERC20 public constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n    IERC20 public constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20 public constant XAI = IERC20(0xd7C9F0e536dC865Ae858b0C0453Fe76D13c3bEAc);\\n    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n\\n    /// @dev Index value for the coin (curve XAI/FRAXBP pool)\\n    int128 public constant XAI_INDEX_XAIPOOL = 0;\\n    /// @dev Index value for the underlying coin (curve XAI/FRAXBP pool)\\n    int128 public constant USDC_INDEX_XAIPOOL = 2;\\n    /// @dev Index value for the coin (curve DAI/USDC/USDT pool)\\n    int128 public constant USDC_INDEX_3CRV = 1;\\n    /// @dev Index value for the coin (curve DAI/USDC/USDT pool)\\n    int128 public constant USDT_INDEX_3CRV = 2;\\n    /// @dev Index value for the coin (curve USDT/WETH/WBTC pool)\\n    uint256 public constant USDT_INDEX_TRICRYPTO = 0;\\n    /// @dev Index value for the coin (curve USDT/WETH/WBTC pool)\\n    uint256 public constant WETH_INDEX_TRICRYPTO = 2;\\n\\n    uint256 public constant WETH_DECIMALS = 18;\\n    uint256 public constant XAI_DECIMALS = 18;\\n    uint256 public constant USDT_DECIMALS = 6;\\n    uint256 public constant USDC_DECIMALS = 6;\\n\\n    uint256 public constant ONE_WETH = 1e18;\\n    uint256 public constant ONE_USDC = 1e6;\\n    uint256 public constant ONE_USDT = 1e6;\\n\\n    uint256 public constant UNKNOWN_MIN_DY = 1;\\n\\n    /// @dev Revert if `towardsNative` or `towardsAsset` will be executed for the asset other than XAI\\n    error InvalidAsset();\\n\\n    /// @inheritdoc IMagician\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\\n        if (_asset != address(XAI)) revert InvalidAsset();\\n\\n        XAI.approve(address(XAI_FRAXBP_POOL), _amount);\\n\\n        uint256 receivedUSDC = XAI_FRAXBP_POOL.exchange_underlying(\\n            XAI_INDEX_XAIPOOL,\\n            USDC_INDEX_XAIPOOL,\\n            _amount,\\n            UNKNOWN_MIN_DY\\n        );\\n\\n        USDC.approve(address(CRV3_POOL), receivedUSDC);\\n        uint256 usdtBalanceBefore = USDT.balanceOf(address(this));\\n        CRV3_POOL.exchange(USDC_INDEX_3CRV, USDT_INDEX_3CRV, receivedUSDC, UNKNOWN_MIN_DY);\\n        uint256 usdtBalanceAfter = USDT.balanceOf(address(this));\\n        uint256 receivedUSDT;\\n        // Balance after exchange can't be less than it was before\\n        unchecked { receivedUSDT = usdtBalanceAfter - usdtBalanceBefore; }\\n\\n        USDT.safeApprove(address(TRICRYPTO2_POOL), receivedUSDT);\\n        uint256 wethBalanceBefore = WETH.balanceOf(address(this));\\n        TRICRYPTO2_POOL.exchange(USDT_INDEX_TRICRYPTO, WETH_INDEX_TRICRYPTO, receivedUSDT, UNKNOWN_MIN_DY);\\n        uint256 wethBalanceAfter = WETH.balanceOf(address(this));\\n        // Balance after exchange can't be less than it was before\\n        unchecked { amountOut = wethBalanceAfter - wethBalanceBefore; }\\n\\n        return (address(WETH), amountOut);\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\\n        if (_asset != address(XAI)) revert InvalidAsset();\\n\\n        uint256 increasedRequiredAmount;\\n\\n        // Increasing a little bit value of the required XAI as can't get the expected number of XAI\\n        // on the last step of the exchange without it.\\n        // Math is unchecked as we do not expect to work with large numbers during the liquidation\\n        // to catch an overflow here.\\n        unchecked { increasedRequiredAmount = _amount + 1e17; }\\n\\n        // calculate a price\\n        (uint256 usdcIn, uint256 xaiOut) = _calcRequiredUSDC(increasedRequiredAmount);\\n\\n        assert(xaiOut >= _amount);\\n\\n        (uint256 usdtIn, uint256 usdcOut) = _calcRequiredUSDT(usdcIn);\\n        (uint256 wethIn, uint256 usdtOut) = _calcRequiredWETH(usdtIn);\\n\\n        // WETH -> USDT\\n        WETH.approve(address(TRICRYPTO2_POOL), wethIn);\\n        TRICRYPTO2_POOL.exchange(WETH_INDEX_TRICRYPTO, USDT_INDEX_TRICRYPTO, wethIn, usdtOut);\\n        // USDT -> USDC\\n        USDT.safeApprove(address(CRV3_POOL), usdtOut);\\n        CRV3_POOL.exchange(USDT_INDEX_3CRV, USDC_INDEX_3CRV, usdtOut, usdcOut);\\n        // USDC -> XAI\\n        USDC.approve(address(XAI_FRAXBP_POOL), usdcOut);\\n        XAI_FRAXBP_POOL.exchange_underlying(USDC_INDEX_XAIPOOL, XAI_INDEX_XAIPOOL, usdcOut, _amount);\\n\\n        return (address(XAI), wethIn);\\n    }\\n\\n    /// @param _requiredAmountOut Expected amount of XAI to receive after exhange\\n    /// It may be a bit more, but not less than the provided value.\\n    /// @return amountIn Amount of USDC that we should send for exchage\\n    /// @return amountOut Amount of XAI that we will receive in exchange for `amountIn` USDC\\n    function _calcRequiredUSDC(uint256 _requiredAmountOut)\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        // We do normalization of the rate as we will recive from the `get_dy_underlying` a value with `_decimalsOut`\\n        uint256 dy = XAI_FRAXBP_POOL.get_dy_underlying(USDC_INDEX_XAIPOOL, XAI_INDEX_XAIPOOL, ONE_USDC);\\n        uint256 rate = _normalizeWithDecimals(dy, USDC_DECIMALS, XAI_DECIMALS);\\n        // Normalize `_requiredAmountOut` to `_decimalsIn` as we will use it\\n        // for calculation of the `amountIn` value of the `_tokenIn`\\n        _requiredAmountOut = _normalizeWithDecimals(_requiredAmountOut, USDC_DECIMALS, XAI_DECIMALS);\\n        uint256 multiplied = ONE_USDC * _requiredAmountOut;\\n        // Zero value for amountIn is unacceptable.\\n        assert(multiplied >= rate); // Otherwise, we may get zero.\\n        // Assertion above make it safe\\n        unchecked { amountIn = multiplied / rate; }\\n        // `get_dy_underlying` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= _requiredAmountOut`.\\n        while (true) {\\n            amountOut = XAI_FRAXBP_POOL.get_dy_underlying(USDC_INDEX_XAIPOOL, XAI_INDEX_XAIPOOL, amountIn);\\n            uint256 amountOutNormalized = _normalizeWithDecimals(amountOut, USDC_DECIMALS, XAI_DECIMALS);\\n\\n            if (amountOutNormalized >= _requiredAmountOut) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                ONE_USDC,\\n                rate,\\n                _requiredAmountOut,\\n                amountOutNormalized\\n            );\\n        }\\n    }\\n\\n    /// @param _requiredAmountOut Expected amount of USDC to receive after exhange\\n    /// It may be a bit more, but not less than the provided value.\\n    /// @return amountIn Amount of USDT that we should send for exchage\\n    /// @return amountOut Amount of USDC that we will receive in exchange for `amountIn` USDT\\n    function _calcRequiredUSDT(uint256 _requiredAmountOut)\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        // We do normalization of the rate as we will recive from the `get_dy` a value with `USDC_DECIMALS`\\n        uint256 rate = CRV3_POOL.get_dy(USDT_INDEX_3CRV, USDC_INDEX_3CRV, ONE_USDT);\\n        uint256 multiplied = ONE_USDT * _requiredAmountOut;\\n        // Zero value for amountIn is unacceptable.\\n        assert(multiplied >= rate); // Otherwise, we may get zero.\\n        // Assertion above make it safe\\n        unchecked { amountIn = multiplied / rate; }\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= _requiredAmountOut`.\\n        while (true) {\\n            amountOut = CRV3_POOL.get_dy(USDT_INDEX_3CRV, USDC_INDEX_3CRV, amountIn);\\n\\n            if (amountOut >= _requiredAmountOut) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                ONE_USDT,\\n                rate,\\n                _requiredAmountOut,\\n                amountOut\\n            );\\n        }\\n    }\\n    \\n    /// @param _requiredAmountOut Expected amount of WETH to receive after exhange\\n    /// It may be a bit more, but not less than the provided value.\\n    /// @return amountIn Amount of WETH that we should send for exchage\\n    /// @return amountOut Amount of USDT that we will receive in exchange for `amountIn` WETH\\n    function _calcRequiredWETH(uint256 _requiredAmountOut)\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        // We do normalization of the rate as we will recive from the `get_dy` a value with `USDT_DECIMALS`\\n        uint256 dy = TRICRYPTO2_POOL.get_dy(WETH_INDEX_TRICRYPTO, USDT_INDEX_TRICRYPTO, ONE_WETH);\\n        uint256 rate = _normalizeWithDecimals(dy, WETH_DECIMALS, USDT_DECIMALS);\\n        // Normalize `_requiredAmountOut` to `WETH_DECIMALS` as we will use it\\n        // for calculation of the `amountIn` value of the `_tokenIn`\\n        _requiredAmountOut = _normalizeWithDecimals(_requiredAmountOut, WETH_DECIMALS, USDT_DECIMALS);\\n        uint256 multiplied = ONE_WETH * _requiredAmountOut;\\n        // Zero value for amountIn is unacceptable.\\n        assert(multiplied >= rate); // Otherwise, we may get zero.\\n        // Assertion above make it safe\\n        unchecked { amountIn = multiplied / rate; }\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= _requiredAmountOut`.\\n        while (true) {\\n            amountOut = TRICRYPTO2_POOL.get_dy(WETH_INDEX_TRICRYPTO, USDT_INDEX_TRICRYPTO, amountIn);\\n            uint256 amountOutNormalized = _normalizeWithDecimals(amountOut, WETH_DECIMALS, USDT_DECIMALS);\\n\\n            if (amountOutNormalized >= _requiredAmountOut) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                ONE_WETH,\\n                rate,\\n                _requiredAmountOut,\\n                amountOutNormalized\\n            );\\n        }\\n    }\\n\\n    /// @dev Adjusts the given value to have different decimals\\n    function _normalizeWithDecimals(\\n        uint256 _value,\\n        uint256 _toDecimals,\\n        uint256 _fromDecimals\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (_toDecimals == _fromDecimals) {\\n            return _value;\\n        } else if (_toDecimals < _fromDecimals) {\\n            uint256 devideOn;\\n            // It can be unchecked because of the condition `_toDecimals < _fromDecimals`.\\n            // We trust to `_fromDecimals` and `_toDecimals` they should not have large numbers.\\n            unchecked { devideOn = 10 ** (_fromDecimals - _toDecimals); }\\n            // Zero value after normalization is unacceptable.\\n            assert(_value >= devideOn); // Otherwise, we may get zero.\\n            // Assertion above make it safe\\n            unchecked { return _value / devideOn; }\\n        } else {\\n            uint256 decimalsDiff;\\n            // Because of the condition `_toDecimals < _fromDecimals` above,\\n            // we are safe as it guarantees that `_toDecimals` is > `_fromDecimals`\\n            unchecked { decimalsDiff = 10 ** (_toDecimals - _fromDecimals); }\\n\\n            return _value * decimalsDiff;\\n        }\\n    }\\n\\n    /// @notice Extension for such functions like: `_calcRequiredWETH`, `_calcRequiredUSDC`, and `_calcRequiredUSDT`\\n    function _calcAmountIn(\\n        uint256 _amountIn,\\n        uint256 _one,\\n        uint256 _rate,\\n        uint256 _requiredAmountOut,\\n        uint256 _amountOutNormalized\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 diff;\\n        // Because of the condition `amountOutNormalized >= _requiredAmountOut` in a calling function,\\n        // safe math is not required here.\\n        unchecked { diff = _requiredAmountOut - _amountOutNormalized; }\\n        // We may be stuck in a situation where a difference between\\n        // a `_requiredAmountOut` and `amountOutNormalized`\\n        // will be small and we will need to perform more steps.\\n        // This expression helps to escape the almost infinite loop.\\n        if (diff < 1e3) {\\n            // If the `amountIn` value is high the `get_dy` function will revert first\\n            unchecked { _amountIn += 1e3; }\\n        } else {\\n            // `one * diff` is safe as `diff` will be lower then the `_requiredAmountOut`\\n            // for which we have safe math while doing `ONE_... * _requiredAmountOut` in a calling function.\\n            unchecked { _amountIn += (_one * diff) / _rate; }\\n        }\\n\\n        return _amountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x377cfb8bc959554bc983bf6197b54d366ca17d819bcae9c7707a7676ab2bb65d\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurveMetaPoolLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveMetaPoolLike {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x432a12ea0e0f227157ca30e083e0e67080cc14190247a2da6ece762bc967d4f4\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa58ebdd5323cc5e1c7cf07db1eba8a7be095de549883987e62330ce0d49236d3\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike256 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06bcebb8b70b015b2664e41603f53f4d99356383b6e99e242939d7a02525c917\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xb48290785d1be3d5b1ed767ee628faa69ee7ded238de776d66b9e0795536ff50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Magician to support liquidations through Curve-XAI pool IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.",
    "errors": {
      "InvalidAsset()": [
        {
          "details": "Revert if `towardsNative` or `towardsAsset` will be executed for the asset other than XAI"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "towardsAsset(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be wrapped"
        },
        "returns": {
          "amountOut": "Amount of the quote token that we spent to get `_amoun` of the `_asset`",
          "tokenOut": "A token that the `_asset` has been converted to"
        }
      },
      "towardsNative(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be unwrapped"
        },
        "returns": {
          "amountOut": "Amount of the `tokenOut` that we received",
          "tokenOut": "A token that the `_asset` has been converted to"
        }
      }
    },
    "stateVariables": {
      "USDC_INDEX_3CRV": {
        "details": "Index value for the coin (curve DAI/USDC/USDT pool)"
      },
      "USDC_INDEX_XAIPOOL": {
        "details": "Index value for the underlying coin (curve XAI/FRAXBP pool)"
      },
      "USDT_INDEX_3CRV": {
        "details": "Index value for the coin (curve DAI/USDC/USDT pool)"
      },
      "USDT_INDEX_TRICRYPTO": {
        "details": "Index value for the coin (curve USDT/WETH/WBTC pool)"
      },
      "WETH_INDEX_TRICRYPTO": {
        "details": "Index value for the coin (curve USDT/WETH/WBTC pool)"
      },
      "XAI_INDEX_XAIPOOL": {
        "details": "Index value for the coin (curve XAI/FRAXBP pool)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "towardsAsset(address,uint256)": {
        "notice": "Performs operation opposit to `towardsNative`"
      },
      "towardsNative(address,uint256)": {
        "notice": "Operates to unwrap an `_asset`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}