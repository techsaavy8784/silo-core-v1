{
  "address": "0x78622F62b6FbC10aB334B282BB73A0230021b16B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrow",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SiloRouter.Position[]",
          "name": "positions",
          "type": "tuple[]"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgePool",
      "outputs": [
        {
          "internalType": "contract ISiloBridgePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ISiloFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "contract IWrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd5d310de09d4cec742d9b53379f0c176837c1d7ad5af0c4c3f7690b7bb1e653b",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0x78622F62b6FbC10aB334B282BB73A0230021b16B",
    "transactionIndex": 143,
    "gasUsed": "958044",
    "logsBloom": "0x
    "blockHash": "0xf7d26d471e58216c01a2a777521a1956c4a3a94d02ded35214388b057892f327",
    "transactionHash": "0xd5d310de09d4cec742d9b53379f0c176837c1d7ad5af0c4c3f7690b7bb1e653b",
    "logs": [],
    "blockNumber": 13628612,
    "cumulativeGasUsed": "9218167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x012D960E091587A6075C8233FDEba7db87142923"
  ],
  "solcInputHash": "537831d942c1ab4870aa40f6dd7512c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SiloRouter.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgePool\",\"outputs\":[{\"internalType\":\"contract ISiloBridgePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ISiloFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IWrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloRouter.sol\":\"SiloRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/SiloRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWrappedToken.sol\\\";\\nimport \\\"./interfaces/ISiloBridgePool.sol\\\";\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\n\\ncontract SiloRouter {\\n    using SafeERC20 for IERC20;\\n\\n    struct Position {\\n        // what do you use for collateral\\n        address collateral;\\n        // what do you want to borrow\\n        address borrow;\\n        // amount of collateral\\n        uint256 depositAmount;\\n        // amount to borrow\\n        uint256 borrowAmount;\\n    }\\n\\n    IWrappedToken public immutable wrappedToken;\\n    ISiloBridgePool public immutable bridgePool;\\n    ISiloFactory public immutable factory;\\n\\n    constructor (address _factory) {\\n        wrappedToken = IWrappedToken(ISiloFactory(_factory).bridgeAsset());\\n        bridgePool = ISiloBridgePool(ISiloFactory(_factory).bridgePool());\\n        factory = ISiloFactory(_factory);\\n    }\\n\\n    receive() external payable {}\\n\\n    function borrow(Position[] memory positions) external payable {\\n        _transferCollateral(positions[0].collateral, positions[0].depositAmount);\\n\\n        uint256 len = positions.length;\\n        require(len <= 2, \\\"SiloRouter: supports only 2 positons at once\\\");\\n        for (uint256 i  = 0; i < len; i++) {\\n            Position memory pos = positions[i];\\n            require(pos.collateral != pos.borrow, \\\"SiloRouter: cannot depisit & borrow the same asset\\\");\\n            if (pos.collateral == address(wrappedToken)) {\\n                address borrowSilo = factory.silo(pos.borrow);\\n                IERC20(pos.collateral).safeApprove(address(bridgePool), pos.depositAmount);\\n                bridgePool.depositFor(borrowSilo, msg.sender, pos.depositAmount);\\n                ISilo(borrowSilo).borrowFor(msg.sender, address(this), pos.borrowAmount);\\n            } else {\\n                address collateralSilo = factory.silo(pos.collateral);\\n                IERC20(pos.collateral).safeApprove(collateralSilo, pos.depositAmount);\\n                ISilo(collateralSilo).depositFor(msg.sender, pos.depositAmount);\\n                bridgePool.borrowFor(collateralSilo, msg.sender, address(this), pos.borrowAmount);\\n            }\\n        }\\n\\n        Position memory lastPosition = positions[len - 1];\\n        _transferBorrow(lastPosition.borrow, lastPosition.borrowAmount);\\n    }\\n\\n    function _transferCollateral(address _collateral, uint256 _amount) internal {\\n        if (_collateral == address(wrappedToken) && msg.value > 0) {\\n            require(msg.value == _amount, \\\"SiloRouter: incorrect ETH value\\\");\\n            wrappedToken.deposit{value: msg.value}();\\n        } else {\\n            IERC20(_collateral).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n    }\\n\\n    function _transferBorrow(address _borrow, uint256 _amount) internal {\\n        if (_borrow == address(wrappedToken)) {\\n\\n            wrappedToken.withdraw(_amount);\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"SiloRouter: ETH Transfer failed.\\\");\\n        } else {\\n            IERC20(_borrow).safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf893574112b1469d191a43791023cc9245ab7747e55f8b4791eb07a8d97b47a5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISilo {\\n    function deposit(uint256 amount) external;\\n    function borrow(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function withdrawFor(address user, uint256 amount) external;\\n    function repay(uint256 amount) external;\\n    function repayFor(address user, uint256 amount) external;\\n    function liquidate(address[] memory user) external returns (uint256[] memory);\\n    function depositFor(address user, uint256 amount) external;\\n    function borrowFor(address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function asset() external view returns (address);\\n    function isSolvent(address user) external view returns (bool);\\n    function getCollateralValue(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x03a164ae2aa24b3b93923bb197d23fd38fca7b2be138ce3c752bde48c5ff35eb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloBridgePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloBridgePool {\\n    function depositFor(address silo, address user, uint256 amount) external;\\n    function borrowFor(address silo, address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function addSilo(address silo, string memory name, string memory symbol) external;\\n    function getCollateralValue(address silo, address user) external view returns (uint256);\\n    function getLTV(address silo, address user) external view returns (uint256);\\n    function isSolvent(address silo, address user) external view returns (bool);\\n    function asset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8ec77f9a1c55da69a18ab2b78e0980ba1f07b1928f3e60632a48a6b4110f982a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address silo) external view returns (address);\\n    function router() external view returns (address);\\n    function bridgePool() external view returns (address);\\n    function bridgeAsset() external view returns (address);\\n    function oracle() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getVirtualBalances(address silo) external view returns (address);\\n    function getMaximumLTV(address silo) external view returns (uint256);\\n    function getLiquidationThreshold(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1cdcada73331a8004c4f48317c960200e059b50cbd2afee296929ceaa41b581c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedToken is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdaebf04e60825c9d2bc027734549a37fbd4cbb6009bfea37b82569a09db98b6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405162001222380380620012228339810160408190526100319161014e565b806001600160a01b0316634d8775506040518163ffffffff1660e01b815260040160206040518083038186803b15801561006a57600080fd5b505afa15801561007e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a2919061014e565b6001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f757600080fd5b505afa15801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f919061014e565b6001600160601b0319606091821b811660a05291901b1660c05261017e565b60006020828403121561016057600080fd5b81516001600160a01b038116811461017757600080fd5b9392505050565b60805160601c60a05160601c60c05160601c611028620001fa6000396000818160fa015281816102e201526104c1015260008181606101528181610376015281816103cd01526105f801526000818160c60152818161027f015281816106ad015281816107420152818161092a015261097801526110286000f3fe6080604052600436106100435760003560e01c80635e46bea51461004f57806376947ef61461009f578063996c6cc3146100b4578063c45a0155146100e857600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b506100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100b26100ad366004610d5f565b61011c565b005b3480156100c057600080fd5b506100837f000000000000000000000000000000000000000000000000000000000000000081565b3480156100f457600080fd5b506100837f000000000000000000000000000000000000000000000000000000000000000081565b6101628160008151811061013257610132610fae565b6020026020010151600001518260008151811061015157610151610fae565b6020026020010151604001516106ab565b805160028111156101cf5760405162461bcd60e51b815260206004820152602c60248201527f53696c6f526f757465723a20737570706f727473206f6e6c79203220706f736960448201526b746f6e73206174206f6e636560a01b60648201526084015b60405180910390fd5b60005b8181101561066b5760008382815181106101ee576101ee610fae565b6020026020010151905080602001516001600160a01b031681600001516001600160a01b0316141561027d5760405162461bcd60e51b815260206004820152603260248201527f53696c6f526f757465723a2063616e6e6f742064657069736974202620626f726044820152711c9bddc81d1a19481cd85b5948185cdcd95d60721b60648201526084016101c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681600001516001600160a01b0316141561049d5760208101516040516337f9a6bd60e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906337f9a6bd9060240160206040518083038186803b15801561032457600080fd5b505afa158015610338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035c9190610d42565b6040830151835191925061039b916001600160a01b0316907f0000000000000000000000000000000000000000000000000000000000000000906107d1565b604082810151905163b3db428b60e01b81526001600160a01b03838116600483015233602483015260448201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063b3db428b90606401600060405180830381600087803b15801561041357600080fd5b505af1158015610427573d6000803e3d6000fd5b505050506060820151604051633088044160e01b815233600482015230602482015260448101919091526001600160a01b03821690633088044190606401600060405180830381600087803b15801561047f57600080fd5b505af1158015610493573d6000803e3d6000fd5b5050505050610658565b80516040516337f9a6bd60e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906337f9a6bd9060240160206040518083038186803b15801561050357600080fd5b505afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190610d42565b6040830151835191925061055a916001600160a01b03169083906107d1565b60408281015190516317a790f160e11b815233600482015260248101919091526001600160a01b03821690632f4f21e290604401600060405180830381600087803b1580156105a857600080fd5b505af11580156105bc573d6000803e3d6000fd5b50505050606082015160405163dbc5b48160e01b81526001600160a01b03838116600483015233602483015230604483015260648201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063dbc5b48190608401600060405180830381600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b50505050505b508061066381610f7d565b9150506101d2565b5060008261067a600184610f3a565b8151811061068a5761068a610fae565b602002602001015190506106a681602001518260600151610928565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480156106ec5750600034115b156107b8578034146107405760405162461bcd60e51b815260206004820152601f60248201527f53696c6f526f757465723a20696e636f7272656374204554482076616c75650060448201526064016101c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b50505050505050565b6107cd6001600160a01b038316333084610a88565b5050565b80158061085a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561082057600080fd5b505afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190610e78565b155b6108c55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101c6565b6040516001600160a01b0383166024820152604481018290526106a690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ac6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610a7457604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114610a1e576040519150601f19603f3d011682016040523d82523d6000602084013e610a23565b606091505b50509050806106a65760405162461bcd60e51b815260206004820181905260248201527f53696c6f526f757465723a20455448205472616e73666572206661696c65642e60448201526064016101c6565b6107cd6001600160a01b0383163383610b98565b6040516001600160a01b0380851660248301528316604482015260648101829052610ac09085906323b872dd60e01b906084016108f1565b50505050565b6000610b1b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bc89092919063ffffffff16565b8051909150156106a65780806020019051810190610b399190610e56565b6106a65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101c6565b6040516001600160a01b0383166024820152604481018290526106a690849063a9059cbb60e01b906064016108f1565b6060610bd78484600085610be1565b90505b9392505050565b606082471015610c425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c6565b843b610c905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c6565b600080866001600160a01b03168587604051610cac9190610e91565b60006040518083038185875af1925050503d8060008114610ce9576040519150601f19603f3d011682016040523d82523d6000602084013e610cee565b606091505b5091509150610cfe828286610d09565b979650505050505050565b60608315610d18575081610bda565b825115610d285782518084602001fd5b8160405162461bcd60e51b81526004016101c69190610ead565b600060208284031215610d5457600080fd5b8151610bda81610fda565b60006020808385031215610d7257600080fd5b823567ffffffffffffffff80821115610d8a57600080fd5b818501915085601f830112610d9e57600080fd5b813581811115610db057610db0610fc4565b610dbe848260051b01610f09565b8181528481019250838501600783901b85018601891015610dde57600080fd5b60009450845b83811015610e4857608080838c031215610dfc578687fd5b610e04610ee0565b8335610e0f81610fda565b815283890135610e1e81610fda565b818a0152604084810135908201526060808501359082015286529487019490910190600101610de4565b509098975050505050505050565b600060208284031215610e6857600080fd5b81518015158114610bda57600080fd5b600060208284031215610e8a57600080fd5b5051919050565b60008251610ea3818460208701610f51565b9190910192915050565b6020815260008251806020840152610ecc816040850160208701610f51565b601f01601f19169190910160400192915050565b6040516080810167ffffffffffffffff81118282101715610f0357610f03610fc4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f3257610f32610fc4565b604052919050565b600082821015610f4c57610f4c610f98565b500390565b60005b83811015610f6c578181015183820152602001610f54565b83811115610ac05750506000910152565b6000600019821415610f9157610f91610f98565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fef57600080fd5b5056fea2646970667358221220273ba554950303fd953b6d6e6c38034d8a5425e5b177363fe153d94c67a51cef64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}