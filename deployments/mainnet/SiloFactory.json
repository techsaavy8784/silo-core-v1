{
  "address": "0x012D960E091587A6075C8233FDEba7db87142923",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultMaxLTV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridgeAsset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "BridgePoolUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEntryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEntryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolShareFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolShareFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newGuardedLaunchState",
          "type": "bool"
        }
      ],
      "name": "GuardedLaunchToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "InterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newLimitedMaxLiquidityState",
          "type": "bool"
        }
      ],
      "name": "LimitedMaxLiquidityToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NewSilo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newPermissionedSiloCreationState",
          "type": "bool"
        }
      ],
      "name": "PermissionedSiloCreationToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBridgeDeposits",
          "type": "uint256"
        }
      ],
      "name": "SiloLimitConfigUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFINITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSiloConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "virtualBalances",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSiloLimitConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBridgeDeposits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getMaxSiloBridgeDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getMaxSiloDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getMaximumLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "getVirtualBalances",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardedLaunch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "isSilo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitedMaxLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oracleData",
          "type": "bytes"
        }
      ],
      "name": "newSilo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionedSiloCreation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolShareFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgePool",
          "type": "address"
        }
      ],
      "name": "setBridgePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultLiquidationThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDefaultLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultMaxLTV",
          "type": "uint256"
        }
      ],
      "name": "setDefaultMaximumLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultInterestRateModel",
          "type": "address"
        }
      ],
      "name": "setDefaultVirtualBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolShareFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_interestRateModel",
          "type": "address"
        }
      ],
      "name": "setSiloConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBridgeDeposits",
          "type": "uint256"
        }
      ],
      "name": "setSiloLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "silo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "virtualBalances",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloLimitConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBridgeDeposits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloReverse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleGuardedLaunch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLimitedMaxLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePermissionedSiloCreation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c47e2a644eb3e58c33a034ca125ac85d5c204b9f0615e06387be496a84f67d1",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0x012D960E091587A6075C8233FDEba7db87142923",
    "transactionIndex": 65,
    "gasUsed": "5136733",
    "logsBloom": "0x
    "blockHash": "0x2a57669ac5e191051c5bec1603ded904ed2326243dc744113d9a28287dd93dcb",
    "transactionHash": "0x9c47e2a644eb3e58c33a034ca125ac85d5c204b9f0615e06387be496a84f67d1",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 13628540,
        "transactionHash": "0x9c47e2a644eb3e58c33a034ca125ac85d5c204b9f0615e06387be496a84f67d1",
        "address": "0x012D960E091587A6075C8233FDEba7db87142923",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003e61fa24520c2754593b4544acb936bc786206ec"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x2a57669ac5e191051c5bec1603ded904ed2326243dc744113d9a28287dd93dcb"
      }
    ],
    "blockNumber": 13628540,
    "cumulativeGasUsed": "9398770",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5000",
    "6250",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "537831d942c1ab4870aa40f6dd7512c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"BridgePoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEntryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEntryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolShareFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolShareFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newGuardedLaunchState\",\"type\":\"bool\"}],\"name\":\"GuardedLaunchToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"InterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newLimitedMaxLiquidityState\",\"type\":\"bool\"}],\"name\":\"LimitedMaxLiquidityToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NewSilo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newPermissionedSiloCreationState\",\"type\":\"bool\"}],\"name\":\"PermissionedSiloCreationToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBridgeDeposits\",\"type\":\"uint256\"}],\"name\":\"SiloLimitConfigUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFINITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSiloConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"virtualBalances\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSiloLimitConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getMaxSiloBridgeDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getMaxSiloDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getMaximumLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"getVirtualBalances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"isSilo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitedMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oracleData\",\"type\":\"bytes\"}],\"name\":\"newSilo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionedSiloCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgePool\",\"type\":\"address\"}],\"name\":\"setBridgePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint256\"}],\"name\":\"setDefaultLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaximumLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultInterestRateModel\",\"type\":\"address\"}],\"name\":\"setDefaultVirtualBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\"}],\"name\":\"setSiloConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBridgeDeposits\",\"type\":\"uint256\"}],\"name\":\"setSiloLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"silo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"virtualBalances\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloLimitConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloReverse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGuardedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLimitedMaxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePermissionedSiloCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"newSilo(address,address,bytes)\":{\"params\":{\"_asset\":\"silo asset\",\"_oracle\":\"(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if is is the best one\",\"_oracleData\":\"custom data for oracle initialization\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"defaultSiloConfig\":{\"details\":\"Default values for SiloConfig. Used if values are not configured manually.\"},\"entryFee\":{\"details\":\"one time protocol fee for opening a borrow position in basis points\"},\"protocolLiquidationFee\":{\"details\":\"protocol share in liquidation profit\"},\"protocolShareFee\":{\"details\":\"protocol revenue share in interest paid\"},\"silo\":{\"details\":\"maps token address to silo address, token => silo\"},\"siloConfigs\":{\"details\":\"maps silo address to its config\"},\"siloReverse\":{\"details\":\"maps token address to silo address, silo => token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloFactory.sol\":\"SiloFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/ISiloBridgePool.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IVirtualBalances.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\n\\ncontract Silo is Initializable, ISilo, ERC20Upgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public DECIMAL_POINTS; // TODO make it immutable\\n    ISiloFactory public factory;\\n\\n    address public override asset;\\n    uint256 public totalDeposits;\\n    uint256 public totalBorrowShare;\\n    uint256 public totalBorrowAmount;\\n    uint256 public interestRate;\\n    uint256 public protocolFees;\\n    uint256 public borrowAmountLastUpdateTimestamp;  // TODO it might be uint32\\n    uint256 public interestRateLastUpdateTimestamp;  // TODO it might be uint32\\n\\n    mapping(address => uint256) public borrowShare;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Borrow(address indexed user, uint256 amount);\\n    event Repay(address indexed user, uint256 amount);\\n    event Liquidate(address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == factory.router(), \\\"Silo: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBridge() {\\n        require(msg.sender == factory.bridgePool(), \\\"Silo: onlyBridge\\\");\\n        _;\\n    }\\n\\n    modifier interest() {\\n        accrueInterest();\\n        _;\\n    }\\n\\n    /// @dev check if user has enough collateral deposited to silo to support withstanding borrow position on bridgePool\\n    modifier bridgePositionSolvent(address _user) {\\n        _;\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        require(bridgePool.isSolvent(address(this), _user), \\\"Silo: not solvent in bridge position\\\");\\n    }\\n\\n    modifier validateBorrow(address _user) {\\n        _;\\n        require(\\n            getLTV(_user) <= factory.getMaximumLTV(address(this)),\\n            \\\"Silo: maximumLTV\\\"\\n        );\\n    }\\n\\n    modifier validateMaxDeposits() {\\n        _;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n        require(\\n            oracle.getPrice(asset) * totalDeposits / DECIMAL_POINTS <=\\n                IGuardedLaunch(address(factory)).getMaxSiloDeposits(address(this)),\\n            \\\"Silo: total deposits exceed liquidity limit\\\"\\n        );\\n    }\\n\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _user, uint256 _amount) external override onlyRouter {\\n        _deposit(_user, msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        _withdraw(msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(address _user, uint256 _amount) external override onlyRouter {\\n        _withdraw(_user, _amount);\\n    }\\n\\n    function borrow(uint256 _amount) external override validateBorrow(msg.sender) interest  {\\n        _borrow(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function borrowFor(address _user, address _to, uint256 _amount)\\n        external override onlyRouter validateBorrow(_user) interest\\n    {\\n        _borrow(_user, _to, _amount);\\n    }\\n\\n    function repay(uint256 _amount) external override nonReentrant {\\n        _repay(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function repayFor(address _user, uint256 _amount) external override nonReentrant onlyRouter {\\n        _repay(_user, msg.sender, _amount);\\n    }\\n\\n    function seizeCollateral(address _user, address _liquidator) external override onlyBridge returns (uint256) {\\n        uint256 collateral = balanceOf(_user);\\n        _transfer(_user, _liquidator, collateral);\\n        return collateral.toAmount(totalDeposits, totalSupply());\\n    }\\n\\n    function liquidate(address[] memory _users) external override nonReentrant interest returns (uint256[] memory) {\\n        uint256[] memory liquidated = new uint256[](_users.length);\\n        uint256 n = _users.length;\\n        for (uint256 i = 0; i < n; i++) {\\n            liquidated[i] = _liquidate(_users[i]);\\n        }\\n        return liquidated;\\n    }\\n\\n    function initialize(\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __Context_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __ERC20_init_unchained(_name, _symbol);\\n        factory = ISiloFactory(msg.sender);\\n        asset = _asset;\\n        DECIMAL_POINTS = 10**ERC20(_asset).decimals();\\n    }\\n\\n    /// @dev should always calculate all interest based on current timestamp, regardless of the intervals.\\n    ///      Intervals should be used only to change interest rate.\\n    function accrueInterest() public {\\n        uint256 borrowAmountLastUpdateTimestampCached = borrowAmountLastUpdateTimestamp;\\n        uint256 totalDepositsCached = totalDeposits;\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        if (blockTimestamp == borrowAmountLastUpdateTimestampCached) {\\n            return;\\n        }\\n\\n        address model = factory.getVirtualBalances(address(this));\\n\\n        IVirtualBalances.VirtualBalancesOutput memory output = IVirtualBalances(model).getInterestData(\\n            IVirtualBalances.VirtualBalancesInputData({\\n                currentTimestamp: blockTimestamp,\\n                deposit: totalDepositsCached,\\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\\n                borrowAmount: totalBorrowAmount,\\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestampCached,\\n                interestRate: interestRate,\\n                interestRateLastUpdateTimestamp: interestRateLastUpdateTimestamp\\n            })\\n        );\\n\\n        totalBorrowAmount = output.newBorrowAmount;\\n        borrowAmountLastUpdateTimestamp = output.newBorrowAmountUpdateTimestamp;\\n        interestRate = output.newInterestRate;\\n        interestRateLastUpdateTimestamp = output.newInterestRateTimestamp;\\n\\n        // accrue interest\\n        (\\n            protocolFees,\\n            totalDeposits\\n        ) = calculateInterestShares(protocolFees, totalDepositsCached, output.totalInterests);\\n    }\\n\\n    function getTotalDepositsUpdated() public view returns (uint256 _totalDeposits) {\\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations();\\n        (,_totalDeposits) = calculateInterestShares(protocolFees, totalDeposits, output.totalInterests);\\n    }\\n\\n    function isSolvent(address _user) public view override returns (bool) {\\n        require(_user != address(0), \\\"Silo: user != address(0)\\\");\\n        uint256 liquidationThreshold = factory.getLiquidationThreshold(address(this));\\n        return getLTV(_user) <= liquidationThreshold;\\n    }\\n\\n    function getLTV(address _user) public view returns (uint256) {\\n        uint256 borrowAmountValue = getBorrowAmountValue(_user);\\n        if (borrowAmountValue == 0) return 0;\\n\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        uint256 collateralValue = bridgePool.getCollateralValue(address(this), _user);\\n        if (collateralValue == 0) return INFINITY;\\n        return borrowAmountValue * BASIS_POINTS / collateralValue;\\n    }\\n\\n    /// @dev value of collateral (asset) provided by user\\n    function getCollateralValue(address _user) public view override returns (uint256) {\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        uint256 assetAmount = balanceOf(_user).toAmount(getTotalDepositsUpdated(), totalSupply());\\n        return assetAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    /// @dev value of asset borrowed by user\\n    function getBorrowAmountValue(address _user) public view returns (uint256) {\\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\\n\\n        // TODO can we save gas if we do not return whole structure?\\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations();\\n\\n        uint256 assetDebtAmount = borrowShare[_user].toAmount(output.newBorrowAmount, totalBorrowShare);\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        return assetDebtAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    function liquidity() public view returns (uint256) {\\n        return ERC20(asset).balanceOf(address(this));\\n    }\\n\\n    function balanceOfUnderlying(address _user) public view returns (uint256) {\\n        uint256 share = balanceOf(_user);\\n        return share.toAmount(getTotalDepositsUpdated(), totalSupply());\\n    }\\n\\n    function calcFee(uint256 _amount) public view returns (uint256) {\\n        uint256 entryFee = factory.entryFee();\\n        if (entryFee == 0) return 0; // no fee\\n        return _amount * entryFee / BASIS_POINTS;\\n    }\\n\\n    function calculateInterestShares(\\n        uint256 _protocolFees,\\n        uint256 _totalDeposits,\\n        uint256 _totalInterestsForDeltaTime\\n    ) public view returns (\\n        uint256 newProtocolFees,\\n        uint256 newTotalDeposits\\n    ) {\\n        uint256 protocolInterestShare = _totalInterestsForDeltaTime * factory.protocolShareFee() / BASIS_POINTS;\\n        uint256 siloInterestShare = _totalInterestsForDeltaTime - protocolInterestShare;\\n\\n        newProtocolFees = _protocolFees + protocolInterestShare;\\n        newTotalDeposits = _totalDeposits + siloInterestShare;\\n    }\\n\\n    function _deposit(address _user, address _from, uint256 _amount)\\n        internal\\n        nonReentrant\\n        interest\\n        validateMaxDeposits\\n    {\\n        require(borrowShare[_user] == 0, \\\"Silo: cannot deposit & borrow the same asset\\\");\\n\\n        uint256 balanceBefore = liquidity();\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = liquidity();\\n\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 share = _amount.toShare(totalDeposits, totalSupply());\\n        totalDeposits += _amount;\\n        emit Deposit(_user, _amount);\\n        _mint(_user, share);\\n    }\\n\\n    function _withdraw(address _user, uint256 _amount) internal nonReentrant bridgePositionSolvent(_user) interest {\\n        uint256 share;\\n        if (_amount == type(uint256).max) {\\n            share = balanceOf(_user);\\n            _amount = share.toAmount(totalDeposits, totalSupply());\\n        } else {\\n            share = _amount.toShare(totalDeposits, totalSupply());\\n        }\\n        totalDeposits -= _amount;\\n        _burn(_user, share);\\n        emit Withdraw(_user, _amount);\\n\\n        ERC20(asset).safeTransfer(_user, _amount);\\n    }\\n\\n    function _borrow(address _user, address _to, uint256 _amount) internal nonReentrant {\\n        require(balanceOf(_user) == 0, \\\"Silo: cannot borrow & deposit the same asset\\\");\\n        require(liquidity() >= _amount, \\\"Silo: deposit shortage\\\");\\n\\n        uint256 fee = calcFee(_amount);\\n        // TODO, do we need to apply virtual balances here??\\n\\n        uint256 borrowerShare = (_amount + fee).toShare(totalBorrowAmount, totalBorrowShare);\\n        borrowShare[_user] += borrowerShare;\\n        totalBorrowShare += borrowerShare;\\n        totalBorrowAmount += _amount + fee;\\n        protocolFees += fee;\\n\\n        emit Borrow(_user, _amount);\\n\\n        ERC20(asset).safeTransfer(_to, _amount);\\n    }\\n\\n    function _repay(address _user, address _from, uint256 _amount) internal interest returns (uint256) {\\n        uint256 repayShare;\\n        if (_amount == type(uint256).max) {\\n            repayShare = borrowShare[_user];\\n            _amount = repayShare.toAmount(totalBorrowAmount, totalBorrowShare);\\n        } else {\\n            repayShare = _amount.toShare(totalBorrowAmount, totalBorrowShare);\\n        }\\n\\n        borrowShare[_user] -= repayShare;\\n        totalBorrowShare -= repayShare;\\n        totalBorrowAmount -= _amount;\\n\\n        emit Repay(_user, _amount);\\n\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n\\n        //  TODO what about change? if somebody repays more than should\\n\\n        return _amount;\\n    }\\n\\n    function _liquidate(address _user) internal returns (uint256 seizedCollateral) {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) return 0;\\n\\n        uint256 amountRepaid = _repay(_user, msg.sender, type(uint256).max);\\n\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        seizedCollateral = bridgePool.seizeCollateral(_user, msg.sender);\\n\\n        emit Liquidate(_user, amountRepaid, seizedCollateral);\\n\\n        require(isSolvent(_user), \\\"Silo: user not solvent\\\");\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override bridgePositionSolvent(sender) {\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _executeInterestRateCalculations()\\n        internal\\n        view\\n        returns (IVirtualBalances.VirtualBalancesOutput memory output)\\n    {\\n        address model = factory.getVirtualBalances(address(this));\\n\\n        return IVirtualBalances(model).getInterestData(\\n            IVirtualBalances.VirtualBalancesInputData({\\n                currentTimestamp: block.timestamp,\\n                deposit: totalDeposits,\\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\\n                borrowAmount: totalBorrowAmount,\\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestamp,\\n                interestRate: interestRate,\\n                interestRateLastUpdateTimestamp: interestRateLastUpdateTimestamp\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2e3a09402d3b3398e52aed1b0cd39d9019e425039b99546df3cb56540922abce\",\"license\":\"BUSL-1.1\"},\"contracts/SiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\nimport \\\"./interfaces/ISiloBridgePool.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IVirtualBalances.sol\\\";\\n\\nimport \\\"./utils/GuardedLaunch.sol\\\";\\nimport \\\"./Silo.sol\\\";\\n\\ncontract SiloFactory is ISiloFactory, GuardedLaunch {\\n    /// @dev SiloConfig struct represents configurable parameters for each Silo\\n    struct SiloConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\\n        uint256 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        uint256 liquidationThreshold;\\n\\n        address virtualBalances;\\n    }\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n    //Implementation of Silo for cloning\\n    address public immutable siloImplementation;\\n\\n    /// @dev Default values for SiloConfig. Used if values are not configured manually.\\n    SiloConfig public defaultSiloConfig;\\n    address public override bridgeAsset;\\n\\n    /// @dev one time protocol fee for opening a borrow position in basis points\\n    uint256 public override entryFee;\\n    /// @dev protocol revenue share in interest paid\\n    uint256 public override protocolShareFee;\\n    /// @dev protocol share in liquidation profit\\n    uint256 public protocolLiquidationFee;\\n\\n    address public override bridgePool;\\n    address public override oracle;\\n    address public override router;\\n\\n    /// @dev maps token address to silo address, token => silo\\n    mapping(address => address) public override silo;\\n    /// @dev maps token address to silo address, silo => token\\n    mapping(address => address) public siloReverse;\\n    /// @dev maps silo address to its config\\n    mapping(address => SiloConfig) public siloConfigs;\\n\\n    event NewSilo(address indexed silo, address indexed asset, string name, string symbol);\\n    event InterestRateModel(address oldModel, address newModel);\\n    event BridgePoolUpdate(address oldPool, address newPool);\\n    event OracleUpdate(address oldOracle, address newOracle);\\n    event RouterUpdate(address oldRouter, address newRouter);\\n    event FeeUpdate(\\n        uint256 oldEntryFee,\\n        uint256 newEntryFee,\\n        uint256 oldProtocolShareFee,\\n        uint256 newProtocolShareFee,\\n        uint256 oldProtocolLiquidationFee,\\n        uint256 newProtocolLiquidationFee\\n    );\\n\\n    constructor(\\n        uint256 _defaultMaxLTV,\\n        uint256 _defaultLiquidationThreshold,\\n        address _bridgeAsset\\n    ) {\\n        __TwoStepOwnableUpgradeable_init();\\n        defaultSiloConfig.maxLoanToValue = _defaultMaxLTV;\\n        defaultSiloConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n        bridgeAsset = _bridgeAsset;\\n        Silo siloImpl = new Silo();\\n        siloImpl.initialize(_bridgeAsset, \\\"Silo\\\", \\\"silo\\\");\\n        siloImplementation = address(siloImpl);\\n    }\\n\\n    function setFees(uint256 _entryFee, uint256 _protocolShareFee, uint256 _protocolLiquidationFee) external onlyOwner {\\n        emit FeeUpdate(\\n            entryFee,\\n            _entryFee,\\n            protocolShareFee,\\n            _protocolShareFee,\\n            protocolLiquidationFee,\\n            _protocolLiquidationFee\\n        );\\n\\n        entryFee = _entryFee;\\n        protocolShareFee = _protocolShareFee;\\n        protocolLiquidationFee = _protocolLiquidationFee;\\n    }\\n\\n    function setSiloConfig(\\n        address _silo,\\n        uint256 _maxLoanToValue,\\n        uint256 _liquidationThreshold,\\n        address _interestRateModel\\n    ) external onlyOwner {\\n        siloConfigs[_silo] = SiloConfig(_maxLoanToValue, _liquidationThreshold, _interestRateModel);\\n    }\\n\\n    function setDefaultVirtualBalances(address _defaultInterestRateModel) external onlyOwner {\\n        require(_defaultInterestRateModel != address(0), \\\"SiloFactory: new defaultInterestRateModel is zero address\\\");\\n        emit InterestRateModel(defaultSiloConfig.virtualBalances, _defaultInterestRateModel);\\n        defaultSiloConfig.virtualBalances = _defaultInterestRateModel;\\n    }\\n\\n    function setDefaultMaximumLTV(uint256 _defaultMaxLTV) external onlyOwner {\\n        defaultSiloConfig.maxLoanToValue = _defaultMaxLTV;\\n    }\\n\\n    function setDefaultLiquidationThreshold(uint256 _defaultLiquidationThreshold) external onlyOwner {\\n        defaultSiloConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n    }\\n\\n    function setBridgePool(address _bridgePool) external onlyOwner {\\n        require(_bridgePool != address(0), \\\"SiloFactory: new bridgePool is zero address\\\");\\n        emit BridgePoolUpdate(bridgePool, _bridgePool);\\n        bridgePool = _bridgePool;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOwner {\\n        require(_oracle != address(0), \\\"SiloFactory: new oracle is zero address\\\");\\n        emit OracleUpdate(oracle, _oracle);\\n        oracle = _oracle;\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        require(_router != address(0), \\\"SiloFactory: new router is zero address\\\");\\n        emit RouterUpdate(router, _router);\\n        router = _router;\\n    }\\n\\n    function isSilo(address _silo) external view override returns (bool) {\\n        return siloReverse[_silo] != address(0);\\n    }\\n\\n    function getMaximumLTV(address _silo) external view override returns (uint256) {\\n        uint256 maxLoanToValue = siloConfigs[_silo].maxLoanToValue;\\n        if (maxLoanToValue != 0) {\\n            return maxLoanToValue;\\n        }\\n        return defaultSiloConfig.maxLoanToValue;\\n    }\\n\\n    function getVirtualBalances(address _silo) external view override returns (address) {\\n        address interestRateModel = siloConfigs[_silo].virtualBalances;\\n        if (interestRateModel != address(0)) {\\n            return interestRateModel;\\n        }\\n        return defaultSiloConfig.virtualBalances;\\n    }\\n\\n    function getLiquidationThreshold(address _silo) external view override returns (uint256) {\\n        uint256 liquidationThreshold = siloConfigs[_silo].liquidationThreshold;\\n        if (liquidationThreshold != 0) {\\n            return liquidationThreshold;\\n        }\\n        return defaultSiloConfig.liquidationThreshold;\\n    }\\n\\n    /// @param _asset silo asset\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSilo(address _asset, address _oracle, bytes calldata _oracleData) public isPermissionedSiloCreation {\\n        require(_asset != bridgeAsset, \\\"SiloFactory: bridge asset\\\");\\n        require(silo[_asset] == address(0), \\\"SiloFactory: silo exists\\\");\\n\\n        string memory name = string(abi.encodePacked(string(\\\"Silo \\\"), ERC20(_asset).name()));\\n        string memory symbol = string(abi.encodePacked(string(\\\"silo\\\"), ERC20(_asset).symbol()));\\n\\n        address _silo = Clones.clone(siloImplementation);\\n        Silo(_silo).initialize(_asset, name, symbol);\\n        silo[_asset] = _silo;\\n        siloReverse[_silo] = _asset;\\n        emit NewSilo(_silo, _asset, name, symbol);\\n\\n        ISiloBridgePool(bridgePool).addSilo(_silo, name, symbol);\\n        ISiloOracleRepository(oracle).initOracleForAsset(_asset, _oracle, _oracleData);\\n    }\\n}\\n\",\"keccak256\":\"0x4ab816ba87c7ce5081b3066787639d818460f82190f10e077bd7152120d198a0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IGuardedLaunch {\\n    function getMaxSiloDeposits(address silo) external view returns (uint256);\\n    function getMaxSiloBridgeDeposits(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8f9ba8ec2528d4ba94e792cb75458e0105a0eb90633d866286a657a05fcd21b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISilo {\\n    function deposit(uint256 amount) external;\\n    function borrow(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function withdrawFor(address user, uint256 amount) external;\\n    function repay(uint256 amount) external;\\n    function repayFor(address user, uint256 amount) external;\\n    function liquidate(address[] memory user) external returns (uint256[] memory);\\n    function depositFor(address user, uint256 amount) external;\\n    function borrowFor(address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function asset() external view returns (address);\\n    function isSolvent(address user) external view returns (bool);\\n    function getCollateralValue(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x03a164ae2aa24b3b93923bb197d23fd38fca7b2be138ce3c752bde48c5ff35eb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloBridgePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloBridgePool {\\n    function depositFor(address silo, address user, uint256 amount) external;\\n    function borrowFor(address silo, address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function addSilo(address silo, string memory name, string memory symbol) external;\\n    function getCollateralValue(address silo, address user) external view returns (uint256);\\n    function getLTV(address silo, address user) external view returns (uint256);\\n    function isSolvent(address silo, address user) external view returns (bool);\\n    function asset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8ec77f9a1c55da69a18ab2b78e0980ba1f07b1928f3e60632a48a6b4110f982a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address silo) external view returns (address);\\n    function router() external view returns (address);\\n    function bridgePool() external view returns (address);\\n    function bridgeAsset() external view returns (address);\\n    function oracle() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getVirtualBalances(address silo) external view returns (address);\\n    function getMaximumLTV(address silo) external view returns (uint256);\\n    function getLiquidationThreshold(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1cdcada73331a8004c4f48317c960200e059b50cbd2afee296929ceaa41b581c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n    // TODO do research (do we need to refresh price?) and make sure this can stay as a view\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d75cea95fee54e5af92bc86e24fb1c69c63850f6c324549c8d95ec11498ac46\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVirtualBalances.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IVirtualBalances {\\n    /// @param currentTimestamp block.timestamp\\n    /// @param siloShareFee BASIS_POINTS - factory.protocolShareFee\\n    /// @param deposit total deposit of the asset\\n    /// @param borrowAmount total borrow amount\\n    /// @param borrowAmountLastUpdateTimestamp time when `borrowAmount` was updated\\n    /// @param interestRate interest rate at `interestRateLastUpdateTimestamp`\\n    /// @param interestRateLastUpdateTimestamp time when `interestRate` was updated\\n    struct VirtualBalancesInputData {\\n        uint256 currentTimestamp;\\n        uint256 siloShareFee;\\n        uint256 deposit;\\n        uint256 borrowAmount;\\n        uint256 borrowAmountLastUpdateTimestamp;\\n        uint256 interestRate;\\n        uint256 interestRateLastUpdateTimestamp;\\n    }\\n\\n    /// @param newDeposit new deposit after apply interests for interval\\n    /// @param newBorrowAmount new borrowAmount after apply interests for interval\\n    /// @param newBorrowAmountUpdateTimestamp timestamp for `newBorrowAmount`\\n    /// @param newInterestRate new current interest rate\\n    /// @param newInterestRateTimestamp timestamp for `newInterestRate`\\n    /// @param totalInterests interest for provided period of time\\n    ///        from `borrowAmountLastUpdateTimestamp` to `newBorrowAmountUpdateTimestamp`\\n    /// @param protocolInterestShare % for protocol\\n    /// @param siloInterestShare % for users\\n    struct VirtualBalancesOutput {\\n        uint256 newDeposit;\\n        uint256 newBorrowAmount;\\n        uint256 newBorrowAmountUpdateTimestamp;\\n        uint256 newInterestRate;\\n        uint256 newInterestRateTimestamp;\\n        uint256 totalInterests;\\n        uint256 protocolInterestShare;\\n        uint256 siloInterestShare;\\n    }\\n\\n    /// @notice calculates total interests since `_lastUpdateTimestamp`\\n    /// @param _params see VirtualBalancesInputData\\n    /// @return output see InterestDataOuptut\\n    function getInterestData(VirtualBalancesInputData memory _params)\\n        external view returns (VirtualBalancesOutput memory output);\\n}\\n\",\"keccak256\":\"0xca32ee9e268a280bddf2affd0da6d9d847182900a55d57e2fd60ee7708dcde9a\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount * 1e14;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount * 1e14;\\n    }\\n}\\n\",\"keccak256\":\"0x6fad7557ec8708b17bfe6919acf2fb2ad59635591a12d82a8ba662786dd6e019\",\"license\":\"MIT\"},\"contracts/utils/GuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./TwoStepOwnableUpgradeable.sol\\\";\\n\\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnableUpgradeable {\\n    /// @dev SiloLiquidityConfig struct represents maximum allowed deposit limits for each Silo\\n    struct SiloLimitConfig {\\n        uint256 maxDeposits;\\n        uint256 maxBridgeDeposits;\\n    }\\n\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    // @dev flag for guarded functionality\\n    bool public guardedLaunch;\\n    // @dev flag to limit permissionless Silo creation\\n    bool public permissionedSiloCreation;\\n    // @dev flag to limit max liquidity on Silos\\n    bool public limitedMaxLiquidity;\\n    SiloLimitConfig public defaultSiloLimitConfig;\\n\\n    mapping(address => SiloLimitConfig) public siloLimitConfigs;\\n\\n    event GuardedLaunchToggled(bool newGuardedLaunchState);\\n    event PermissionedSiloCreationToggled(bool newPermissionedSiloCreationState);\\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\\n    event SiloLimitConfigUpdate(address indexed silo, uint256 newMaxDeposits, uint256 newMaxBridgeDeposits);\\n\\n    modifier isPermissionedSiloCreation() {\\n        require(\\n            owner() == _msgSender() ||\\n            !(guardedLaunch && permissionedSiloCreation), \\\"Silo: only owner can perform\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        /// @dev All guarded launch flags are turned ON by default\\n        guardedLaunch = true;\\n        permissionedSiloCreation = true;\\n        limitedMaxLiquidity = true;\\n        /// @dev Default values for SiloLiquidityConfig are both 50 ETH\\n        defaultSiloLimitConfig.maxDeposits = 50 ether;\\n        defaultSiloLimitConfig.maxBridgeDeposits = 50 ether;\\n    }\\n\\n    function toggleGuardedLaunch() external onlyOwner {\\n        guardedLaunch = !guardedLaunch;\\n        emit GuardedLaunchToggled(guardedLaunch);\\n    }\\n\\n    function togglePermissionedSiloCreation() external onlyOwner {\\n        permissionedSiloCreation = !permissionedSiloCreation;\\n        emit PermissionedSiloCreationToggled(permissionedSiloCreation);\\n    }\\n\\n    function toggleLimitedMaxLiquidity() external onlyOwner {\\n        limitedMaxLiquidity = !limitedMaxLiquidity;\\n        emit LimitedMaxLiquidityToggled(limitedMaxLiquidity);\\n    }\\n\\n    function setSiloLimitConfig(\\n        address _silo,\\n        uint256 _maxDeposits,\\n        uint256 _maxBridgeDeposits\\n    ) external onlyOwner {\\n        siloLimitConfigs[_silo] = SiloLimitConfig(\\n            _maxDeposits,\\n            _maxBridgeDeposits\\n        );\\n        emit SiloLimitConfigUpdate(_silo, _maxDeposits, _maxBridgeDeposits);\\n    }\\n\\n    function getMaxSiloDeposits(address _silo) external view override returns (uint256) {\\n        if (guardedLaunch && limitedMaxLiquidity) {\\n            uint256 maxDeposits = siloLimitConfigs[_silo].maxDeposits;\\n            if (maxDeposits != 0) {\\n                return maxDeposits;\\n            }\\n            return defaultSiloLimitConfig.maxDeposits;\\n        }\\n        return INFINITY;\\n    }\\n\\n    function getMaxSiloBridgeDeposits(address _silo) external view override returns (uint256) {\\n        if (guardedLaunch && limitedMaxLiquidity) {\\n            uint256 maxBridgeDeposits = siloLimitConfigs[_silo].maxBridgeDeposits;\\n            if (maxBridgeDeposits != 0) {\\n                return maxBridgeDeposits;\\n            }\\n            return defaultSiloLimitConfig.maxBridgeDeposits;\\n        }\\n        return INFINITY;\\n    }\\n}\\n\",\"keccak256\":\"0x3145d3ffd2f3b1ebfdee6749afe9f22a864b2c1142c86004b95ca4f152b7c75d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract TwoStepOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(_msgSender() == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __TwoStepOwnableUpgradeable_init() internal initializer {\\n        __Context_init_unchained();\\n        __TwoStepOwnableUpgradeable_init_unchained();\\n    }\\n\\n    function __TwoStepOwnableUpgradeable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n    /* solhint-enable func-name-mixedcase */\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x873d6e83242c64736b4822d3e41f98e0e9301fa4714a0b98bb315bb7f6ab4480\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200593f3803806200593f8339810160408190526200003491620003c8565b6034805462ffffff60a01b19166201010160a01b1790556802b5e3af16b18800006035819055603655620000676200016e565b60388390556039829055603b80546001600160a01b0319166001600160a01b0383161790556040516000906200009d90620003ba565b604051809103906000f080158015620000ba573d6000803e3d6000fd5b50604051639065714760e01b81526001600160a01b0384811660048084019190915260606024840152606483018190526353696c6f60e01b608484015260a0604484015260a48301526373696c6f60e01b60c48301529192509082169063906571479060e401600060405180830381600087803b1580156200013b57600080fd5b505af115801562000150573d6000803e3d6000fd5b5050505060601b6001600160601b0319166080525062000410915050565b600054610100900460ff168062000188575060005460ff16155b620001e05760405162461bcd60e51b815260206004820152602e60248201526000805160206200591f83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801562000203576000805461ffff19166101011790555b6200020d6200022d565b62000217620002d2565b80156200022a576000805461ff00191690555b50565b600054610100900460ff168062000247575060005460ff16155b6200029b5760405162461bcd60e51b815260206004820152602e60248201526000805160206200591f83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620001d7565b600054610100900460ff1615801562000217576000805461ffff191661010117905580156200022a576000805461ff001916905550565b600054610100900460ff1680620002ec575060005460ff16155b620003405760405162461bcd60e51b815260206004820152602e60248201526000805160206200591f83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620001d7565b600054610100900460ff1615801562000363576000805461ffff19166101011790555b6200021733603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6139e98062001f3683390190565b600080600060608486031215620003de57600080fd5b83516020850151604086015191945092506001600160a01b03811681146200040557600080fd5b809150509250925092565b60805160601c611b00620004366000396000818161058b01526109b70152611b006000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c8063791183d111610151578063b8fb7399116100c3578063e1f1c4a711610087578063e1f1c4a714610603578063e30c39781461060c578063eafecffa1461061d578063f2fde38b14610626578063f887ea4014610639578063fbb8d6021461064c57600080fd5b8063b8fb7399146105ad578063c0d78655146105c1578063c9993b0d146105d4578063cec10c11146105e8578063d6d6e3f8146105fb57600080fd5b806384d247341161011557806384d2473414610521578063857b59131461053c5780638da5cb5b1461054f57806394803a3a14610560578063b67ae54f14610573578063b8b21a9f1461058657600080fd5b8063791183d1146104b757806379ba5097146104e05780637adbf973146104e85780637b86e42c146104fb5780637dc0d1d01461050e57600080fd5b80635c8610b9116101ea5780635f48f44b116101ae5780635f48f44b1461046a5780636465dfa61461047357806364f7a8d3146104865780637128ea2d1461048e578063715018a61461049c578063744d108f146104a457600080fd5b80635c8610b9146103c25780635d320767146103d55780635e46bea5146103e85780635e683bbe146103fb5780635e7149d51461040e57600080fd5b806325ed3d441161023c57806325ed3d441461032c5780632691c69a146103355780633278c6941461034857806337f9a6bd1461035b578063450f8d281461039c5780634d877550146103af57600080fd5b8063072ea61c1461027957806312f0dcd8146102955780631e11d937146102d35780631f781a80146102dd57806325458e0b14610319575b600080fd5b610282603c5481565b6040519081526020015b60405180910390f35b6102c36102a336600461171f565b6001600160a01b0390811660009081526043602052604090205416151590565b604051901515815260200161028c565b6102db610660565b005b6103046102eb36600461171f565b6037602052600090815260409020805460019091015482565b6040805192835260208301919091520161028c565b6102db610327366004611741565b6106f9565b610282603d5481565b6102db610343366004611802565b610b97565b6102db61035636600461171f565b610c1c565b61038461036936600461171f565b6042602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161028c565b6102db6103aa36600461171f565b610cb9565b603b54610384906001600160a01b031681565b6102826103d036600461171f565b610db6565b6102db6103e33660046118f5565b610e1b565b603f54610384906001600160a01b031681565b61028261040936600461171f565b610e4a565b61044661041c36600461171f565b6044602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b03169082015260600161028c565b61028260001981565b6102db6104813660046118f5565b610e79565b6102db610ea8565b603554603654610304919082565b6102db610f2d565b6102db6104b23660046117cf565b610f63565b6103846104c536600461171f565b6043602052600090815260409020546001600160a01b031681565b6102db611003565b6102db6104f636600461171f565b611099565b61028261050936600461171f565b611191565b604054610384906001600160a01b031681565b603854603954603a546104469291906001600160a01b031683565b61028261054a36600461171f565b6111c3565b6033546001600160a01b0316610384565b6102db61056e36600461171f565b61121c565b61038461058136600461171f565b61132b565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6034546102c390600160a81b900460ff1681565b6102db6105cf36600461171f565b61136a565b6034546102c390600160b01b900460ff1681565b6102db6105f636600461190e565b611463565b6102db6114f8565b61028261271081565b6034546001600160a01b0316610384565b610282603e5481565b6102db61063436600461171f565b61157e565b604154610384906001600160a01b031681565b6034546102c390600160a01b900460ff1681565b6033546001600160a01b031633146106935760405162461bcd60e51b815260040161068a90611a4f565b60405180910390fd5b6034805460ff600160a81b808304821615810260ff60a81b1990931692909217928390556040517f0a5b76e624ee06d344a0b42e72adaefbec1739a56a72313432656fce44671248936106ef9390049091161515815260200190565b60405180910390a1565b6033546001600160a01b03163314806107315750603454600160a01b900460ff16801561072f5750603454600160a81b900460ff165b155b61077d5760405162461bcd60e51b815260206004820152601c60248201527f53696c6f3a206f6e6c79206f776e65722063616e20706572666f726d00000000604482015260640161068a565b603b546001600160a01b03858116911614156107db5760405162461bcd60e51b815260206004820152601960248201527f53696c6f466163746f72793a2062726964676520617373657400000000000000604482015260640161068a565b6001600160a01b0384811660009081526042602052604090205416156108435760405162461bcd60e51b815260206004820152601860248201527f53696c6f466163746f72793a2073696c6f206578697374730000000000000000604482015260640161068a565b600060405180604001604052806005815260200164029b4b637960dd1b815250856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d89190810190611848565b6040516020016108e9929190611966565b604051602081830303815290604052905060006040518060400160405280600481526020016373696c6f60e01b815250866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098e9190810190611848565b60405160200161099f929190611966565b604051602081830303815290604052905060006109db7f0000000000000000000000000000000000000000000000000000000000000000611619565b604051639065714760e01b81529091506001600160a01b03821690639065714790610a0e908a90879087906004016119e1565b600060405180830381600087803b158015610a2857600080fd5b505af1158015610a3c573d6000803e3d6000fd5b5050506001600160a01b03808916600081815260426020908152604080832080549588166001600160a01b0319968716811790915580845260439092529182902080549094168317909355519092507f8d69f1b2a9d562b521219e6bfdfc472a6d567c648f96fa78fd6218ab9c27184c90610aba9087908790611a21565b60405180910390a3603f54604051620ebe3560e41b81526001600160a01b039091169062ebe35090610af4908490879087906004016119e1565b600060405180830381600087803b158015610b0e57600080fd5b505af1158015610b22573d6000803e3d6000fd5b505060408054905163332f3c2160e01b81526001600160a01b03909116925063332f3c219150610b5c908a908a908a908a90600401611995565b600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b5050505050505050505050565b6033546001600160a01b03163314610bc15760405162461bcd60e51b815260040161068a90611a4f565b6040805160608101825293845260208085019384526001600160a01b03928316858301908152958316600090815260449091522092518355905160018301559151600290910180546001600160a01b03191691909216179055565b6033546001600160a01b03163314610c465760405162461bcd60e51b815260040161068a90611a4f565b806001600160a01b0316610c626033546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3603480546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610ce35760405162461bcd60e51b815260040161068a90611a4f565b6001600160a01b038116610d4d5760405162461bcd60e51b815260206004820152602b60248201527f53696c6f466163746f72793a206e657720627269646765506f6f6c206973207a60448201526a65726f206164647265737360a81b606482015260840161068a565b603f54604080516001600160a01b03928316815291831660208301527fc8cbf611d53cdc41bcf01185d8634e8176b4d2fd0615f093c1107a888af0eb03910160405180910390a1603f80546001600160a01b0319166001600160a01b0392909216919091179055565b603454600090600160a01b900460ff168015610ddb5750603454600160b01b900460ff165b15610e12576001600160a01b0382166000908152603760205260409020600101548015610e085792915050565b5050603654919050565b50600019919050565b6033546001600160a01b03163314610e455760405162461bcd60e51b815260040161068a90611a4f565b603955565b6001600160a01b0381166000908152604460205260408120548015610e6f5792915050565b5050603854919050565b6033546001600160a01b03163314610ea35760405162461bcd60e51b815260040161068a90611a4f565b603855565b6033546001600160a01b03163314610ed25760405162461bcd60e51b815260040161068a90611a4f565b6034805460ff600160b01b808304821615810260ff60b01b1990931692909217928390556040517eace7bfa8dc4895fea42b63dd0304a5b26ee0982b8d764257b6b106b11a4541936106ef9390049091161515815260200190565b6033546001600160a01b03163314610f575760405162461bcd60e51b815260040161068a90611a4f565b610f6160006116b6565b565b6033546001600160a01b03163314610f8d5760405162461bcd60e51b815260040161068a90611a4f565b60408051808201825283815260208082018481526001600160a01b038716600081815260378452859020935184559051600190930192909255825185815290810184905290917ff8fb0c2b61347050d57930a3aafeafa4d96e5d67679f85f908bd1885fee257d0910160405180910390a2505050565b6034546001600160a01b0316331461106d5760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161068a565b6110876110826034546001600160a01b031690565b6116b6565b603480546001600160a01b0319169055565b6033546001600160a01b031633146110c35760405162461bcd60e51b815260040161068a90611a4f565b6001600160a01b0381166111295760405162461bcd60e51b815260206004820152602760248201527f53696c6f466163746f72793a206e6577206f7261636c65206973207a65726f206044820152666164647265737360c81b606482015260840161068a565b6040805481516001600160a01b03918216815290831660208201527f93450534569bdbb3109b44eef77c9b236897f4caa4f201be10252d6462a56937910160405180910390a1604080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526044602052604081206001015480156111b95792915050565b5050603954919050565b603454600090600160a01b900460ff1680156111e85750603454600160b01b900460ff165b15610e12576001600160a01b03821660009081526037602052604090205480156112125792915050565b5050603554919050565b6033546001600160a01b031633146112465760405162461bcd60e51b815260040161068a90611a4f565b6001600160a01b0381166112c25760405162461bcd60e51b815260206004820152603960248201527f53696c6f466163746f72793a206e65772064656661756c74496e74657265737460448201527f526174654d6f64656c206973207a65726f206164647265737300000000000000606482015260840161068a565b603a54604080516001600160a01b03928316815291831660208301527f1248f8750c9f60e1f800102d9248fa767877fba538403657d414e2d25b6025ce910160405180910390a1603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380821660009081526044602052604081206002015490911680156113575792915050565b5050603a546001600160a01b0316919050565b6033546001600160a01b031633146113945760405162461bcd60e51b815260040161068a90611a4f565b6001600160a01b0381166113fa5760405162461bcd60e51b815260206004820152602760248201527f53696c6f466163746f72793a206e657720726f75746572206973207a65726f206044820152666164647265737360c81b606482015260840161068a565b604154604080516001600160a01b03928316815291831660208301527f363beda10ebf02584eda9ab4ca38e353bc57591b50714ba84692ed584280672d910160405180910390a1604180546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461148d5760405162461bcd60e51b815260040161068a90611a4f565b603c54603d54603e54604080519384526020840187905283019190915260608201849052608082015260a081018290527fa3f1bea221509c108990ce42d4e5863cfc867e2278ddb0866dec442c2082fdcf9060c00160405180910390a1603c92909255603d55603e55565b6033546001600160a01b031633146115225760405162461bcd60e51b815260040161068a90611a4f565b6034805460ff600160a01b808304821615810260ff60a01b1990931692909217928390556040517fe7d69a5901cea312ff408411a66d0131bbad02de0314b7c56d140d58d11b029f936106ef9390049091161515815260200190565b6033546001600160a01b031633146115a85760405162461bcd60e51b815260040161068a90611a4f565b6001600160a01b03811661160d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161068a565b611616816116b6565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166116b15760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161068a565b919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146116b157600080fd5b60006020828403121561173157600080fd5b61173a82611708565b9392505050565b6000806000806060858703121561175757600080fd5b61176085611708565b935061176e60208601611708565b9250604085013567ffffffffffffffff8082111561178b57600080fd5b818701915087601f83011261179f57600080fd5b8135818111156117ae57600080fd5b8860208285010111156117c057600080fd5b95989497505060200194505050565b6000806000606084860312156117e457600080fd5b6117ed84611708565b95602085013595506040909401359392505050565b6000806000806080858703121561181857600080fd5b61182185611708565b9350602085013592506040850135915061183d60608601611708565b905092959194509250565b60006020828403121561185a57600080fd5b815167ffffffffffffffff8082111561187257600080fd5b818401915084601f83011261188657600080fd5b81518181111561189857611898611ab4565b604051601f8201601f19908116603f011681019083821181831017156118c0576118c0611ab4565b816040528281528760208487010111156118d957600080fd5b6118ea836020830160208801611a84565b979650505050505050565b60006020828403121561190757600080fd5b5035919050565b60008060006060848603121561192357600080fd5b505081359360208301359350604090920135919050565b60008151808452611952816020860160208601611a84565b601f01601f19169290920160200192915050565b60008351611978818460208801611a84565b83519083019061198c818360208801611a84565b01949350505050565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6001600160a01b0384168152606060208201819052600090611a059083018561193a565b8281036040840152611a17818561193a565b9695505050505050565b604081526000611a34604083018561193a565b8281036020840152611a46818561193a565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b83811015611a9f578181015183820152602001611a87565b83811115611aae576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212202b70388c507862f801e3e655e5b4d75097df35ce3d0e6c29b63184494ee11b2b64736f6c63430008070033608060405234801561001057600080fd5b506139c9806100206000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80634d5663f11161015c578063a79660f2116100ce578063c5ebeaec11610087578063c5ebeaec1461054d578063ce47696f14610560578063d2ecda0e14610569578063db518db214610591578063dd62ed3e146105a4578063e1f1c4a7146105dd57600080fd5b8063a79660f2146104d8578063a9059cbb146104e1578063a985994b146104f4578063aca25f9a14610514578063b6b55f2514610527578063c45a01551461053a57600080fd5b80637d882097116101205780637d88209714610486578063906571471461048f57806395d89b41146104a257806397904e42146104aa578063a457c2d7146104bd578063a6afed95146104d057600080fd5b80634d5663f1146104305780635f48f44b1461043857806370a082311461044157806375dc7d8c1461046a5780637c3a00fd1461047d57600080fd5b80632f4f21e2116101f557806338d52e0f116101b957806338d52e0f146103ba57806339509351146103e55780633af9e669146103f8578063423f48361461040b5780634274f39c1461041e5780634550079d1461042757600080fd5b80632f4f21e21461035f5780633088044114610372578063313ce56714610385578063371fd8e61461039457806338b51ce1146103a757600080fd5b80631c4125e9116102475780631c4125e9146102e85780631d5f143e146102f157806323a276221461030457806323b872dd146103195780632c9cbca21461032c5780632e1a7d4d1461034c57600080fd5b806306fdde0314610284578063095ea7b3146102a257806318160ddd146102c55780631a686502146102d75780631ad8b03b146102df575b600080fd5b61028c6105e6565b60405161029991906135b7565b60405180910390f35b6102b56102b036600461333f565b610678565b6040519015158152602001610299565b6035545b604051908152602001610299565b6102c961068f565b6102c9609e5481565b6102c960a05481565b6102c96102ff36600461324f565b610710565b61031761031236600461333f565b610828565b005b6102b5610327366004613288565b610912565b6102c961033a366004613215565b60a16020526000908152604090205481565b61031761035a3660046134d6565b6109be565b61031761036d36600461333f565b6109cb565b610317610380366004613288565b610a90565b60405160128152602001610299565b6103176103a23660046134d6565b610c25565b6102b56103b5366004613215565b610c61565b6099546103cd906001600160a01b031681565b6040516001600160a01b039091168152602001610299565b6102b56103f336600461333f565b610d4a565b6102c9610406366004613215565b610d86565b6102c9610419366004613215565b610db2565b6102c9609f5481565b6102c9609c5481565b6102c9610f21565b6102c960001981565b6102c961044f366004613215565b6001600160a01b031660009081526033602052604090205490565b6102c96104783660046134d6565b610f41565b6102c9609d5481565b6102c9609a5481565b61031761049d3660046132c9565b610ff1565b61028c61111e565b6102c96104b8366004613215565b61112d565b6102b56104cb36600461333f565b61128e565b610317611327565b6102c9609b5481565b6102b56104ef36600461333f565b611545565b61050761050236600461336b565b611552565b6040516102999190613573565b6102c9610522366004613215565b611638565b6103176105353660046134d6565b611776565b6098546103cd906001600160a01b031681565b61031761055b3660046134d6565b611781565b6102c960975481565b61057c610577366004613508565b61185a565b60408051928352602083019190915201610299565b61031761059f36600461333f565b61192e565b6102c96105b236600461324f565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6102c961271081565b6060603680546105f5906138e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610621906138e6565b801561066e5780601f106106435761010080835404028352916020019161066e565b820191906000526020600020905b81548152906001019060200180831161065157829003601f168201915b5050505050905090565b60006106853384846119ee565b5060015b92915050565b6099546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b91906134ef565b905090565b60985460408051635e46bea560e01b815290516000926001600160a01b031691635e46bea5916004808301926020929190829003018186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190613232565b6001600160a01b0316336001600160a01b0316146107e55760405162461bcd60e51b815260206004820152601060248201526f53696c6f3a206f6e6c7942726964676560801b60448201526064015b60405180910390fd5b6001600160a01b038316600090815260336020526040902054610809848483611b12565b610820609a5461081860355490565b839190611c41565b949350505050565b6002606554141561084b5760405162461bcd60e51b81526004016107dc906136a6565b6002606555609854604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190613232565b6001600160a01b0316336001600160a01b0316146108fd5760405162461bcd60e51b81526004016107dc9061367c565b610908823383611c70565b5050600160655550565b600061091f848484611b12565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156109a45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016107dc565b6109b185338584036119ee565b60019150505b9392505050565b6109c83382611d8a565b50565b609860009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1957600080fd5b505afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190613232565b6001600160a01b0316336001600160a01b031614610a815760405162461bcd60e51b81526004016107dc9061367c565b610a8c823383611fb6565b5050565b609860009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613232565b6001600160a01b0316336001600160a01b031614610b465760405162461bcd60e51b81526004016107dc9061367c565b82610b4f611327565b610b5a848484612318565b609854604051632f341ddf60e11b81523060048201526001600160a01b0390911690635e683bbe9060240160206040518083038186803b158015610b9d57600080fd5b505afa158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd591906134ef565b610bde82611638565b1115610c1f5760405162461bcd60e51b815260206004820152601060248201526f29b4b6379d1036b0bc34b6bab6a62a2b60811b60448201526064016107dc565b50505050565b60026065541415610c485760405162461bcd60e51b81526004016107dc906136a6565b6002606555610c58338083611c70565b50506001606555565b60006001600160a01b038216610cb95760405162461bcd60e51b815260206004820152601860248201527f53696c6f3a207573657220213d2061646472657373283029000000000000000060448201526064016107dc565b609854604051631ee1b90b60e21b81523060048201526000916001600160a01b031690637b86e42c9060240160206040518083038186803b158015610cfd57600080fd5b505afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3591906134ef565b905080610d4184611638565b11159392505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610685918590610d8190869061375c565b6119ee565b6001600160a01b0381166000908152603360205260408120546109b7610daa610f21565b603554610818565b600080609860009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0357600080fd5b505afa158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3b9190613232565b90506000610e4761251c565b602080820151609b546001600160a01b038816600090815260a190935260408320549394509192610e7a92909190611c41565b6099546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908516906341976e099060240160206040518083038186803b158015610ec557600080fd5b505afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd91906134ef565b609754909150610f0d8284613884565b610f179190613774565b9695505050505050565b600080610f2c61251c565b90506109b7609e54609a548360a0015161185a565b600080609860009054906101000a90046001600160a01b03166001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9257600080fd5b505afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca91906134ef565b905080610fda5750600092915050565b612710610fe78285613884565b6109b79190613774565b600054610100900460ff168061100a575060005460ff16155b6110265760405162461bcd60e51b81526004016107dc906135ea565b600054610100900460ff16158015611048576000805461ffff19166101011790555b611050612732565b61105861279d565b611062838361280d565b609880546001600160a01b03199081163317909155609980546001600160a01b0387169216821790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b1580156110c157600080fd5b505afa1580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190613534565b61110490600a6137d9565b6097558015610c1f576000805461ff001916905550505050565b6060603780546105f5906138e6565b600080609860009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190613232565b6099546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908316906341976e099060240160206040518083038186803b15801561120157600080fd5b505afa158015611215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123991906134ef565b9050600061126b611248610f21565b6035546001600160a01b0388166000908152603360205260409020549190611c41565b60975490915061127b8383613884565b6112859190613774565b95945050505050565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156113105760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107dc565b61131d33858584036119ee565b5060019392505050565b609f54609a54428083141561133b57505050565b60985460405163b67ae54f60e01b81523060048201526000916001600160a01b03169063b67ae54f9060240160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190613232565b90506000816001600160a01b031663c894a0716040518060e00160405280868152602001609860009054906101000a90046001600160a01b03166001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561142957600080fd5b505afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906134ef565b61146d906127106138a3565b8152602001878152602001609c548152602001888152602001609d54815260200160a0548152506040518263ffffffff1660e01b81526004016114b091906136dd565b6101006040518083038186803b1580156114c957600080fd5b505afa1580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190613446565b6020810151609c556040810151609f556060810151609d55608081015160a0908155609e549082015191925061153891869061185a565b609a55609e555050505050565b6000610685338484611b12565b6060600260655414156115775760405162461bcd60e51b81526004016107dc906136a6565b6002606555611584611327565b6000825167ffffffffffffffff8111156115a0576115a0613968565b6040519080825280602002602001820160405280156115c9578160200160208202803683370190505b50835190915060005b8181101561162b576115fc8582815181106115ef576115ef613952565b60200260200101516128a3565b83828151811061160e5761160e613952565b60209081029190910101528061162381613921565b9150506115d2565b5050600160655592915050565b60008061164483610db2565b9050806116545750600092915050565b60985460408051635e46bea560e01b815290516000926001600160a01b031691635e46bea5916004808301926020929190829003018186803b15801561169957600080fd5b505afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190613232565b604051631eee3aa360e01b81523060048201526001600160a01b038681166024830152919250600091831690631eee3aa39060440160206040518083038186803b15801561171e57600080fd5b505afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175691906134ef565b9050806117695750600019949350505050565b8061127b61271085613884565b6109c8333383611fb6565b3361178a611327565b611795333384612318565b609854604051632f341ddf60e11b81523060048201526001600160a01b0390911690635e683bbe9060240160206040518083038186803b1580156117d857600080fd5b505afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181091906134ef565b61181982611638565b1115610a8c5760405162461bcd60e51b815260206004820152601060248201526f29b4b6379d1036b0bc34b6bab6a62a2b60811b60448201526064016107dc565b6000806000612710609860009054906101000a90046001600160a01b03166001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b057600080fd5b505afa1580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e891906134ef565b6118f29086613884565b6118fc9190613774565b9050600061190a82866138a3565b9050611916828861375c565b9350611922818761375c565b92505050935093915050565b609860009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561197c57600080fd5b505afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190613232565b6001600160a01b0316336001600160a01b0316146119e45760405162461bcd60e51b81526004016107dc9061367c565b610a8c8282611d8a565b6001600160a01b038316611a505760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107dc565b6001600160a01b038216611ab15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107dc565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82611b1e848484612a75565b60985460408051635e46bea560e01b815290516000926001600160a01b031691635e46bea5916004808301926020929190829003018186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190613232565b604051630590630f60e41b81523060048201526001600160a01b0384811660248301529192509082169063590630f09060440160206040518083038186803b158015611be657600080fd5b505afa158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e9190613424565b611c3a5760405162461bcd60e51b81526004016107dc90613638565b5050505050565b6000811580611c4e575082155b15611c5b575060006109b7565b81611c668486613884565b6108209190613774565b6000611c7a611327565b6000600019831415611cb857506001600160a01b038416600090815260a16020526040902054609c54609b54611cb1918391611c41565b9250611ccc565b609c54609b54611cc9918591612c43565b90505b6001600160a01b038516600090815260a1602052604081208054839290611cf49084906138a3565b9250508190555080609b6000828254611d0d91906138a3565b9250508190555082609c6000828254611d2691906138a3565b90915550506040518381526001600160a01b038616907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942319060200160405180910390a2609954611d81906001600160a01b0316853086612c67565b50909392505050565b60026065541415611dad5760405162461bcd60e51b81526004016107dc906136a6565b600260655581611dbb611327565b6000600019831415611df8576001600160a01b0384166000908152603360205260409020549050611df1609a5461081860355490565b9250611e12565b611e0f609a54611e0760355490565b859190612c43565b90505b82609a6000828254611e2491906138a3565b90915550611e3490508482612cd2565b836001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051611e6f91815260200190565b60405180910390a2609954611e8e906001600160a01b03168585612e20565b5060985460408051635e46bea560e01b815290516000926001600160a01b031691635e46bea5916004808301926020929190829003018186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c9190613232565b604051630590630f60e41b81523060048201526001600160a01b0384811660248301529192509082169063590630f09060440160206040518083038186803b158015611f5757600080fd5b505afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f9190613424565b611fab5760405162461bcd60e51b81526004016107dc90613638565b505060016065555050565b60026065541415611fd95760405162461bcd60e51b81526004016107dc906136a6565b6002606555611fe6611327565b6001600160a01b038316600090815260a16020526040902054156120615760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f74206465706f736974202620626f72726f7720746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107dc565b600061206b61068f565b609954909150612086906001600160a01b0316843085612c67565b600061209061068f565b905061209c82826138a3565b925060006120b7609a546120af60355490565b869190612c43565b905083609a60008282546120cb919061375c565b90915550506040518481526001600160a01b038716907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26121188682612e50565b5050506000609860009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561216b57600080fd5b505afa15801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a39190613232565b60985460405163857b591360e01b81523060048201529192506001600160a01b03169063857b59139060240160206040518083038186803b1580156121e757600080fd5b505afa1580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221f91906134ef565b609754609a546099546040516341976e0960e01b81526001600160a01b039182166004820152908516906341976e099060240160206040518083038186803b15801561226a57600080fd5b505afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a291906134ef565b6122ac9190613884565b6122b69190613774565b1115611fab5760405162461bcd60e51b815260206004820152602b60248201527f53696c6f3a20746f74616c206465706f7369747320657863656564206c69717560448201526a1a591a5d1e481b1a5b5a5d60aa1b60648201526084016107dc565b6002606554141561233b5760405162461bcd60e51b81526004016107dc906136a6565b60026065556001600160a01b038316600090815260336020526040902054156123bb5760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f7420626f72726f772026206465706f73697420746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107dc565b806123c461068f565b101561240b5760405162461bcd60e51b815260206004820152601660248201527553696c6f3a206465706f7369742073686f727461676560501b60448201526064016107dc565b600061241682610f41565b90506000612436609c54609b54848661242f919061375c565b9190612c43565b6001600160a01b038616600090815260a1602052604081208054929350839290919061246390849061375c565b9250508190555080609b600082825461247c919061375c565b9091555061248c9050828461375c565b609c600082825461249d919061375c565b9250508190555081609e60008282546124b6919061375c565b90915550506040518381526001600160a01b038616907fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367509060200160405180910390a2609954612510906001600160a01b03168585612e20565b50506001606555505050565b61256460405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60985460405163b67ae54f60e01b81523060048201526000916001600160a01b03169063b67ae54f9060240160206040518083038186803b1580156125a857600080fd5b505afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190613232565b9050806001600160a01b031663c894a0716040518060e00160405280428152602001609860009054906101000a90046001600160a01b03166001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561265057600080fd5b505afa158015612664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268891906134ef565b612694906127106138a3565b8152602001609a548152602001609c548152602001609f548152602001609d54815260200160a0548152506040518263ffffffff1660e01b81526004016126db91906136dd565b6101006040518083038186803b1580156126f457600080fd5b505afa158015612708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272c9190613446565b91505090565b600054610100900460ff168061274b575060005460ff16155b6127675760405162461bcd60e51b81526004016107dc906135ea565b600054610100900460ff16158015612789576000805461ffff19166101011790555b80156109c8576000805461ff001916905550565b600054610100900460ff16806127b6575060005460ff16155b6127d25760405162461bcd60e51b81526004016107dc906135ea565b600054610100900460ff161580156127f4576000805461ffff19166101011790555b600160655580156109c8576000805461ff001916905550565b600054610100900460ff1680612826575060005460ff16155b6128425760405162461bcd60e51b81526004016107dc906135ea565b600054610100900460ff16158015612864576000805461ffff19166101011790555b825161287790603690602086019061310c565b50815161288b90603790602085019061310c565b50801561289e576000805461ff00191690555b505050565b60006128ae82610c61565b156128bb57506000919050565b60006128ca8333600019611c70565b90506000609860009054906101000a90046001600160a01b03166001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b15801561291c57600080fd5b505afa158015612930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129549190613232565b604051630eaf8a1f60e11b81526001600160a01b03868116600483015233602483015291925090821690631d5f143e90604401602060405180830381600087803b1580156129a157600080fd5b505af11580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d991906134ef565b60408051848152602081018390529194506001600160a01b038616917f3c4b1d42b9c7fa283f6fe657533f6a5a8a7ad1d36f9ef1d9d89ad04485e10d2c910160405180910390a2612a2984610c61565b612a6e5760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b60448201526064016107dc565b5050919050565b6001600160a01b038316612ad95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107dc565b6001600160a01b038216612b3b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107dc565b6001600160a01b03831660009081526033602052604090205481811015612bb35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107dc565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290612bea90849061375c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612c3691815260200190565b60405180910390a3610c1f565b6000811580612c50575082155b15612c5c5750826109b7565b82611c668386613884565b6040516001600160a01b0380851660248301528316604482015260648101829052610c1f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f2f565b6001600160a01b038216612d325760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107dc565b6001600160a01b03821660009081526033602052604090205481811015612da65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107dc565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612dd59084906138a3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261289e90849063a9059cbb60e01b90606401612c9b565b6001600160a01b038216612ea65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107dc565b8060356000828254612eb8919061375c565b90915550506001600160a01b03821660009081526033602052604081208054839290612ee590849061375c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000612f84826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130019092919063ffffffff16565b80519091501561289e5780806020019051810190612fa29190613424565b61289e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107dc565b6060610820848460008585843b61305a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107dc565b600080866001600160a01b031685876040516130769190613557565b60006040518083038185875af1925050503d80600081146130b3576040519150601f19603f3d011682016040523d82523d6000602084013e6130b8565b606091505b50915091506130c88282866130d3565b979650505050505050565b606083156130e25750816109b7565b8251156130f25782518084602001fd5b8160405162461bcd60e51b81526004016107dc91906135b7565b828054613118906138e6565b90600052602060002090601f01602090048101928261313a5760008555613180565b82601f1061315357805160ff1916838001178555613180565b82800160010185558215613180579182015b82811115613180578251825591602001919060010190613165565b5061318c929150613190565b5090565b5b8082111561318c5760008155600101613191565b600082601f8301126131b657600080fd5b813567ffffffffffffffff8111156131d0576131d0613968565b6131e3601f8201601f191660200161372b565b8181528460208386010111156131f857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561322757600080fd5b81356109b78161397e565b60006020828403121561324457600080fd5b81516109b78161397e565b6000806040838503121561326257600080fd5b823561326d8161397e565b9150602083013561327d8161397e565b809150509250929050565b60008060006060848603121561329d57600080fd5b83356132a88161397e565b925060208401356132b88161397e565b929592945050506040919091013590565b6000806000606084860312156132de57600080fd5b83356132e98161397e565b9250602084013567ffffffffffffffff8082111561330657600080fd5b613312878388016131a5565b9350604086013591508082111561332857600080fd5b50613335868287016131a5565b9150509250925092565b6000806040838503121561335257600080fd5b823561335d8161397e565b946020939093013593505050565b6000602080838503121561337e57600080fd5b823567ffffffffffffffff8082111561339657600080fd5b818501915085601f8301126133aa57600080fd5b8135818111156133bc576133bc613968565b8060051b91506133cd84830161372b565b8181528481019084860184860187018a10156133e857600080fd5b600095505b8386101561341757803594506134028561397e565b848352600195909501949186019186016133ed565b5098975050505050505050565b60006020828403121561343657600080fd5b815180151581146109b757600080fd5b600061010080838503121561345a57600080fd5b6040519081019067ffffffffffffffff8211818310171561347d5761347d613968565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b6000602082840312156134e857600080fd5b5035919050565b60006020828403121561350157600080fd5b5051919050565b60008060006060848603121561351d57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561354657600080fd5b815160ff811681146109b757600080fd5b600082516135698184602087016138ba565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156135ab5783518352928401929184019160010161358f565b50909695505050505050565b60208152600082518060208401526135d68160408501602087016138ba565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526024908201527f53696c6f3a206e6f7420736f6c76656e7420696e2062726964676520706f73696040820152633a34b7b760e11b606082015260800190565b60208082526010908201526f29b4b6379d1037b7363ca937baba32b960811b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561375457613754613968565b604052919050565b6000821982111561376f5761376f61393c565b500190565b60008261379157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156137d15781600019048211156137b7576137b761393c565b808516156137c457918102915b93841c939080029061379b565b509250929050565b60006109b760ff8416836000826137f257506001610689565b816137ff57506000610689565b8160018114613815576002811461381f5761383b565b6001915050610689565b60ff8411156138305761383061393c565b50506001821b610689565b5060208310610133831016604e8410600b841016171561385e575081810a610689565b6138688383613796565b806000190482111561387c5761387c61393c565b029392505050565b600081600019048311821515161561389e5761389e61393c565b500290565b6000828210156138b5576138b561393c565b500390565b60005b838110156138d55781810151838201526020016138bd565b83811115610c1f5750506000910152565b600181811c908216806138fa57607f821691505b6020821081141561391b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139355761393561393c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109c857600080fdfea26469706673582212205c723ac8657edc7407c4bcd19f4d2be65e58b1559c04ec54855a182cf66a501964736f6c63430008070033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "newSilo(address,address,bytes)": {
        "params": {
          "_asset": "silo asset",
          "_oracle": "(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if is is the best one",
          "_oracleData": "custom data for oracle initialization"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "defaultSiloConfig": {
        "details": "Default values for SiloConfig. Used if values are not configured manually."
      },
      "entryFee": {
        "details": "one time protocol fee for opening a borrow position in basis points"
      },
      "protocolLiquidationFee": {
        "details": "protocol share in liquidation profit"
      },
      "protocolShareFee": {
        "details": "protocol revenue share in interest paid"
      },
      "silo": {
        "details": "maps token address to silo address, token => silo"
      },
      "siloConfigs": {
        "details": "maps silo address to its config"
      },
      "siloReverse": {
        "details": "maps token address to silo address, silo => token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 822,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10714,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 10716,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 10487,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "guardedLaunch",
        "offset": 20,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 10489,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "permissionedSiloCreation",
        "offset": 21,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 10491,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "limitedMaxLiquidity",
        "offset": 22,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 10494,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "defaultSiloLimitConfig",
        "offset": 0,
        "slot": "53",
        "type": "t_struct(SiloLimitConfig)10478_storage"
      },
      {
        "astId": 10499,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "siloLimitConfigs",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(SiloLimitConfig)10478_storage)"
      },
      {
        "astId": 7799,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "defaultSiloConfig",
        "offset": 0,
        "slot": "56",
        "type": "t_struct(SiloConfig)7790_storage"
      },
      {
        "astId": 7802,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "bridgeAsset",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 7806,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "entryFee",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 7810,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "protocolShareFee",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 7813,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 7816,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "bridgePool",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 7819,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "oracle",
        "offset": 0,
        "slot": "64",
        "type": "t_address"
      },
      {
        "astId": 7822,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "router",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      },
      {
        "astId": 7828,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "silo",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7833,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "siloReverse",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7839,
        "contract": "contracts/SiloFactory.sol:SiloFactory",
        "label": "siloConfigs",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_struct(SiloConfig)7790_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(SiloConfig)7790_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SiloFactory.SiloConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SiloConfig)7790_storage"
      },
      "t_mapping(t_address,t_struct(SiloLimitConfig)10478_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GuardedLaunch.SiloLimitConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SiloLimitConfig)10478_storage"
      },
      "t_struct(SiloConfig)7790_storage": {
        "encoding": "inplace",
        "label": "struct SiloFactory.SiloConfig",
        "members": [
          {
            "astId": 7784,
            "contract": "contracts/SiloFactory.sol:SiloFactory",
            "label": "maxLoanToValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7787,
            "contract": "contracts/SiloFactory.sol:SiloFactory",
            "label": "liquidationThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7789,
            "contract": "contracts/SiloFactory.sol:SiloFactory",
            "label": "virtualBalances",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SiloLimitConfig)10478_storage": {
        "encoding": "inplace",
        "label": "struct GuardedLaunch.SiloLimitConfig",
        "members": [
          {
            "astId": 10475,
            "contract": "contracts/SiloFactory.sol:SiloFactory",
            "label": "maxDeposits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10477,
            "contract": "contracts/SiloFactory.sol:SiloFactory",
            "label": "maxBridgeDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}