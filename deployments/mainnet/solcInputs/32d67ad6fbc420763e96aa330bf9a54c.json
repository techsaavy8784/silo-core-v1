{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/external/aave/incentives/base/BaseIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {DistributionTypes} from \"../../lib/DistributionTypes.sol\";\nimport {DistributionManager} from \"./DistributionManager.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IAaveIncentivesController} from \"../../interfaces/IAaveIncentivesController.sol\";\n\n/**\n * @title BaseIncentivesController\n * @notice Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\n * @author Aave\n  */\nabstract contract BaseIncentivesController is IAaveIncentivesController, DistributionManager {\n    uint256 public constant REVISION = 1;\n\n    address public immutable override REWARD_TOKEN; // solhint-disable-line var-name-mixedcase\n\n    mapping(address => uint256) internal _usersUnclaimedRewards;\n\n    // this mapping allows whitelisted addresses to claim on behalf of others\n    // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining\n    // rewards\n    mapping(address => address) internal _authorizedClaimers;\n\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\n        if (_authorizedClaimers[user] != claimer) revert ClaimerUnauthorized();\n\n        _;\n    }\n\n    error InvalidConfiguration();\n    error IndexOverflowAtEmissionsPerSecond();\n    error InvalidToAddress();\n    error InvalidUserAddress();\n    error ClaimerUnauthorized();\n\n    constructor(IERC20 rewardToken, address emissionManager) DistributionManager(emissionManager) {\n        REWARD_TOKEN = address(rewardToken);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\n        external\n        override\n        onlyEmissionManager\n    {\n        if (assets.length != emissionsPerSecond.length) revert InvalidConfiguration();\n\n        DistributionTypes.AssetConfigInput[] memory assetsConfig =\n            new DistributionTypes.AssetConfigInput[](assets.length);\n\n        for (uint256 i = 0; i < assets.length;) {\n            if (uint104(emissionsPerSecond[i]) != emissionsPerSecond[i]) revert IndexOverflowAtEmissionsPerSecond();\n\n            assetsConfig[i].underlyingAsset = assets[i];\n            assetsConfig[i].emissionPerSecond = uint104(emissionsPerSecond[i]);\n            assetsConfig[i].totalStaked = IERC20(assets[i]).totalSupply();\n\n            unchecked { i++; }\n        }\n\n        _configureAssets(assetsConfig);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function handleAction(\n        address user,\n        uint256 totalSupply,\n        uint256 userBalance\n    ) public override {\n        uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\n\n        if (accruedRewards != 0) {\n            _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user] + accruedRewards;\n            emit RewardsAccrued(user, accruedRewards);\n        }\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getRewardsBalance(address[] calldata assets, address user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\n\n        DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\n\n        for (uint256 i = 0; i < assets.length;) {\n            userState[i].underlyingAsset = assets[i];\n            (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\n\n            unchecked { i++; }\n        }\n\n        unclaimedRewards = unclaimedRewards + _getUnclaimedRewards(user, userState);\n        return unclaimedRewards;\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external override returns (uint256) {\n        if (to == address(0)) revert InvalidToAddress();\n\n        return _claimRewards(assets, amount, msg.sender, msg.sender, to);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\n        if (user == address(0)) revert InvalidUserAddress();\n        if (to == address(0)) revert InvalidToAddress();\n\n        return _claimRewards(assets, amount, msg.sender, user, to);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount)\n        external\n        override\n        returns (uint256)\n    {\n        return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function setClaimer(address user, address caller) external override onlyEmissionManager {\n        _authorizedClaimers[user] = caller;\n        emit ClaimerSet(user, caller);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getClaimer(address user) external view override returns (address) {\n        return _authorizedClaimers[user];\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getUserUnclaimedRewards(address _user) external view override returns (uint256) {\n        return _usersUnclaimedRewards[_user];\n    }\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function _claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address claimer,\n        address user,\n        address to\n    ) internal returns (uint256) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\n\n        if (amount > unclaimedRewards) {\n            DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\n\n            for (uint256 i = 0; i < assets.length;) {\n                userState[i].underlyingAsset = assets[i];\n                (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\n\n                unchecked { i++; }\n            }\n\n            uint256 accruedRewards = _claimRewards(user, userState);\n\n            if (accruedRewards != 0) {\n                unclaimedRewards = unclaimedRewards + accruedRewards;\n                emit RewardsAccrued(user, accruedRewards);\n            }\n        }\n\n        if (unclaimedRewards == 0) {\n            return 0;\n        }\n\n        uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\n        unchecked { _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; } // Safe due to the previous line\n\n        _transferRewards(to, amountToClaim);\n        emit RewardsClaimed(user, to, claimer, amountToClaim);\n\n        return amountToClaim;\n    }\n\n    /**\n     * @dev Abstract function to transfer rewards to the desired account\n     * @param to Account address to send the rewards\n     * @param amount Amount of rewards to transfer\n     */\n    function _transferRewards(address to, uint256 amount) internal virtual;\n\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\n        internal\n        view\n        virtual\n        returns (uint256 userBalance, uint256 totalSupply);\n}\n"
    },
    "contracts/external/aave/incentives/base/DistributionManager.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {IAaveDistributionManager} from \"../../interfaces/IAaveDistributionManager.sol\";\nimport {DistributionTypes} from \"../../lib/DistributionTypes.sol\";\n\n/**\n * @title DistributionManager\n * @notice Accounting contract to manage multiple staking distributions\n * @author Aave\n */\ncontract DistributionManager is IAaveDistributionManager {\n    struct AssetData {\n        uint104 emissionPerSecond;\n        uint104 index;\n        uint40 lastUpdateTimestamp;\n        mapping(address => uint256) users;\n    }\n\n    address public immutable EMISSION_MANAGER; // solhint-disable-line var-name-mixedcase\n\n    uint8 public constant PRECISION = 18;\n    uint256 public constant TEN_POW_PRECISION = 10 ** PRECISION;\n\n    mapping(address => AssetData) public assets;\n\n    uint256 internal _distributionEnd;\n\n    error OnlyEmissionManager();\n    error IndexOverflow();\n\n    modifier onlyEmissionManager() {\n        if (msg.sender != EMISSION_MANAGER) revert OnlyEmissionManager();\n\n        _;\n    }\n\n    constructor(address emissionManager) {\n        EMISSION_MANAGER = emissionManager;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function setDistributionEnd(uint256 distributionEnd) external override onlyEmissionManager {\n        _distributionEnd = distributionEnd;\n        emit DistributionEndUpdated(distributionEnd);\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getDistributionEnd() external view override returns (uint256) {\n        return _distributionEnd;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function DISTRIBUTION_END() external view override returns (uint256) { // solhint-disable-line func-name-mixedcase\n        return _distributionEnd;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getUserAssetData(address user, address asset) public view override returns (uint256) {\n        return assets[asset].users[user];\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getAssetData(address asset) public view override returns (uint256, uint256, uint256) {\n        return (assets[asset].index, assets[asset].emissionPerSecond, assets[asset].lastUpdateTimestamp);\n    }\n\n    /**\n     * @dev Configure the assets for a specific emission\n     * @param assetsConfigInput The array of each asset configuration\n     */\n    function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput) internal {\n        for (uint256 i = 0; i < assetsConfigInput.length;) {\n            AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\n\n            _updateAssetStateInternal(\n                assetsConfigInput[i].underlyingAsset,\n                assetConfig,\n                assetsConfigInput[i].totalStaked\n            );\n\n            assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\n\n            emit AssetConfigUpdated(\n                assetsConfigInput[i].underlyingAsset,\n                assetsConfigInput[i].emissionPerSecond\n            );\n\n            unchecked { i++; }\n        }\n    }\n\n    /**\n     * @dev Updates the state of one distribution, mainly rewards index and timestamp\n     * @param asset The address of the asset being updated\n     * @param assetConfig Storage pointer to the distribution's config\n     * @param totalStaked Current total of staked assets for this distribution\n     * @return The new distribution index\n     */\n    function _updateAssetStateInternal(\n        address asset,\n        AssetData storage assetConfig,\n        uint256 totalStaked\n    ) internal returns (uint256) {\n        uint256 oldIndex = assetConfig.index;\n        uint256 emissionPerSecond = assetConfig.emissionPerSecond;\n        uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\n\n        if (block.timestamp == lastUpdateTimestamp) {\n            return oldIndex;\n        }\n\n        uint256 newIndex = _getAssetIndex(oldIndex, emissionPerSecond, lastUpdateTimestamp, totalStaked);\n\n        if (newIndex != oldIndex) {\n            if (uint104(newIndex) != newIndex) revert IndexOverflow();\n\n            //optimization: storing one after another saves one SSTORE\n            assetConfig.index = uint104(newIndex);\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\n            emit AssetIndexUpdated(asset, newIndex);\n        } else {\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\n        }\n\n        return newIndex;\n    }\n\n    /**\n     * @dev Updates the state of an user in a distribution\n     * @param user The user's address\n     * @param asset The address of the reference asset of the distribution\n     * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\n     * @param totalStaked Total tokens staked in the distribution\n     * @return The accrued rewards for the user until the moment\n     */\n    function _updateUserAssetInternal(\n        address user,\n        address asset,\n        uint256 stakedByUser,\n        uint256 totalStaked\n    ) internal returns (uint256) {\n        AssetData storage assetData = assets[asset];\n        uint256 userIndex = assetData.users[user];\n        uint256 accruedRewards = 0;\n\n        uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\n\n        if (userIndex != newIndex) {\n            if (stakedByUser != 0) {\n                accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\n            }\n\n            assetData.users[user] = newIndex;\n            emit UserIndexUpdated(user, asset, newIndex);\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\n     * @param user The address of the user\n     * @param stakes List of structs of the user data related with his stake\n     * @return The accrued rewards for the user until the moment\n     */\n    function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n        internal\n        returns (uint256)\n    {\n        uint256 accruedRewards = 0;\n\n        for (uint256 i = 0; i < stakes.length;) {\n            accruedRewards = accruedRewards + _updateUserAssetInternal(\n                    user,\n                    stakes[i].underlyingAsset,\n                    stakes[i].stakedByUser,\n                    stakes[i].totalStaked\n                );\n\n            unchecked { i++; }\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Return the accrued rewards for an user over a list of distribution\n     * @param user The address of the user\n     * @param stakes List of structs of the user data related with his stake\n     * @return The accrued rewards for the user until the moment\n     */\n    function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 accruedRewards = 0;\n\n        for (uint256 i = 0; i < stakes.length;) {\n            AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\n\n            uint256 assetIndex = _getAssetIndex(\n                assetConfig.index,\n                assetConfig.emissionPerSecond,\n                assetConfig.lastUpdateTimestamp,\n                stakes[i].totalStaked\n            );\n\n            accruedRewards = accruedRewards + _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user]);\n\n            unchecked { i++; }\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Internal function for the calculation of user's rewards on a distribution\n     * @param principalUserBalance Amount staked by the user on a distribution\n     * @param reserveIndex Current index of the distribution\n     * @param userIndex Index stored for the user, representation his staking moment\n     * @return rewards The rewards\n     */\n    function _getRewards(\n        uint256 principalUserBalance,\n        uint256 reserveIndex,\n        uint256 userIndex\n    ) internal pure returns (uint256 rewards) {\n        rewards = principalUserBalance * (reserveIndex - userIndex);\n        unchecked { rewards /= TEN_POW_PRECISION; }\n    }\n\n    /**\n     * @dev Calculates the next value of an specific distribution index, with validations\n     * @param currentIndex Current index of the distribution\n     * @param emissionPerSecond Representing the total rewards distributed per second per asset unit,\n     * on the distribution\n     * @param lastUpdateTimestamp Last moment this distribution was updated\n     * @param totalBalance of tokens considered for the distribution\n     * @return newIndex The new index.\n     */\n    function _getAssetIndex(\n        uint256 currentIndex,\n        uint256 emissionPerSecond,\n        uint128 lastUpdateTimestamp,\n        uint256 totalBalance\n    ) internal view returns (uint256 newIndex) {\n        uint256 distributionEnd = _distributionEnd;\n\n        if (\n            emissionPerSecond == 0 ||\n            totalBalance == 0 ||\n            lastUpdateTimestamp == block.timestamp ||\n            lastUpdateTimestamp >= distributionEnd\n        ) {\n            return currentIndex;\n        }\n\n        uint256 currentTimestamp = block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\n        uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\n\n        newIndex = emissionPerSecond * timeDelta * TEN_POW_PRECISION;\n        unchecked { newIndex /= totalBalance; }\n        newIndex += currentIndex;\n    }\n}\n"
    },
    "contracts/external/aave/interfaces/IAaveDistributionManager.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {DistributionTypes} from \"../lib/DistributionTypes.sol\";\n\ninterface IAaveDistributionManager {\n  \n    event AssetConfigUpdated(address indexed asset, uint256 emission);\n    event AssetIndexUpdated(address indexed asset, uint256 index);\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\n    event DistributionEndUpdated(uint256 newDistributionEnd);\n\n    /**\n     * @dev Sets the end date for the distribution\n     * @param distributionEnd The end date timestamp\n     */\n    function setDistributionEnd(uint256 distributionEnd) external;\n\n    /**\n     * @dev Gets the end date for the distribution\n     * @return The end of the distribution\n     */\n    function getDistributionEnd() external view returns (uint256);\n\n    /**\n     * @dev for backwards compatibility with the previous DistributionManager used\n     * @return The end of the distribution\n     */\n    function DISTRIBUTION_END() external view returns(uint256); // solhint-disable-line func-name-mixedcase\n\n    /**\n     * @dev Returns the data of an user on a distribution\n     * @param user Address of the user\n     * @param asset The address of the reference asset of the distribution\n     * @return The new index\n     */\n    function getUserAssetData(address user, address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the configuration of the distribution for a certain asset\n     * @param asset The address of the reference asset of the distribution\n     * @return The asset index, the emission per second and the last updated timestamp\n     */\n    function getAssetData(address asset) external view returns (uint256, uint256, uint256);\n}\n"
    },
    "contracts/external/aave/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {IAaveDistributionManager} from \"../interfaces/IAaveDistributionManager.sol\";\n\ninterface IAaveIncentivesController is IAaveDistributionManager {\n    event RewardsAccrued(address indexed user, uint256 amount);\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        address indexed claimer,\n        uint256 amount\n    );\n\n    event ClaimerSet(address indexed user, address indexed claimer);\n\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n     * @param user The address of the user\n     * @param claimer The address of the claimer\n     */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n     * @param assets The assets to incentivize\n     * @param emissionsPerSecond The emission for each asset\n     */\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n     * @param asset The address of the user\n     * @param userBalance The balance of the user of the asset in the lending pool\n     * @param totalSupply The total supply of the asset in the lending pool\n     */\n    function handleAction(\n        address asset,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Claims reward for an user to the desired address, on all the assets of the lending pool,\n     * accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending\n     * rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @return Rewards claimed\n     */\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n     * @param user The address of the user\n     * @return The claimer address\n     */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     */\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address); // solhint-disable-line func-name-mixedcase\n}\n"
    },
    "contracts/external/aave/lib/DistributionTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nlibrary DistributionTypes {\n    struct AssetConfigInput {\n        uint104 emissionPerSecond;\n        uint256 totalStaked;\n        address underlyingAsset;\n    }\n\n    struct UserStakeInput {\n        address underlyingAsset;\n        uint256 stakedByUser;\n        uint256 totalStaked;\n    }\n}\n"
    },
    "contracts/incentives/SiloIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {BaseIncentivesController} from \"../external/aave/incentives/base/BaseIncentivesController.sol\";\nimport \"../interfaces/INotificationReceiver.sol\";\n\n\n/**\n * @title SiloIncentivesController\n * @notice Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset.\n * The contract stakes the rewards before redistributing them to the Aave protocol participants.\n * The reference staked token implementation is at https://github.com/aave/aave-stake-v2\n * @author Aave\n */\ncontract SiloIncentivesController is BaseIncentivesController, INotificationReceiver {\n    using SafeERC20 for IERC20;\n\n    constructor(IERC20 rewardToken, address emissionManager) BaseIncentivesController(rewardToken, emissionManager) {}\n\n    /**\n     * @dev Silo share token event handler\n     */\n    function onAfterTransfer(address /* _token */, address _from, address _to, uint256 _amount) external {\n        if (assets[msg.sender].lastUpdateTimestamp == 0 || _from == _to) {\n            // optimisation check, if we never configured rewards distribution, then no need for updating any data\n            return;\n        }\n\n        uint256 totalSupplyBefore = IERC20(msg.sender).totalSupply();\n\n        if (_from == address(0x0)) {\n            // we minting tokens, so supply before was less\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { totalSupplyBefore -= _amount; }\n        } else if (_to == address(0x0)) {\n            // we burning, so supply before was more\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { totalSupplyBefore += _amount; }\n        }\n\n        // here user either transferring token to someone else or burning tokens\n        // user state will be new, because this event is `onAfterTransfer`\n        // we need to recreate status before event in order to automatically calculate rewards\n        if (_from != address(0x0)) {\n            uint256 balanceBefore;\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_from) + _amount; }\n            handleAction(_from, totalSupplyBefore, balanceBefore);\n        }\n\n        // we have to checkout also user `_to`\n        if (_to != address(0x0)) {\n            uint256 balanceBefore;\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_to) - _amount; }\n            handleAction(_to, totalSupplyBefore, balanceBefore);\n        }\n    }\n\n    /// @dev it will transfer all balance of reward token to emission manager wallet\n    function rescueRewards() external onlyEmissionManager {\n        IERC20(REWARD_TOKEN).safeTransfer(msg.sender, IERC20(REWARD_TOKEN).balanceOf(address(this)));\n    }\n\n    function notificationReceiverPing() external pure returns (bytes4) {\n        return this.notificationReceiverPing.selector;\n    }\n\n    function _transferRewards(address to, uint256 amount) internal override {\n        IERC20(REWARD_TOKEN).safeTransfer(to, amount);\n    }\n\n    /**\n     * @dev in Silo, there is no scale, we simply using balance and total supply. Original method name is used here\n     * to keep as much of original code.\n     */\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\n        internal\n        virtual\n        view\n        override\n        returns (uint256 userBalance, uint256 totalSupply)\n    {\n        userBalance = IERC20(_asset).balanceOf(_user);\n        totalSupply = IERC20(_asset).totalSupply();\n    }\n}\n"
    },
    "contracts/interfaces/INotificationReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @title Common interface for Silo Incentive Contract\ninterface INotificationReceiver {\n    /// @dev Informs the contract about token transfer\n    /// @param _token address of the token that was transferred\n    /// @param _from sender\n    /// @param _to receiver\n    /// @param _amount amount that was transferred\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\n\n    /// @dev Sanity check function\n    /// @return always true\n    function notificationReceiverPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title Common interface for Silo Price Providers\ninterface IPriceProvider {\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset.\n    /// It unifies all tokens decimal to 18, examples:\n    /// - if asses == quote it returns 1e18\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\n    /// @param _asset address of an asset for which to read price\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\n    /// Some providers implementations need time to \"build\" buffer for TWAP price,\n    /// so price may not be available yet but this method will return true.\n    /// @param _asset asset in question\n    /// @return TRUE if asset has been setup, otherwise false\n    function assetSupported(address _asset) external view returns (bool);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\n    /// @dev this can save us from simple human errors, in case we use invalid address\n    /// but this should NOT be treated as security check\n    /// @return always true\n    function priceProviderPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\ninterface IPriceProvidersRepository {\n    /// @notice Emitted when price provider is added\n    /// @param newPriceProvider new price provider address\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\n\n    /// @notice Emitted when price provider is removed\n    /// @param priceProvider removed price provider address\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\n\n    /// @notice Emitted when asset is assigned to price provider\n    /// @param asset assigned asset   address\n    /// @param priceProvider price provider address\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\n\n    /// @notice Register new price provider\n    /// @param _priceProvider address of price provider\n    function addPriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Unregister price provider\n    /// @param _priceProvider address of price provider to be removed\n    function removePriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Sets price provider for asset\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\n    /// @param _asset address of an asset for which price provider will be used\n    /// @param _priceProvider address of price provider\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\n\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset\n    /// @param _asset address of an asset for which to read price\n    /// @return price TWAP price of a token with 18 decimals\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @notice Gets price provider assigned to an asset\n    /// @param _asset address of an asset for which to get price provider\n    /// @return priceProvider address of price provider\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Gets manager role address\n    /// @return manager role address\n    function manager() external view returns (address);\n\n    /// @notice Checks if providers are available for an asset\n    /// @param _asset asset address to check\n    /// @return returns TRUE if price feed is ready, otherwise false\n    function providersReadyForAsset(address _asset) external view returns (bool);\n\n    /// @notice Returns true if address is a registered price provider\n    /// @param _provider address of price provider to be removed\n    /// @return true if address is a registered price provider, otherwise false\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\n\n    /// @notice Gets number of price providers registered\n    /// @return number of price providers registered\n    function providersCount() external view returns (uint256);\n\n    /// @notice Gets an array of price providers\n    /// @return array of price providers\n    function providerList() external view returns (address[] memory);\n\n    /// @notice Sanity check function\n    /// @return returns always TRUE\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/lib/Ping.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n\nlibrary Ping {\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\n    }\n}\n"
    },
    "contracts/lib/TokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n\nlibrary TokenHelper {\n    uint256 private constant _BYTES32_SIZE = 32;\n\n    error TokenIsNotAContract();\n\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\n\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\n        // we assume there are no decimals and use 0.\n        if (!hasMetadata) {\n            return 0;\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Returns the symbol for the provided ERC20 token.\n    /// An empty string is returned if the call to the token didn't succeed.\n    /// @param _token address of the token to get the symbol for\n    /// @return assetSymbol the token symbol\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\n\n        if (!hasMetadata || data.length == 0) {\n            return \"?\";\n        } else if (data.length == _BYTES32_SIZE) {\n            return string(removeZeros(data));\n        } else {\n            return abi.decode(data, (string));\n        }\n    }\n\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\n    /// @param _data byte array from which to remove zeroes\n    /// @return result byte array with zeroes removed \n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\n        uint256 n = _data.length;\n\n        unchecked {\n            for (uint256 i; i < n; i++) {\n                if (_data[i] == 0) continue;\n\n                result = abi.encodePacked(result, _data[i]);\n            }\n        }\n    }\n\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\n\n        (bool success, bytes memory result) = _token.staticcall(_data);\n\n        // If the call reverted we assume the token doesn't follow the metadata extension\n        if (!success) {\n            return (false, \"\");\n        }\n\n        return (true, result);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9.0;\n\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\ninterface IMagician {\n    /// @notice Operates to unwrap an `_asset`\n    /// @param _asset Asset to be unwrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the `tokenOut` that we received\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n\n    /// @notice Performs operation opposit to `towardsNative`\n    /// @param _asset Asset to be wrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/balancer/IAsset.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/balancer/IVaultLike.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\npragma solidity ^0.8.0;\n\nimport \"./IAsset.sol\";\n\n// solhint-disable named-return-values\n\n/**\n * @dev Interface for the Vault core contract - with methods required for the PT tokens liquidation.\n */\ninterface IVaultLike {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/IPMarket.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IStandardizedYield.sol\";\nimport \"./IPPrincipalToken.sol\";\nimport \"./IPYieldToken.sol\";\n\n// solhint-disable var-name-mixedcase\n\ninterface IPMarket {\n    function swapExactPtForSy(\n        address receiver,\n        uint256 exactPtIn,\n        bytes calldata data\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\n\n    function swapSyForExactPt(\n        address receiver,\n        uint256 exactPtOut,\n        bytes calldata data\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\n\n    function readTokens()\n        external\n        view\n        returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/IPPrincipalToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IPPrincipalToken {\n    function transfer(address user, uint256 amount) external;\n    function isExpired() external view returns (bool);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/IPYieldToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IPYieldToken {\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/interfaces/IStandardizedYield.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IStandardizedYield {\n    function redeem(\n        address receiver,\n        uint256 amountSharesToRedeem,\n        address tokenOut,\n        uint256 minTokenOut,\n        bool burnFromInternalBalance\n    ) external returns (uint256 amountTokenOut);\n}\n"
    },
    "contracts/liquidation/magicians/pendle/PendleBlancerMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IMagician.sol\";\nimport \"./PendleMagician.sol\";\nimport \"./interfaces/balancer/IVaultLike.sol\";\nimport \"./interfaces/balancer/IAsset.sol\";\n\nabstract contract PendleBlancerMagician is PendleMagician, IMagician {\n    // solhint-disable\n    address public immutable UNDERLYING;\n    address public immutable WETH;\n    address public immutable VAULT;\n    bytes32 public immutable POOL_ID;\n    // solhint-enable\n\n    constructor(\n        address _asset,\n        address _market,\n        address _weth,\n        address _underlying,\n        address _vault,\n        bytes32 _poolId\n    ) PendleMagician(_asset, _market) {\n        WETH = _weth;\n        UNDERLYING = _underlying;\n        VAULT = _vault;\n        POOL_ID = _poolId;\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address asset, uint256 amount) {\n        if (_asset != address(PENDLE_TOKEN)) revert InvalidAsset();\n\n        asset = WETH;\n        uint256 amountUnderlying = _sellPtForUnderlying(_amount, UNDERLYING);\n\n        IERC20(UNDERLYING).approve(VAULT, amountUnderlying);\n\n        amount = _swapViaBalancer(amountUnderlying);\n    }\n\n    /// @inheritdoc IMagician\n    // solhint-disable-next-line named-return-values\n    function towardsAsset(address, uint256) external pure returns (address, uint256) {\n        revert Unsupported();\n    }\n\n    function _swapViaBalancer(uint256 _amountIn) internal returns (uint256 amountWeth) {\n        IVaultLike.SingleSwap memory singleSwap = IVaultLike.SingleSwap(\n            POOL_ID, IVaultLike.SwapKind.GIVEN_IN, IAsset(UNDERLYING), IAsset(WETH), _amountIn, \"\"\n        );\n\n        IVaultLike.FundManagement memory funds = IVaultLike.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        uint256 limit = 1;\n        amountWeth = IVaultLike(VAULT).swap(singleSwap, funds, limit, block.timestamp);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/pendle/PendleMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./interfaces/IStandardizedYield.sol\";\nimport \"./interfaces/IPPrincipalToken.sol\";\nimport \"./interfaces/IPYieldToken.sol\";\nimport \"./interfaces/IPMarket.sol\";\n\nabstract contract PendleMagician {\n    // solhint-disable\n    address public immutable PENDLE_TOKEN;\n    address public immutable PENDLE_MARKET;\n    // solhint-enable\n\n    bytes internal constant _EMPTY_BYTES = abi.encode();\n\n    error InvalidAsset();\n    error Unsupported();\n\n    constructor(address _asset, address _market) {\n        PENDLE_TOKEN = _asset;\n        PENDLE_MARKET = _market;\n    }\n\n    function _sellPtForUnderlying(uint256 _netPtIn, address _tokenOut) internal returns (uint256 netTokenOut) {\n        // solhint-disable-next-line var-name-mixedcase\n        (IStandardizedYield SY, IPPrincipalToken PT, IPYieldToken YT) = IPMarket(PENDLE_MARKET)\n            .readTokens();\n\n        uint256 netSyOut;\n        if (PT.isExpired()) {\n            PT.transfer(address(YT), _netPtIn);\n            netSyOut = YT.redeemPY(address(SY));\n        } else {\n            // safeTransfer not required\n            PT.transfer(PENDLE_MARKET, _netPtIn);\n            (netSyOut, ) = IPMarket(PENDLE_MARKET).swapExactPtForSy(\n                address(SY), // better gas optimization to transfer SY directly to itself and burn\n                _netPtIn,\n                _EMPTY_BYTES\n            );\n        }\n\n        // solhint-disable-next-line func-named-parameters\n        netTokenOut = SY.redeem(address(this), netSyOut, _tokenOut, 0, true);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/pendle/PendlePTrsETH27JUN2024MagicianEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./PendleBlancerMagician.sol\";\n\ncontract PendlePTrsETH27JUN2024MagicianEth is PendleBlancerMagician {\n    constructor() PendleBlancerMagician(\n        0xB05cABCd99cf9a73b19805edefC5f67CA5d1895E, // PT Token\n        0x4f43c77872Db6BA177c270986CD30c3381AF37Ee, // PT Market\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\n        0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7, // rsETH\n        0xBA12222222228d8Ba445958a75a0704d566BF2C8, // Balancer Vault\n        0x58aadfb1afac0ad7fca1148f3cde6aedf5236b6d00000000000000000000067f // Pool ID\n    ) {}\n}\n"
    },
    "contracts/priceProviders/IndividualPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PriceProvider.sol\";\nimport \"./../lib/TokenHelper.sol\";\n\n/// @title IndividualPriceProvider\n/// @notice IndividualPriceProvider\n/// @custom:security-contact security@silo.finance\nabstract contract IndividualPriceProvider is PriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable ASSET;\n\n    error InvalidAssetAddress();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _asset,\n        string memory _symbol\n    ) PriceProvider(_priceProvidersRepository) {\n        if (keccak256(abi.encode(TokenHelper.symbol(_asset))) != keccak256(abi.encode(_symbol))) {\n            revert InvalidAssetAddress();\n        }\n\n        ASSET = _asset;\n    }\n\n    /// @notice Only ASSET token is supported, false otherwise.\n    /// @param _asset address of an asset\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        return _asset == ASSET;\n    }\n}\n"
    },
    "contracts/priceProviders/pendleTokens/interfaces/IPPtOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IPPtOracle {\n    event SetBlockCycleNumerator(uint16 newBlockCycleNumerator);\n\n    function getPtToAssetRate(\n        address market,\n        uint32 duration\n    ) external view returns (uint256 ptToAssetRate);\n\n    function getOracleState(\n        address market,\n        uint32 duration\n    )\n        external\n        view\n        returns (\n            bool increaseCardinalityRequired,\n            uint16 cardinalityRequired,\n            bool oldestObservationSatisfied\n        );\n}\n"
    },
    "contracts/priceProviders/pendleTokens/PendleEzETH270624PriceProviderArb.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PendleEzETHPriceProvider.sol\";\n\ncontract PendleEzETH270624PriceProviderArb is PendleEzETHPriceProvider {\n    address public constant EZETH = 0x2416092f143378750bb29b79eD961ab195CcEea5;\n\n    constructor(IPriceProvidersRepository _priceProvidersRepository) PendlePriceProvider(\n        0x7e16e4253CE4a1C96422a9567B23b4b5Ebc207F1, // PT Oracle\n        1800, // twap duration\n        0x60712e3C9136CF411C561b4E948d4d26637561e7, // PT Market\n        _priceProvidersRepository,\n        0x8EA5040d423410f1fdc363379Af88e1DB5eA1C34, // PT Token\n        \"PT-ezETH-27JUN2024\" // PT token symbol\n    ) {}\n\n    function ezETH() public pure override returns (address asset) {\n        asset = EZETH;\n    }\n}\n"
    },
    "contracts/priceProviders/pendleTokens/PendleEzETHPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PendlePriceProvider.sol\";\n\nabstract contract PendleEzETHPriceProvider is PendlePriceProvider {\n    function getPrice(address _asset) public view virtual returns (uint256 price) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        // Pendle PT-ezETH-..../ezETH conversion rate\n        uint256 ratePRtoEZETH = getPtToAssetRate(twapDuration);\n\n        // RedStone ezETH/ETH conversion rate\n        uint256 rateEZETHtoETH = priceProvidersRepository.getPrice(ezETH());\n\n        price = ratePRtoEZETH * rateEZETHtoETH;\n        unchecked { price = price / 1e18; }\n\n        // Zero price is unacceptable\n        if (price == 0) revert ZeroPrice();\n    }\n\n    function ezETH() public pure virtual returns (address asset) {}\n}\n"
    },
    "contracts/priceProviders/pendleTokens/PendlePriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../IndividualPriceProvider.sol\";\nimport \"./interfaces/IPPtOracle.sol\";\n\n/// @title Pendle token price provider\n/// @dev https://docs.pendle.finance/Developers/Integration/PTOracle\nabstract contract PendlePriceProvider is IndividualPriceProvider {\n    // solhint-disable\n    address public immutable PT_ORACLE;\n    address public immutable MARKET;\n    // solhint-enable\n\n    uint32 public twapDuration;\n\n    event TwapDurationUpdated(uint256 twapDuration);\n\n    error OracleNotReady(bool increaseCardinalityRequired, bool oldestObservationSatisfied);\n    error AssetNotSupported();\n    error ZeroPrice();\n\n    constructor(\n        address _ptOracle,\n        uint32 _twapDuration,\n        address _market,\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _asset,\n        string memory _symbol\n    ) IndividualPriceProvider(\n        _priceProvidersRepository,\n        _asset,\n        _symbol\n    )\n    {\n        PT_ORACLE = _ptOracle;\n        MARKET = _market;\n\n        _updateTwapDuration(_twapDuration);\n    }\n\n    /// @notice Allow's to update a TWAP duration\n    /// @param _newTwapDuration The new TWAP duration that should be used in the price provider\n    function setTwapDuration(uint32 _newTwapDuration) external virtual onlyManager() {\n        _updateTwapDuration(_newTwapDuration);\n    }\n\n    /// @notice Resolve oracle state\n    function getOracleState(uint32 _newTwapDuration)\n        public\n        view\n        virtual\n        returns (bool increaseCardinalityRequired, bool oldestObservationSatisfied)\n    {\n        (increaseCardinalityRequired, ,oldestObservationSatisfied) = IPPtOracle(PT_ORACLE)\n            .getOracleState(MARKET, _newTwapDuration);\n    }\n\n    /// @notice Get PT to asset rate\n    function getPtToAssetRate(uint32 _twapDuration) public view virtual returns (uint256 ratePRtoEETH) {\n        ratePRtoEETH = IPPtOracle(PT_ORACLE).getPtToAssetRate(MARKET, _twapDuration);\n    }\n\n    /// @notice Update a TWAP duration\n    /// @param _newTwapDuration The new TWAP duration that should be used in the price provider\n    function _updateTwapDuration(uint32 _newTwapDuration) internal {\n        (bool increaseCardinalityRequired, bool oldestObservationSatisfied) = getOracleState(_newTwapDuration);\n\n        if (increaseCardinalityRequired || !oldestObservationSatisfied) {\n            revert OracleNotReady(increaseCardinalityRequired, oldestObservationSatisfied);\n        }\n\n        twapDuration = _newTwapDuration;\n\n        emit TwapDurationUpdated(_newTwapDuration);\n    }\n}\n"
    },
    "contracts/priceProviders/pendleTokens/PendlePTrsETH27JUN2024PriceProviderEth.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PendleTwoHopPriceProvider.sol\";\n\ncontract PendlePTrsETH27JUN2024PriceProviderEth is PendleTwoHopPriceProvider {\n    address public constant RSETH = 0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;\n\n    constructor(IPriceProvidersRepository _priceProvidersRepository) PendlePriceProvider(\n        0x66a1096C6366b2529274dF4f5D8247827fe4CEA8, // PT Oracle\n        1800, // twap duration\n        0x4f43c77872Db6BA177c270986CD30c3381AF37Ee, // PT Market\n        _priceProvidersRepository,\n        0xB05cABCd99cf9a73b19805edefC5f67CA5d1895E, // PT Token\n        \"PT-rsETH-27JUN2024\" // PT token symbol\n    ) {}\n\n    function ptUnderlyingToken() public pure override returns (address asset) {\n        asset = RSETH;\n    }\n}\n"
    },
    "contracts/priceProviders/pendleTokens/PendleTwoHopPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PendlePriceProvider.sol\";\n\nabstract contract PendleTwoHopPriceProvider is PendlePriceProvider {\n    function getPrice(address _asset) public view virtual returns (uint256 price) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        // Pendle PT-...-.../<underlying> conversion rate\n        uint256 ratePTtoUndelying = getPtToAssetRate(twapDuration);\n\n        // <underlying>/ETH conversion rate\n        uint256 rateUnderlyingToETH = priceProvidersRepository.getPrice(ptUnderlyingToken());\n\n        price = ratePTtoUndelying * rateUnderlyingToETH;\n        unchecked { price = price / 1e18; }\n\n        // Zero price is unacceptable\n        if (price == 0) revert ZeroPrice();\n    }\n\n    function ptUnderlyingToken() public pure virtual returns (address asset) {}\n}\n"
    },
    "contracts/priceProviders/PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"../lib/Ping.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title PriceProvider\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\n/// and multiple assets.\nabstract contract PriceProvider is IPriceProvider {\n    /// @notice PriceProvidersRepository address\n    IPriceProvidersRepository public immutable priceProvidersRepository;\n\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\n    address public immutable override quoteToken;\n\n    modifier onlyManager() {\n        if (priceProvidersRepository.manager() != msg.sender) revert(\"OnlyManager\");\n        _;\n    }\n\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\n        if (\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \n        ) {\n            revert(\"InvalidPriceProviderRepository\");\n        }\n\n        priceProvidersRepository = _priceProvidersRepository;\n        quoteToken = _priceProvidersRepository.quoteToken();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function priceProviderPing() external pure override returns (bytes4) {\n        return this.priceProviderPing.selector;\n    }\n\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\n        if (_errMsg.length > 0) {\n            assembly { // solhint-disable-line no-inline-assembly\n                revert(add(32, _errMsg), mload(_errMsg))\n            }\n        }\n\n        revert(_customErr);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}