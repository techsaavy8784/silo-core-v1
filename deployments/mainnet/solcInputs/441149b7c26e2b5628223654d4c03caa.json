{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-3.4.1/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-3.4.1/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/external/convex/interfaces/IBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2023 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IBooster.sol\npragma solidity 0.6.12;\n\ninterface IBooster {\n    function owner() external view returns(address);\n    function setVoteDelegate(address _voteDelegate) external;\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\n    function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\n}\n"
    },
    "contracts/external/convex/interfaces/IConvexDeposits.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IConvexDeposits.sol\npragma solidity 0.6.12;\n\ninterface IConvexDeposits {\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\n    function deposit(uint256 _amount, bool _lock, address _stakeAddress) external;\n}\n"
    },
    "contracts/external/convex/interfaces/ICvx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/ICvx.sol\npragma solidity 0.6.12;\n\ninterface ICvx {\n    function reductionPerCliff() external view returns(uint256);\n    function totalSupply() external view returns(uint256);\n    function totalCliffs() external view returns(uint256);\n    function maxSupply() external view returns(uint256);\n}\n"
    },
    "contracts/external/convex/interfaces/IRewardHook.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IRewardHook.sol\npragma solidity 0.6.12;\n\ninterface IRewardHook {\n    function onRewardClaim() external;\n}\n"
    },
    "contracts/external/convex/interfaces/IRewardStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2023 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/IRewardStaking.sol\npragma solidity 0.6.12;\n\ninterface IRewardStaking {\n    function stakeFor(address, uint256) external;\n    function stake( uint256) external;\n    function withdraw(uint256 amount, bool claim) external;\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\n    function earned(address account) external view returns (uint256);\n    function getReward() external;\n    function getReward(address _account, bool _claimExtras) external;\n    function extraRewardsLength() external view returns (uint256);\n    function extraRewards(uint256 _pid) external view returns (address);\n    function rewardToken() external view returns (address);\n    function balanceOf(address _account) external view returns (uint256);\n    function rewardRate() external view returns(uint256);\n    function totalSupply() external view returns(uint256);\n}\n"
    },
    "contracts/external/convex/interfaces/ITokenWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/ebd46ca7f05cca679568f6bd98cea54e27bbdd32/contracts/contracts/interfaces/ICvx.sol\npragma solidity 0.6.12;\n\ninterface ITokenWrapper {\n   function token() external view returns (address);\n}\n"
    },
    "contracts/external/convex/lib/CvxMining.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Original source: https://github.com/convex-eth/platform/blob/669033cd06704fc67d63953078f42150420b6519/contracts/contracts/interfaces/CvxMining.sol\npragma solidity 0.6.12;\n\nimport \"../interfaces/ICvx.sol\";\n\nlibrary CvxMining{\n    ICvx public constant cvx = ICvx(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n\n    function ConvertCrvToCvx(uint256 _amount) external view returns(uint256){\n        uint256 supply = cvx.totalSupply();\n        uint256 reductionPerCliff = cvx.reductionPerCliff();\n        uint256 totalCliffs = cvx.totalCliffs();\n        uint256 maxSupply = cvx.maxSupply();\n\n        uint256 cliff = supply / reductionPerCliff;\n        //mint if below total cliffs\n        if(cliff < totalCliffs){\n            //for reduction% take inverse of current cliff\n            uint256 reduction = totalCliffs - cliff;\n            //reduce\n            _amount = _amount * reduction / totalCliffs;\n\n            //supply cap check\n            uint256 amtTillMax = maxSupply - supply;\n            if(_amount > amtTillMax){\n                _amount = amtTillMax;\n            }\n\n            //mint\n            return _amount;\n        }\n        return 0;\n    }\n}\n"
    },
    "contracts/external/convex/wrappers/ConvexStakingWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2023 convex-eth\n// Modified Copyright 2023 Silo Finance\n// Original source: https://github.com/convex-eth/platform/blob/01a38d494ac2e9d5c3f1876c637b88b700678ea5/contracts/contracts/wrappers/ConvexStakingWrapper.sol\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IRewardStaking.sol\";\nimport \"../interfaces/IConvexDeposits.sol\";\nimport \"../lib/CvxMining.sol\";\nimport \"../interfaces/IBooster.sol\";\nimport \"../interfaces/IRewardHook.sol\";\nimport \"../interfaces/ITokenWrapper.sol\";\nimport '@openzeppelin/contracts-3.4.1/math/SafeMath.sol';\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts-3.4.1/token/ERC20/ERC20.sol';\nimport \"@openzeppelin/contracts-3.4.1/utils/ReentrancyGuard.sol\";\n\n\n//Example of a tokenize a convex staked position.\n//if used as collateral some modifications will be needed to fit the specific platform\n\n//Based on Curve.fi's gauge wrapper implementations at https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers\ncontract ConvexStakingWrapper is ERC20, ReentrancyGuard {\n    using SafeERC20\n    for IERC20;\n    using SafeMath\n    for uint256;\n\n    struct EarnedData {\n        address token;\n        uint256 amount;\n    }\n\n    struct RewardType {\n        address reward_token;\n        address reward_pool;\n        uint256 reward_integral;\n        uint256 reward_remaining;\n        mapping(address => uint256) reward_integral_for;\n        mapping(address => uint256) claimable_reward;\n    }\n\n    //constants/immutables\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    address public curveToken;\n    address public convexToken;\n    address public convexPool;\n    uint256 public convexPoolId;\n    address public collateralVault;\n    uint256 private constant CRV_INDEX = 0;\n    uint256 private constant CVX_INDEX = 1;\n\n    //rewards\n    RewardType[] public rewards;\n    mapping(address => uint256) public registeredRewards;\n    address public rewardHook;\n\n    //management\n    bool public isShutdown;\n    bool public isInit;\n    address public owner;\n\n    string internal _tokenname;\n    string internal _tokensymbol;\n\n    event Deposited(address indexed _user, address indexed _account, uint256 _amount, bool _wrapped);\n    event Withdrawn(address indexed _user, uint256 _amount, bool _unwrapped);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event RewardInvalidated(address _rewardToken);\n    event RewardAdded(address _token);\n    event Shutdown();\n    event HookSet(address _hook);\n    event UserCheckpoint(address _userA, address _userB);\n\n    constructor() public\n        ERC20(\n            \"StakedConvexToken\",\n            \"stkCvx\"\n        ){\n    }\n\n    function initialize(uint256 _poolId)\n    virtual external {\n        require(!isInit,\"already init\");\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), owner);\n\n        (address _lptoken, address _token, , address _rewards, , ) = IBooster(convexBooster).poolInfo(_poolId);\n        curveToken = _lptoken;\n        convexToken = _token;\n        convexPool = _rewards;\n        convexPoolId = _poolId;\n\n        _tokenname = string(abi.encodePacked(\"Staked \", ERC20(_token).name() ));\n        _tokensymbol = string(abi.encodePacked(\"stk\", ERC20(_token).symbol()));\n        isShutdown = false;\n        isInit = true;\n\n        // collateralVault = _vault;\n\n        //add rewards\n        addRewards();\n        setApprovals();\n    }\n\n    function name() public view override returns (string memory) {\n        return _tokenname;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _tokensymbol;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 18;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    function shutdown() external onlyOwner {\n        isShutdown = true;\n        emit Shutdown();\n    }\n\n    function setApprovals() public {\n        IERC20(curveToken).safeApprove(convexBooster, 0);\n        IERC20(curveToken).safeApprove(convexBooster, uint256(-1));\n        IERC20(convexToken).safeApprove(convexPool, 0);\n        IERC20(convexToken).safeApprove(convexPool, uint256(-1));\n    }\n\n    function addRewards() public {\n        address mainPool = convexPool;\n\n        if (rewards.length == 0) {\n            rewards.push(\n                RewardType({\n                    reward_token: crv,\n                    reward_pool: mainPool,\n                    reward_integral: 0,\n                    reward_remaining: 0\n                })\n            );\n            rewards.push(\n                RewardType({\n                    reward_token: cvx,\n                    reward_pool: address(0),\n                    reward_integral: 0,\n                    reward_remaining: 0\n                })\n            );\n            registeredRewards[crv] = CRV_INDEX+1; //mark registered at index+1\n            registeredRewards[cvx] = CVX_INDEX+1; //mark registered at index+1\n            //send to self to warmup state\n            IERC20(crv).transfer(address(this),0);\n            //send to self to warmup state\n            IERC20(cvx).transfer(address(this),0);\n            emit RewardAdded(crv);\n            emit RewardAdded(cvx);\n        }\n\n        uint256 extraCount = IRewardStaking(mainPool).extraRewardsLength();\n        for (uint256 i = 0; i < extraCount; i++) {\n            address extraPool = IRewardStaking(mainPool).extraRewards(i);\n            address extraToken = IRewardStaking(extraPool).rewardToken();\n            //from pool 151, extra reward tokens are wrapped\n            if(convexPoolId >= 151){\n                extraToken = ITokenWrapper(extraToken).token();\n            }\n            if(extraToken == cvx){\n                //update cvx reward pool address\n                rewards[CVX_INDEX].reward_pool = extraPool;\n            }else if(registeredRewards[extraToken] == 0){\n                //add new token to list\n                rewards.push(\n                    RewardType({\n                        reward_token: extraToken,\n                        reward_pool: extraPool,\n                        reward_integral: 0,\n                        reward_remaining: 0\n                    })\n                );\n                registeredRewards[extraToken] = rewards.length; //mark registered at index+1\n                emit RewardAdded(extraToken);\n            }\n        }\n    }\n\n    function addTokenReward(address _token) public onlyOwner {\n\n        //check if already registered\n        if(registeredRewards[_token] == 0){\n            //add new token to list\n            rewards.push(\n                RewardType({\n                    reward_token: _token,\n                    reward_pool: address(0),\n                    reward_integral: 0,\n                    reward_remaining: 0\n                })\n            );\n            //add to registered map\n            registeredRewards[_token] = rewards.length; //mark registered at index+1\n            //send to self to warmup state\n            IERC20(_token).transfer(address(this),0);   \n            emit RewardAdded(_token);\n        }else{\n            //get previous used index of given token\n            //this ensures that reviving can only be done on the previous used slot\n            uint256 index = registeredRewards[_token];\n            if(index > 0){\n                //index is registeredRewards minus one\n                RewardType storage reward = rewards[index-1];\n                //check if it was invalidated\n                if(reward.reward_token == address(0)){\n                    //revive\n                    reward.reward_token = _token;\n                    emit RewardAdded(_token);\n                }\n            }\n        }\n    }\n\n    //allow invalidating a reward if the token causes trouble in calcRewardIntegral\n    function invalidateReward(address _token) public onlyOwner {\n        uint256 index = registeredRewards[_token];\n        if(index > 0){\n            //index is registered rewards minus one\n            RewardType storage reward = rewards[index-1];\n            require(reward.reward_token == _token, \"!mismatch\");\n            //set reward token address to 0, integral calc will now skip\n            reward.reward_token = address(0);\n            emit RewardInvalidated(_token);\n        }\n    }\n\n    function setHook(address _hook) external onlyOwner{\n        rewardHook = _hook;\n        emit HookSet(_hook);\n    }\n\n    function rewardLength() external view returns(uint256) {\n        return rewards.length;\n    }\n\n    function _getDepositedBalance(address _account) internal virtual view returns(uint256) {\n        if (_account == address(0) || _account == collateralVault) {\n            return 0;\n        }\n        //get balance from collateralVault\n\n        return balanceOf(_account);\n    }\n\n    function _getTotalSupply() internal virtual view returns(uint256){\n\n        //override and add any supply needed (interest based growth)\n\n        return totalSupply();\n    }\n\n    function _calcRewardIntegral(uint256 _index, address[2] memory _accounts, uint256[2] memory _balances, uint256 _supply, bool _isClaim) internal{\n         RewardType storage reward = rewards[_index];\n         if(reward.reward_token == address(0)){\n            return;\n         }\n\n        //get difference in balance and remaining rewards\n        //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\n        uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\n\n        if (_supply > 0 && bal > reward.reward_remaining) {\n            reward.reward_integral = reward.reward_integral + bal.sub(reward.reward_remaining).mul(1e20).div(_supply);\n        }\n\n        //update user integrals\n        for (uint256 u = 0; u < _accounts.length; u++) {\n            //do not give rewards to address 0\n            if (_accounts[u] == address(0)) continue;\n            if (_accounts[u] == collateralVault) continue;\n            if(_isClaim && u != 0) continue; //only update/claim for first address and use second as forwarding\n\n            uint userI = reward.reward_integral_for[_accounts[u]];\n            if(_isClaim || userI < reward.reward_integral){\n                if(_isClaim){\n                    uint256 receiveable = reward.claimable_reward[_accounts[u]].add(_balances[u].mul(reward.reward_integral.sub(userI)).div(1e20));\n                    if(receiveable > 0){\n                        reward.claimable_reward[_accounts[u]] = 0;\n                        //cheat for gas savings by transfering to the second index in accounts list\n                        //if claiming only the 0 index will update so 1 index can hold forwarding info\n                        //guaranteed to have an address in u+1 so no need to check\n                        IERC20(reward.reward_token).safeTransfer(_accounts[u+1], receiveable);\n                        bal = bal.sub(receiveable);\n                    }\n                }else{\n                    reward.claimable_reward[_accounts[u]] = reward.claimable_reward[_accounts[u]].add(_balances[u].mul(reward.reward_integral.sub(userI)).div(1e20));\n                }\n                reward.reward_integral_for[_accounts[u]] = reward.reward_integral;\n            }\n        }\n\n        //update remaining reward here since balance could have changed if claiming\n        if(bal != reward.reward_remaining){\n            reward.reward_remaining = bal;\n        }\n    }\n\n    function _checkpoint(address[2] memory _accounts) internal nonReentrant{\n        uint256 supply = _getTotalSupply();\n        uint256[2] memory depositedBalance;\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]);\n        depositedBalance[1] = _getDepositedBalance(_accounts[1]);\n\n        //just in case, dont claim rewards directly if shutdown\n        //can still technically claim via unguarded calls but skipping here\n        //protects against outside calls reverting\n        if(!isShutdown){\n            IRewardStaking(convexPool).getReward(address(this), true);\n        }\n\n        _claimExtras();\n\n        uint256 rewardCount = rewards.length;\n        for (uint256 i = 0; i < rewardCount; i++) {\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,false);\n        }\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\n    }\n\n    function _checkpointAndClaim(address[2] memory _accounts) internal nonReentrant{\n        uint256 supply = _getTotalSupply();\n        uint256[2] memory depositedBalance;\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]); //only do first slot\n\n        //just in case, dont claim rewards directly if shutdown\n        //can still technically claim via unguarded calls but skipping here\n        //protects against outside calls reverting\n        if(!isShutdown){\n            IRewardStaking(convexPool).getReward(address(this), true);\n        }\n\n        _claimExtras();\n\n        uint256 rewardCount = rewards.length;\n        for (uint256 i = 0; i < rewardCount; i++) {\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,true);\n        }\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\n    }\n\n    //claim any rewards not part of the convex pool\n    function _claimExtras() internal virtual{\n        //override and add any external reward claiming\n        if(rewardHook != address(0)){\n            try IRewardHook(rewardHook).onRewardClaim(){\n            }catch{}\n        }\n    }\n\n    function user_checkpoint(address _account) external returns(bool) {\n        _checkpoint([_account, address(0)]);\n        return true;\n    }\n\n    function totalBalanceOf(address _account) external view returns(uint256){\n        return _getDepositedBalance(_account);\n    }\n\n    //run earned as a mutable function to claim everything before calculating earned rewards\n    function earned(address _account) external returns(EarnedData[] memory claimable) {\n        IRewardStaking(convexPool).getReward(address(this), true);\n        _claimExtras();\n        return _earned(_account);\n    }\n\n    //run earned as a non-mutative function that may not claim everything, but should report standard convex rewards\n    function earnedView(address _account) external view returns(EarnedData[] memory claimable) {\n        return _earned(_account);\n    }\n\n    function _earned(address _account) internal view returns(EarnedData[] memory claimable) {\n        uint256 supply = _getTotalSupply();\n        uint256 rewardCount = rewards.length;\n        claimable = new EarnedData[](rewardCount);\n\n        for (uint256 i = 0; i < rewardCount; i++) {\n            RewardType storage reward = rewards[i];\n            if(reward.reward_token == address(0)){\n                continue;\n            }\n\n            //change in reward is current balance - remaining reward + earned\n            uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\n            uint256 d_reward = bal.sub(reward.reward_remaining);\n\n            //some rewards (like minted cvx) may not have a reward pool directly on the convex pool so check if it exists\n            if(reward.reward_pool != address(0)){\n                //add earned from the convex reward pool for the given token\n                d_reward = d_reward.add(IRewardStaking(reward.reward_pool).earned(address(this)));\n            }\n\n            uint256 I = reward.reward_integral;\n            if (supply > 0) {\n                I = I + d_reward.mul(1e20).div(supply);\n            }\n\n            uint256 newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\n            claimable[i].amount = claimable[i].amount.add(reward.claimable_reward[_account].add(newlyClaimable));\n            claimable[i].token = reward.reward_token;\n\n            //calc cvx minted from crv and add to cvx claimables\n            //note: crv is always index 0 so will always run before cvx\n            if(i == CRV_INDEX){\n                //because someone can call claim for the pool outside of checkpoints, need to recalculate crv without the local balance\n                I = reward.reward_integral;\n                if (supply > 0) {\n                    I = I + IRewardStaking(reward.reward_pool).earned(address(this)).mul(1e20).div(supply);\n                }\n                newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\n                claimable[CVX_INDEX].amount = CvxMining.ConvertCrvToCvx(newlyClaimable);\n                claimable[CVX_INDEX].token = cvx;\n            }\n        }\n        return claimable;\n    }\n\n    function getReward(address _account) external {\n        //claim directly in checkpoint logic to save a bit of gas\n        _checkpointAndClaim([_account, _account]);\n    }\n\n    function getReward(address _account, address _forwardTo) external {\n        require(msg.sender == _account, \"!self\");\n        //claim directly in checkpoint logic to save a bit of gas\n        //pack forwardTo into account array to save gas so that a proxy etc doesnt have to double transfer\n        _checkpointAndClaim([_account,_forwardTo]);\n    }\n\n    //deposit a curve token\n    function deposit(uint256 _amount, address _to) public virtual {\n        require(!isShutdown, \"shutdown\");\n\n        //dont need to call checkpoint since _mint() will\n\n        if (_amount > 0) {\n            _mint(_to, _amount);\n            IERC20(curveToken).safeTransferFrom(msg.sender, address(this), _amount);\n            IConvexDeposits(convexBooster).deposit(convexPoolId, _amount, true);\n        }\n\n        emit Deposited(msg.sender, _to, _amount, true);\n    }\n\n    //stake a convex token\n    function stake(uint256 _amount, address _to) external {\n        require(!isShutdown, \"shutdown\");\n\n        //dont need to call checkpoint since _mint() will\n\n        if (_amount > 0) {\n            _mint(_to, _amount);\n            IERC20(convexToken).safeTransferFrom(msg.sender, address(this), _amount);\n            IRewardStaking(convexPool).stake(_amount);\n        }\n\n        emit Deposited(msg.sender, _to, _amount, false);\n    }\n\n    //withdraw to convex deposit token\n    function withdraw(uint256 _amount) external {\n\n        //dont need to call checkpoint since _burn() will\n\n        if (_amount > 0) {\n            _burn(msg.sender, _amount);\n            IRewardStaking(convexPool).withdraw(_amount, false);\n            IERC20(convexToken).safeTransfer(msg.sender, _amount);\n        }\n\n        emit Withdrawn(msg.sender, _amount, false);\n    }\n\n    //withdraw to underlying curve lp token\n    function withdrawAndUnwrap(uint256 _amount) public virtual {\n        \n        //dont need to call checkpoint since _burn() will\n\n        if (_amount > 0) {\n            _burn(msg.sender, _amount);\n            IRewardStaking(convexPool).withdrawAndUnwrap(_amount, false);\n            IERC20(curveToken).safeTransfer(msg.sender, _amount);\n        }\n\n        //events\n        emit Withdrawn(msg.sender, _amount, true);\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n        _checkpoint([_from, _to]);\n    }\n}\n"
    },
    "contracts/interfaces/IConvexSiloWrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\n\ninterface IConvexSiloWrapper {\n    /// @dev Function to checkpoint single user rewards. This function has the same use case as the `user_checkpoint`\n    ///     in `ConvexStakingWrapper` and implemented to match the `IConvexSiloWrapper` interface.\n    /// @param _account address\n    function checkpointSingle(address _account) external;\n\n    /// @dev Function to checkpoint pair of users rewards. This function must be used to checkpoint collateral transfer.\n    /// @param _from sender address\n    /// @param _to recipient address\n    function checkpointPair(address _from, address _to) external;\n\n    /// @notice wrap underlying tokens\n    /// @param _amount of underlying token to wrap\n    /// @param _to receiver of the wrapped tokens\n    function deposit(uint256 _amount, address _to) external;\n\n    /// @dev initializeSiloWrapper executes parent `initialize` function, transfers ownership to Silo DAO,\n    ///     changes token name and symbol. After `initializeSiloWrapper` execution, execution of the parent `initialize`\n    ///     function is not possible. This function must be called by `ConvexSiloWrapperFactory` in the same\n    ///     transaction with the deployment of this contract. If the parent `initialize` function was already executed\n    ///     for some reason, call to `initialize` is skipped.\n    /// @param _poolId the Curve pool id in the Convex Booster.\n    function initializeSiloWrapper(uint256 _poolId) external;\n\n    /// @notice unwrap and receive underlying tokens\n    /// @param _amount of tokens to unwrap\n    function withdrawAndUnwrap(uint256 _amount) external;\n\n    /// @dev Function to init or update Silo address. Saves the history of deprecated Silos and routers to not take it\n    ///     into account for rewards calculation. Reverts if the first Silo is not created yet. Note, that syncSilo\n    ///     updates collateral vault and it can cause the unclaimed and not checkpointed rewards to be lost in\n    ///     deprecated Silos. This behaviour is intended. Taking into account deprecated Silos shares for rewards\n    ///     calculations will significantly increase the gas costs for all interactions with Convex Silo. Users should\n    ///     claim rewards before the Silo is replaced. Note that replacing Silo is improbable scenario and must be done\n    ///     by the DAO only in very specific cases.\n    function syncSilo() external;\n\n    /// @dev Function to get underlying curveLP token address. Created for a better naming,\n    ///     the `curveToken` inherited variable name can be misleading.\n    function underlyingToken() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IConvexSiloWrapperFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\n\ninterface IConvexSiloWrapperFactory {\n    /// @dev Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token\n    ///     is transferred to the Silo DAO by calling `initializeSiloWrapper`.\n    /// @param _poolId the Curve pool id in the Convex Booster. Curve LP token will be the underlying\n    ///     token of a wrapper.\n    /// @return wrapper is an address of deployed ConvexSiloWrapper\n    function createConvexSiloWrapper(uint256 _poolId) external returns (address wrapper);\n\n    /// @dev Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.\n    /// @param _poolId the Curve pool id in the Convex Booster\n    function deployedWrappers(uint256 _poolId) external view returns (address);\n\n    /// @dev Check if an address is a ConvexSiloWrapper.\n    /// @param _wrapper address to check.\n    function isWrapper(address _wrapper) external view returns (bool);\n\n    /// @dev Ping library function for ConvexSiloWrapperFactory.\n    function convexSiloWrapperFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/lib/Ping06.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.0 <0.7.6; // solhint-disable-line compiler-version\npragma experimental ABIEncoderV2;\n\n/// @notice Ping library for the older versions of Solidity.\nlibrary Ping06 {\n    /// @notice Check if the target contract implements the expected ping function\n    /// @param _target contract address\n    /// @param _expectedSelector ping function that returns the value of it's own selector\n    function pong(address _target, bytes4 _expectedSelector) internal view returns (bool) {\n        (bool success, bytes memory data) = _target.staticcall(abi.encodeWithSelector(_expectedSelector));\n        if (!success || data.length != 32) return false;\n\n        bytes4 pingSelector = abi.decode(data, (bytes4));\n        return pingSelector == _expectedSelector;\n    }\n}\n"
    },
    "contracts/wrappers/convex/ConvexSiloWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Original Copyright 2021 convex-eth\n// Modified Copyright 2022 Silo Finance\npragma solidity 0.6.12; // solhint-disable-line compiler-version\npragma experimental ABIEncoderV2;\n\nimport \"../../external/convex/wrappers/ConvexStakingWrapper.sol\";\nimport \"../../lib/Ping06.sol\";\nimport \"./interfaces/ISiloRepository0612Like.sol\";\nimport \"./interfaces/ISilo0612Like.sol\";\nimport \"../../interfaces/IConvexSiloWrapper.sol\";\n\ncontract ConvexSiloWrapper is IConvexSiloWrapper, ConvexStakingWrapper {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    bytes4 public constant SILO_REPOSITORY_PING_SELECTOR = bytes4(keccak256(\"siloRepositoryPing()\"));\n    string public constant ERROR_SILO_WRAPPER_ALREADY_INIT = \"SiloWrapperAlreadyInit\";\n    string public constant ERROR_INVALID_SILO_REPOSITORY = \"InvalidSiloRepositoryAddress\";\n    string public constant ERROR_COLLATERAL_VAULT_ZERO = \"CollateralVaultNotCreated\";\n\n    // solhint-disable-next-line var-name-mixedcase\n    ISiloRepository0612Like public immutable SILO_REPOSITORY;\n\n    /// @dev Check if the contract is Silo or Router to not account its balance in rewards distribution. Deprecated\n    ///     Silo users will not get the rewards. We do not support deprecated Silo shares for balance calculations\n    ///     to save gas.\n    mapping(address => bool) public isSiloOrRouter;\n\n    /// @dev the flag for tracking the `initializeSiloWrapper` function execution\n    bool public isSiloWrapperInit;\n\n    event CollateralVaultUpdated(address indexed newVault);\n\n    /// @dev Deploy this contract and save SiloRepository address for collateral vault syncing\n    /// @param _siloRepository address\n    constructor(ISiloRepository0612Like _siloRepository) public {\n        if (!Ping06.pong(address(_siloRepository), SILO_REPOSITORY_PING_SELECTOR)) {\n            revert(ERROR_INVALID_SILO_REPOSITORY);\n        }\n\n        SILO_REPOSITORY = _siloRepository;\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function initializeSiloWrapper(uint256 _poolId) external override virtual {\n        if (isSiloWrapperInit) revert(ERROR_SILO_WRAPPER_ALREADY_INIT);\n        isSiloWrapperInit = true;\n\n        // if the parent `initialize` function was already called for some reason, do not block\n        // `initializeSiloWrapper` from execution.\n        if (!isInit) {\n            this.initialize(_poolId);\n        }\n\n        // after `this.initialize` call the owner will be address(this)\n        owner = SILO_REPOSITORY.owner();\n        emit OwnershipTransferred(address(this), owner);\n\n        _tokenname = string(abi.encodePacked(\"Staked \", ERC20(convexToken).name(), \" Silo\"));\n        _tokensymbol = string(abi.encodePacked(\"stk\", ERC20(convexToken).symbol(), \"-silo\"));\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function checkpointSingle(address _account) external override virtual {\n        _checkpoint([_account, address(0)]);\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function checkpointPair(address _from, address _to) external override virtual {\n        _checkpoint([_from, _to]);\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function syncSilo() external override virtual {\n        address silo = SILO_REPOSITORY.getSilo(address(this));\n        if (silo == address(0)) revert(ERROR_COLLATERAL_VAULT_ZERO);\n        isSiloOrRouter[silo] = true;\n\n        address router = SILO_REPOSITORY.router();\n        isSiloOrRouter[router] = true;\n\n        if (collateralVault != silo) {\n            collateralVault = silo;\n            emit CollateralVaultUpdated(silo);\n        }\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function underlyingToken() external view override virtual returns (address) {\n        return curveToken;\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function deposit(uint256 _amount, address _to) public virtual override(IConvexSiloWrapper, ConvexStakingWrapper) {\n        super.deposit(_amount, _to);\n    }\n\n    /// @inheritdoc IConvexSiloWrapper\n    function withdrawAndUnwrap(uint256 _amount) public virtual override(IConvexSiloWrapper, ConvexStakingWrapper) {\n        super.withdrawAndUnwrap(_amount);\n    }\n\n    /// @dev Function to get user's ConvexSiloWrapper balance with deposited collateral included for proper\n    ///     rewards calculation\n    /// @param _account address\n    function _getDepositedBalance(address _account) internal virtual override view returns (uint256) {\n        if (_account == address(0) || isSiloOrRouter[_account]) {\n            return 0;\n        }\n\n        if (collateralVault == address(0)) {\n            return balanceOf(_account);\n        }\n\n        ISilo0612Like.AssetStorage memory assetStorage = ISilo0612Like(collateralVault).assetStorage(address(this));\n\n        uint256 shares = IERC20(assetStorage.collateralOnlyToken).balanceOf(_account);\n        uint256 totalShares = IERC20(assetStorage.collateralOnlyToken).totalSupply();\n        uint256 totalDeposits = assetStorage.collateralOnlyDeposits;\n\n        // ConvexStakingWrapper tokens will be used only as `collateralOnly` asset\n        // that is why we take into account only `collateralOnly` type of Silo collateral\n        // there will be no regular collateral, no interest applied to deposits\n        return balanceOf(_account).add(_toAmount(shares, totalDeposits, totalShares));\n    }\n\n    /// @dev Function for user's deposited amount calculation. It is used to include user's deposited tokens to\n    ///     Convex rewards calculation. Rounding up or down the shares does not affect the rewards calculation.\n    /// @param _share amount of user's collateral shares\n    /// @param _totalAmount total deposited amount in Silo\n    /// @param _totalShares shares total supply\n    /// @return amount of user's collateral\n    function _toAmount(uint256 _share, uint256 _totalAmount, uint256 _totalShares) internal pure returns (uint256) {\n        if (_totalShares == 0 || _totalAmount == 0) {\n            return 0;\n        }\n\n        // we can use regular division, `_totalShares` != 0 because of the if statement above\n        return _share.mul(_totalAmount) / _totalShares;\n    }\n}\n"
    },
    "contracts/wrappers/convex/ConvexSiloWrapperFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.6.12; // solhint-disable-line compiler-version\n\nimport \"../../lib/Ping06.sol\";\nimport \"./ConvexSiloWrapper.sol\";\nimport \"../../interfaces/IConvexSiloWrapperFactory.sol\";\n\n/// @title ConvexSiloWrapperFactory\n/// @notice Deploys ConvexSiloWrapper for Curve LP tokens\ncontract ConvexSiloWrapperFactory is IConvexSiloWrapperFactory {\n    string public constant ERROR_INVALID_SILO_REPOSITORY = \"InvalidSiloRepository\";\n    string public constant ERROR_WRAPPER_ALREADY_DEPLOYED = \"WrapperAlreadyDeployed\";\n    bytes4 public constant SILO_REPOSITORY_PING_SELECTOR = bytes4(keccak256(\"siloRepositoryPing()\"));\n\n    // solhint-disable-next-line var-name-mixedcase\n    ISiloRepository0612Like public immutable SILO_REPOSITORY;\n\n    /// @inheritdoc IConvexSiloWrapperFactory\n    mapping(uint256 => address) public override deployedWrappers;\n\n    /// @inheritdoc IConvexSiloWrapperFactory\n    mapping(address => bool) public override isWrapper;\n\n    /// @dev New ConvexSiloWrapper is deployed with an address `convexSiloWrapper`. Underlying LP token\n    ///     is for `curvePoolId` Curve pool.\n    event ConvexSiloWrapperCreated(address indexed convexSiloWrapper, uint256 indexed curvePoolId);\n\n    constructor(ISiloRepository0612Like _siloRepository) public {\n        if (!Ping06.pong(address(_siloRepository), SILO_REPOSITORY_PING_SELECTOR)) {\n            revert(ERROR_INVALID_SILO_REPOSITORY);\n        }\n\n        SILO_REPOSITORY = _siloRepository;\n    }\n\n    /// @inheritdoc IConvexSiloWrapperFactory\n    function createConvexSiloWrapper(uint256 _poolId) external virtual override returns (address wrapper) {\n        if (deployedWrappers[_poolId] != address(0)) revert(ERROR_WRAPPER_ALREADY_DEPLOYED);\n\n        wrapper = address(new ConvexSiloWrapper(SILO_REPOSITORY));\n        ConvexSiloWrapper(wrapper).initializeSiloWrapper(_poolId);\n        deployedWrappers[_poolId] = wrapper;\n        isWrapper[wrapper] = true;\n\n        emit ConvexSiloWrapperCreated(wrapper, _poolId);\n    }\n\n    function convexSiloWrapperFactoryPing() external pure override returns (bytes4) {\n        return this.convexSiloWrapperFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/wrappers/convex/interfaces/ISilo0612Like.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.6.12; // solhint-disable-line compiler-version\npragma experimental ABIEncoderV2;\n\n// this interface is defined because ConvexStakingWrapper has incompatible 0.6.12\n// original file is contracts/interfaces/IBaseSilo.sol\ninterface ISilo0612Like {\n    struct AssetStorage {\n        address collateralToken;\n        address collateralOnlyToken;\n        address debtToken;\n        uint256 totalDeposits;\n        uint256 collateralOnlyDeposits;\n        uint256 totalBorrowAmount;\n    }\n\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\n}\n"
    },
    "contracts/wrappers/convex/interfaces/ISiloRepository0612Like.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.6.12; // solhint-disable-line compiler-version\n\n// this interface is defined because ConvexStakingWrapper has incompatible 0.6.12\n// original file is contracts/interfaces/ISiloRepository.sol\ninterface ISiloRepository0612Like {\n    function getSilo(address _asset) external returns (address);\n    function owner() external returns (address);\n    function router() external returns (address);\n    function siloRepositoryPing() external returns (bytes4);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}