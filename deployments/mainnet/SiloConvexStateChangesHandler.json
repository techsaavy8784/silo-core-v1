{
  "address": "0x857c44b994a9BeeDcF5FA4B7E9fAf48556058F59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISiloRepository",
          "name": "_repository",
          "type": "address"
        },
        {
          "internalType": "contract ICurveLPTokensDetailsFetchersRepository",
          "name": "_fetchersRepo",
          "type": "address"
        },
        {
          "internalType": "contract IConvexSiloWrapperFactory",
          "name": "_wrapperFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidConvexSiloWrapperFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFetchersRepo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRepository",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySilo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FETCHERS_REPO",
      "outputs": [
        {
          "internalType": "contract ICurveLPTokensDetailsFetchersRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILO_REPOSITORY",
      "outputs": [
        {
          "internalType": "contract ISiloRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WRAPPER_FACTORY",
      "outputs": [
        {
          "internalType": "contract IConvexSiloWrapperFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_firstToCheckpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondToCheckpoint",
          "type": "address"
        }
      ],
      "name": "beforeBalanceUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISiloLike",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cachedSiloWrappers",
      "outputs": [
        {
          "internalType": "contract IConvexSiloWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrapper",
          "type": "address"
        }
      ],
      "name": "wrapperSetupVerification",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x022da596ea11e40b3ed030a234d1d2899766b184b4c7f7523382e2664825bbdf",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0x857c44b994a9BeeDcF5FA4B7E9fAf48556058F59",
    "transactionIndex": 101,
    "gasUsed": "418993",
    "logsBloom": "0x
    "blockHash": "0xa263da5c6b65ec9ae9e143b0a5f802bd994a34efa9d72e3f1ef8c06eff968c4f",
    "transactionHash": "0x022da596ea11e40b3ed030a234d1d2899766b184b4c7f7523382e2664825bbdf",
    "logs": [],
    "blockNumber": 17391885,
    "cumulativeGasUsed": "12751873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
    "0xeaC05930c685A168c40C3aA9D017691a88e31fE9",
    "0x634322671380cF1ee7bD555a77fcdD41e680D817"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9303397e20c2b4613b58e6ec221d180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISiloRepository\",\"name\":\"_repository\",\"type\":\"address\"},{\"internalType\":\"contract ICurveLPTokensDetailsFetchersRepository\",\"name\":\"_fetchersRepo\",\"type\":\"address\"},{\"internalType\":\"contract IConvexSiloWrapperFactory\",\"name\":\"_wrapperFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidConvexSiloWrapperFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFetchersRepo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRepository\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySilo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FETCHERS_REPO\",\"outputs\":[{\"internalType\":\"contract ICurveLPTokensDetailsFetchersRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILO_REPOSITORY\",\"outputs\":[{\"internalType\":\"contract ISiloRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPER_FACTORY\",\"outputs\":[{\"internalType\":\"contract IConvexSiloWrapperFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstToCheckpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondToCheckpoint\",\"type\":\"address\"}],\"name\":\"beforeBalanceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISiloLike\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cachedSiloWrappers\",\"outputs\":[{\"internalType\":\"contract IConvexSiloWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"wrapperSetupVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeBalanceUpdate(address,address)\":{\"details\":\"This function checkpoints two users rewards. This part of code can not be implemented in the Silo     because of the smart contract bytecode limit. Can be called from the Silo only.\",\"params\":{\"_firstToCheckpoint\":\"address to checkpoint, can be zero.\",\"_secondToCheckpoint\":\"address to checkpoint, can be zero.\"}},\"wrapperSetupVerification(address)\":{\"details\":\"This function checks ConvexSiloWrapper `_wrapper`. Returns false if `_wrapper` is not registered in     `ConvexSiloWrapperFactory`. Returns false if Curve pool can not be fetched for `_wrapper` underlying     Curve LP token. Otherwise, returns true.\",\"params\":{\"_wrapper\":\"address.\"},\"returns\":{\"_0\":\"If the return argument is false, Silo contract must revert.\"}}},\"stateVariables\":{\"cachedSiloWrappers\":{\"details\":\"silo => wrapper cached data of Silo assets to reduce external calls.\"}},\"title\":\"SiloConvexStateChangesHandler is used in `SiloConvex` for checkpoints for users rewards.     This part of code can not be implemented in Silo code because of the smart contract bytecode limit.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrappers/convex/utils/SiloConvexStateChangesHandler.sol\":\"SiloConvexStateChangesHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/interfaces/IConvexSiloWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\\n\\ninterface IConvexSiloWrapper {\\n    /// @dev Function to checkpoint single user rewards. This function has the same use case as the `user_checkpoint`\\n    ///     in `ConvexStakingWrapper` and implemented to match the `IConvexSiloWrapper` interface.\\n    /// @param _account address\\n    function checkpointSingle(address _account) external;\\n\\n    /// @dev Function to checkpoint pair of users rewards. This function must be used to checkpoint collateral transfer.\\n    /// @param _from sender address\\n    /// @param _to recipient address\\n    function checkpointPair(address _from, address _to) external;\\n\\n    /// @notice wrap underlying tokens\\n    /// @param _amount of underlying token to wrap\\n    /// @param _to receiver of the wrapped tokens\\n    function deposit(uint256 _amount, address _to) external;\\n\\n    /// @dev initializeSiloWrapper executes parent `initialize` function, transfers ownership to Silo DAO,\\n    ///     changes token name and symbol. After `initializeSiloWrapper` execution, execution of the parent `initialize`\\n    ///     function is not possible. This function must be called by `ConvexSiloWrapperFactory` in the same\\n    ///     transaction with the deployment of this contract. If the parent `initialize` function was already executed\\n    ///     for some reason, call to `initialize` is skipped.\\n    /// @param _poolId the Curve pool id in the Convex Booster.\\n    function initializeSiloWrapper(uint256 _poolId) external;\\n\\n    /// @notice unwrap and receive underlying tokens\\n    /// @param _amount of tokens to unwrap\\n    function withdrawAndUnwrap(uint256 _amount) external;\\n\\n    /// @dev Function to init or update Silo address. Saves the history of deprecated Silos and routers to not take it\\n    ///     into account for rewards calculation. Reverts if the first Silo is not created yet. Note, that syncSilo\\n    ///     updates collateral vault and it can cause the unclaimed and not checkpointed rewards to be lost in\\n    ///     deprecated Silos. This behaviour is intended. Taking into account deprecated Silos shares for rewards\\n    ///     calculations will significantly increase the gas costs for all interactions with Convex Silo. Users should\\n    ///     claim rewards before the Silo is replaced. Note that replacing Silo is improbable scenario and must be done\\n    ///     by the DAO only in very specific cases.\\n    function syncSilo() external;\\n\\n    /// @dev Function to get underlying curveLP token address. Created for a better naming,\\n    ///     the `curveToken` inherited variable name can be misleading.\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x441b9f3f4eb79e96810dc38c78c35b44c8cedc0aaa43fc1533af24ecc6105b15\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConvexSiloWrapperFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\\n\\ninterface IConvexSiloWrapperFactory {\\n    /// @dev Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token\\n    ///     is transferred to the Silo DAO by calling `initializeSiloWrapper`.\\n    /// @param _poolId the Curve pool id in the Convex Booster. Curve LP token will be the underlying\\n    ///     token of a wrapper.\\n    /// @return wrapper is an address of deployed ConvexSiloWrapper\\n    function createConvexSiloWrapper(uint256 _poolId) external returns (address wrapper);\\n\\n    /// @dev Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.\\n    /// @param _poolId the Curve pool id in the Convex Booster\\n    function deployedWrappers(uint256 _poolId) external view returns (address);\\n\\n    /// @dev Check if an address is a ConvexSiloWrapper.\\n    /// @param _wrapper address to check.\\n    function isWrapper(address _wrapper) external view returns (bool);\\n\\n    /// @dev Ping library function for ConvexSiloWrapperFactory.\\n    function convexSiloWrapperFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4444b990ffb61501f2330dd94d6784e078fcb02fe8fab6a0ae611f15726760cb\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // beta \\u2265 0 - a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // Tcrit \\u2265 0 - the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for given asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// It will try to call `_silo.accrueInterest(_asset)` before updating config, but it is not guaranteed,\\n    /// that this call will be successful, if it fail config will be set anyway.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for given asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config struct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @notice get the flag to detect rcomp restriction (zero current interest) due to overflow\\n    /// overflow boolean flag to detect rcomp restriction\\n    function overflowDetected(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (bool overflow);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    /// @return overflow boolean flag to detect rcomp restriction\\n    function calculateCompoundInterestRateWithOverflowDetection(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\\n        bool overflow\\n    );\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x26b53c997adc8ced83dac833e5d642e1dc3aff6a3ed643da64718c30674ee8c8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdbfa701819d923d592f42926dbce3bbc6d0e64875d56685bb145ea0e7b449230\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20Metadata {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver indexed notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt position\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt position\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb07e3d32d9be5266129c8f6e0f7db137f9d4632c2659fceaddc37ba65d5ce0c4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloConvexStateChangesHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface ISiloConvexStateChangesHandler {\\n    /// @dev This function checkpoints two users rewards. This part of code can not be implemented in the Silo\\n    ///     because of the smart contract bytecode limit. Can be called from the Silo only.\\n    /// @param _firstToCheckpoint address to checkpoint, can be zero.\\n    /// @param _secondToCheckpoint address to checkpoint, can be zero.\\n    function beforeBalanceUpdate(address _firstToCheckpoint, address _secondToCheckpoint) external;\\n\\n    /// @dev This function checks ConvexSiloWrapper `_wrapper`. Returns false if `_wrapper` is not registered in\\n    ///     `ConvexSiloWrapperFactory`. Returns false if Curve pool can not be fetched for `_wrapper` underlying\\n    ///     Curve LP token. Otherwise, returns true.\\n    /// @param _wrapper address.\\n    /// @return If the return argument is false, Silo contract must revert.\\n    function wrapperSetupVerification(address _wrapper) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeedf2768d85dbabe8ebd0c01f49397181326e29ee0984a2e2ef0f15290a0a5ad\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of asset for which Silo was deployed\\n    /// @param version version of silo implementation\\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\\n\\n    /// @notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _version version of silo implementation\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5df65ec4644cc935f9e807e4c295b67a22d2768487878a8619a0273a488d4b98\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (Solvency._PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if the collateral asset has an LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of quote token in the principal currency for every quote token worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address indexed newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address indexed bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel indexed newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository indexed newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address indexed newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address indexed newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver indexed newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registered Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address indexed factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregistered Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address indexed factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice Emitted when asset config is updated for a silo\\n    /// @param silo silo for which asset config is being set\\n    /// @param asset asset for which asset config is being set\\n    /// @param assetConfig new asset config\\n    event AssetConfigUpdate(address indexed silo, address indexed asset, AssetConfig assetConfig);\\n\\n    /// @notice Emitted when silo (silo factory) version is set for asset\\n    /// @param asset asset for which asset config is being set\\n    /// @param version Silo version\\n    event VersionForAsset(address indexed asset, uint128 version);\\n\\n    /// @param _siloAsset silo asset\\n    /// @return version of Silo that is assigned for provided asset, if not assigned it returns zero (default)\\n    function getVersionForAsset(address _siloAsset) external returns (uint128);\\n\\n    /// @notice setter for `getVersionForAsset` mapping\\n    /// @param _siloAsset silo asset\\n    /// @param _version version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\\n    function setVersionForAsset(address _siloAsset, uint128 _version) external;\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function newSilo(address _siloAsset, bytes memory _siloData) external returns (address createdSilo);\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external returns (address createdSilo);\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Sets default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possible that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev Checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3ab90e88cad4aac25c6f44b1071bc31ef7e7c0594a9b916e74d1f1ba26d63e38\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    ///@notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcbfc948e23f6fe7b0bf32a70f4cdcd9b438c5234a0b388134f3e6caeb4da4f05\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev Identifiers of the Curve protocol components in the Curve address provider\\nenum RegistryId {\\n    MAIN_REGISTRY_0,\\n    POOL_INFO_GETTER_1,\\n    EXCHANGES_2,\\n    META_POOL_FACTORY_3,\\n    FEE_DISTRIBUTOR_4,\\n    CRYPTO_SWAP_REGISTRY_5,\\n    CRYPTO_POOL_FACTORY_6\\n}\\n\\n/// @dev Storage struct that holds Curve pool coin details\\nstruct PoolCoin {\\n    /// @dev Coin address\\n    address addr;\\n    /// @dev `true` if a coin is Curve LP Token (used in the meta pools)\\n    bool isLPToken;\\n}\\n\\n/// @dev Storage struct that holds Curve pool details\\nstruct Pool {\\n    /// @dev Pool address\\n    address addr;\\n    /// @dev `true` if a pool is the meta pool (the pool that contains other Curve LP Tokens)\\n    bool isMeta;\\n}\\n\\n/// @dev Describes an LP Token with all the details required for the price calculation\\nstruct LPTokenDetails {\\n    /// @dev A pool of the LP Token. See a Pool struct\\n    Pool pool;\\n    /// @dev A list of the LP token pool coins\\n    address[] coins;\\n}\\n\",\"keccak256\":\"0x1ac2f9680532ec19462b5d3a9dbc5081bac531c93e938bcbb25c72d200563b76\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetcher\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetcher {\\n    /// @notice Emitted when Curve LP registry address has been updated\\n    /// @param registry The configured registry address\\n    event RegistryUpdated(address indexed registry);\\n\\n    /// @notice Pulls a registry address from the Curve address provider\\n    function updateRegistry() external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @dev This method should not revert. If the data is not found or provided an invalid LP token address,\\n    /// it should return an empty data structure.\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n      external\\n      view\\n      returns (\\n        LPTokenDetails memory details,\\n        bytes memory data\\n      );\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Registry Fatcher\\n    /// @return always curveLPTokensDetailsFetcherPing.selector\\n    function curveLPTokensDetailsFetcherPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf16275af21fc6262495a13f19596467df8bda0999044bae0ed941d8e24bd14c0\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ICurveLPTokensDetailsFetcher.sol\\\";\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetchers repository\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetchersRepository {\\n    /// @notice Emitted when Curve LP token fetcher added to the repository\\n    /// @param fetcher Added fetcher address\\n    event FetcherAdded(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Emitted when Curve LP token fetcher removed from the repository\\n    /// @param fetcher Removed fetcher address\\n    event FetcherRemoved(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Add Curve LP token details fetcher to the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be added to the repository\\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Remove Curve LP token details fetcher from the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be removed from the repository\\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (\\n            LPTokenDetails memory details,\\n            bytes memory data\\n        );\\n\\n    /// @return pool of the `_lpToken`\\n    function getLPTokenPool(address _lpToken) external view returns (address pool);\\n\\n    /// @dev Returns a list of the registered fetchers\\n    function getFetchers() external view returns (address[] memory);\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Repository fetcher\\n    /// @return always curveLPTokensFetchersRepositoryPing.selector\\n    function curveLPTokensFetchersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x442748d5327968d3430e35c35f792b7dccb46f9d2e5836564f598b2fde35621e\",\"license\":\"BUSL-1.1\"},\"contracts/wrappers/convex/utils/SiloConvexStateChangesHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../lib/Ping.sol\\\";\\nimport \\\"../../../interfaces/ISiloRepository.sol\\\";\\nimport \\\"../../../interfaces/IConvexSiloWrapper.sol\\\";\\nimport \\\"../../../interfaces/ISiloConvexStateChangesHandler.sol\\\";\\nimport \\\"../../../interfaces/IConvexSiloWrapperFactory.sol\\\";\\nimport \\\"../../../priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\\\";\\n\\n/// @dev `siloAsset` function is not defined in default Silo interface.\\ninterface ISiloLike {\\n    function siloAsset() external returns (address);\\n}\\n\\n/// @title SiloConvexStateChangesHandler is used in `SiloConvex` for checkpoints for users rewards.\\n///     This part of code can not be implemented in Silo code because of the smart contract bytecode limit.\\ncontract SiloConvexStateChangesHandler is ISiloConvexStateChangesHandler {\\n    // solhint-disable-next-line var-name-mixedcase\\n    ISiloRepository public immutable SILO_REPOSITORY;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    ICurveLPTokensDetailsFetchersRepository public immutable FETCHERS_REPO;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    IConvexSiloWrapperFactory public immutable WRAPPER_FACTORY;\\n\\n    /// @dev silo => wrapper cached data of Silo assets to reduce external calls.\\n    mapping(ISiloLike => IConvexSiloWrapper) public cachedSiloWrappers;\\n\\n    error InvalidConvexSiloWrapperFactory();\\n    error InvalidFetchersRepo();\\n    error InvalidRepository();\\n    error OnlySilo();\\n\\n    modifier onlySilo() {\\n        if (!SILO_REPOSITORY.isSilo(msg.sender)) revert OnlySilo();\\n        _;\\n    }\\n\\n    constructor (\\n        ISiloRepository _repository,\\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepo,\\n        IConvexSiloWrapperFactory _wrapperFactory\\n    ) {\\n        if (!Ping.pong(_repository.siloRepositoryPing)) {\\n            revert InvalidRepository();\\n        }\\n\\n        if (!Ping.pong(_fetchersRepo.curveLPTokensFetchersRepositoryPing)) {\\n            revert InvalidFetchersRepo();\\n        }\\n\\n        if (!Ping.pong(_wrapperFactory.convexSiloWrapperFactoryPing)) {\\n            revert InvalidConvexSiloWrapperFactory();\\n        }\\n\\n        SILO_REPOSITORY = _repository;\\n        FETCHERS_REPO = _fetchersRepo;\\n        WRAPPER_FACTORY = _wrapperFactory;\\n    }\\n\\n    /// @inheritdoc ISiloConvexStateChangesHandler\\n    function beforeBalanceUpdate(address _firstToCheckpoint, address _secondToCheckpoint)\\n        external\\n        virtual\\n        override\\n        onlySilo\\n    {\\n        IConvexSiloWrapper _wrapper = cachedSiloWrappers[ISiloLike(msg.sender)];\\n\\n        if (address(_wrapper) == address(0)) {\\n            _wrapper = IConvexSiloWrapper(ISiloLike(msg.sender).siloAsset());\\n            cachedSiloWrappers[ISiloLike(msg.sender)] = _wrapper;\\n        }\\n\\n        _wrapper.checkpointPair(_firstToCheckpoint, _secondToCheckpoint);\\n    }\\n\\n    /// @inheritdoc ISiloConvexStateChangesHandler\\n    function wrapperSetupVerification(address _wrapper) external view virtual override returns (bool) {\\n        if (!WRAPPER_FACTORY.isWrapper(_wrapper)) return false;\\n\\n        address underlyingToken = IConvexSiloWrapper(_wrapper).underlyingToken();\\n        address assetPool = FETCHERS_REPO.getLPTokenPool(underlyingToken);\\n\\n        return assetPool != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x0fe840eb54a3631a633c8cd9edfdc8149e97852f7ae682b4647d00ef8e6e10df\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516108a63803806108a683398101604081905261002f916101a4565b610050836001600160a01b031663e99ed41d61010660201b6104b61760201c565b61006d57604051639f45596360e01b815260040160405180910390fd5b61008e826001600160a01b0316630956403e61010660201b6104b61760201c565b6100ab5760405163d31c0dc760e01b815260040160405180910390fd5b6100cc816001600160a01b0316638d333b3161010660201b6104b61760201c565b6100e957604051633c8fdf8360e01b815260040160405180910390fd5b6001600160a01b0392831660805290821660a0521660c05261021b565b60006001600160a01b03831615801590610185575082826040518163ffffffff1660e01b8152600401602060405180830381865afa15801561014c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017091906101f1565b60e083901b6001600160e01b03199081169116145b9392505050565b6001600160a01b03811681146101a157600080fd5b50565b6000806000606084860312156101b957600080fd5b83516101c48161018c565b60208501519093506101d58161018c565b60408501519092506101e68161018c565b809150509250925092565b60006020828403121561020357600080fd5b81516001600160e01b03198116811461018557600080fd5b60805160a05160c05161064961025d6000396000818160a9015261017c01526000818160e8015261027e01526000818161010f015261031101526106496000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806303f9c36b1461006757806330bd295b1461008f5780633f6eef20146100a45780639dca4000146100e3578063a7e8489d1461010a578063fa63357114610131575b600080fd5b61007a610075366004610554565b61015a565b60405190151581526020015b60405180910390f35b6100a261009d366004610571565b6102fc565b005b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610086565b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6100cb61013f366004610554565b6000602081905290815260409020546001600160a01b031681565b60405163e0aa279760e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e0aa279790602401602060405180830381865afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e991906105aa565b6101f557506000919050565b6000826001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025991906105cc565b6040516306592e6160e01b81526001600160a01b0380831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906306592e6190602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e991906105cc565b6001600160a01b03161515949350505050565b60405163025e1b9b60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906312f0dcd890602401602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906105aa565b6103a1576040516310528c6d60e11b815260040160405180910390fd5b336000908152602081905260409020546001600160a01b03168061044e57336001600160a01b0316634521c0196040518163ffffffff1660e01b81526004016020604051808303816000875af11580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906105cc565b33600090815260208190526040902080546001600160a01b0319166001600160a01b03831617905590505b6040516301e462dd60e01b81526001600160a01b03848116600483015283811660248301528216906301e462dd90604401600060405180830381600087803b15801561049957600080fd5b505af11580156104ad573d6000803e3d6000fd5b50505050505050565b60006001600160a01b03831615801590610535575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052091906105e9565b60e083901b6001600160e01b03199081169116145b9392505050565b6001600160a01b038116811461055157600080fd5b50565b60006020828403121561056657600080fd5b81356105358161053c565b6000806040838503121561058457600080fd5b823561058f8161053c565b9150602083013561059f8161053c565b809150509250929050565b6000602082840312156105bc57600080fd5b8151801515811461053557600080fd5b6000602082840312156105de57600080fd5b81516105358161053c565b6000602082840312156105fb57600080fd5b81516001600160e01b03198116811461053557600080fdfea2646970667358221220a93e572db0376265c98b90e2f4d3c790fbaa4c601f57911f30cbc7a244c4be3464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806303f9c36b1461006757806330bd295b1461008f5780633f6eef20146100a45780639dca4000146100e3578063a7e8489d1461010a578063fa63357114610131575b600080fd5b61007a610075366004610554565b61015a565b60405190151581526020015b60405180910390f35b6100a261009d366004610571565b6102fc565b005b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610086565b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b6100cb61013f366004610554565b6000602081905290815260409020546001600160a01b031681565b60405163e0aa279760e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e0aa279790602401602060405180830381865afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e991906105aa565b6101f557506000919050565b6000826001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025991906105cc565b6040516306592e6160e01b81526001600160a01b0380831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906306592e6190602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e991906105cc565b6001600160a01b03161515949350505050565b60405163025e1b9b60e31b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906312f0dcd890602401602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906105aa565b6103a1576040516310528c6d60e11b815260040160405180910390fd5b336000908152602081905260409020546001600160a01b03168061044e57336001600160a01b0316634521c0196040518163ffffffff1660e01b81526004016020604051808303816000875af11580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906105cc565b33600090815260208190526040902080546001600160a01b0319166001600160a01b03831617905590505b6040516301e462dd60e01b81526001600160a01b03848116600483015283811660248301528216906301e462dd90604401600060405180830381600087803b15801561049957600080fd5b505af11580156104ad573d6000803e3d6000fd5b50505050505050565b60006001600160a01b03831615801590610535575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052091906105e9565b60e083901b6001600160e01b03199081169116145b9392505050565b6001600160a01b038116811461055157600080fd5b50565b60006020828403121561056657600080fd5b81356105358161053c565b6000806040838503121561058457600080fd5b823561058f8161053c565b9150602083013561059f8161053c565b809150509250929050565b6000602082840312156105bc57600080fd5b8151801515811461053557600080fd5b6000602082840312156105de57600080fd5b81516105358161053c565b6000602082840312156105fb57600080fd5b81516001600160e01b03198116811461053557600080fdfea2646970667358221220a93e572db0376265c98b90e2f4d3c790fbaa4c601f57911f30cbc7a244c4be3464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeBalanceUpdate(address,address)": {
        "details": "This function checkpoints two users rewards. This part of code can not be implemented in the Silo     because of the smart contract bytecode limit. Can be called from the Silo only.",
        "params": {
          "_firstToCheckpoint": "address to checkpoint, can be zero.",
          "_secondToCheckpoint": "address to checkpoint, can be zero."
        }
      },
      "wrapperSetupVerification(address)": {
        "details": "This function checks ConvexSiloWrapper `_wrapper`. Returns false if `_wrapper` is not registered in     `ConvexSiloWrapperFactory`. Returns false if Curve pool can not be fetched for `_wrapper` underlying     Curve LP token. Otherwise, returns true.",
        "params": {
          "_wrapper": "address."
        },
        "returns": {
          "_0": "If the return argument is false, Silo contract must revert."
        }
      }
    },
    "stateVariables": {
      "cachedSiloWrappers": {
        "details": "silo => wrapper cached data of Silo assets to reduce external calls."
      }
    },
    "title": "SiloConvexStateChangesHandler is used in `SiloConvex` for checkpoints for users rewards.     This part of code can not be implemented in Silo code because of the smart contract bytecode limit.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46981,
        "contract": "contracts/wrappers/convex/utils/SiloConvexStateChangesHandler.sol:SiloConvexStateChangesHandler",
        "label": "cachedSiloWrappers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(ISiloLike)46962,t_contract(IConvexSiloWrapper)24126)"
      }
    ],
    "types": {
      "t_contract(IConvexSiloWrapper)24126": {
        "encoding": "inplace",
        "label": "contract IConvexSiloWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(ISiloLike)46962": {
        "encoding": "inplace",
        "label": "contract ISiloLike",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(ISiloLike)46962,t_contract(IConvexSiloWrapper)24126)": {
        "encoding": "mapping",
        "key": "t_contract(ISiloLike)46962",
        "label": "mapping(contract ISiloLike => contract IConvexSiloWrapper)",
        "numberOfBytes": "32",
        "value": "t_contract(IConvexSiloWrapper)24126"
      }
    }
  }
}