{
  "address": "0xeaC05930c685A168c40C3aA9D017691a88e31fE9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "_repository",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FetcherAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FetcherIsNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFetcher",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPriceProviderRepository",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ICurveLPTokensDetailsFetcher",
          "name": "fetcher",
          "type": "address"
        }
      ],
      "name": "FetcherAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ICurveLPTokensDetailsFetcher",
          "name": "fetcher",
          "type": "address"
        }
      ],
      "name": "FetcherRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICurveLPTokensDetailsFetcher",
          "name": "_fetcher",
          "type": "address"
        }
      ],
      "name": "addFetcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveLPTokensFetchersRepositoryPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFetchers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "getLPTokenDetails",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isMeta",
                  "type": "bool"
                }
              ],
              "internalType": "struct Pool",
              "name": "pool",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "coins",
              "type": "address[]"
            }
          ],
          "internalType": "struct LPTokenDetails",
          "name": "details",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getLPTokenPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICurveLPTokensDetailsFetcher",
          "name": "_fetcher",
          "type": "address"
        }
      ],
      "name": "removeFetcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfeddb16dc08af1d041fb86bd507554825ae71ae3d670fe516b6eb2076cf28728",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0xeaC05930c685A168c40C3aA9D017691a88e31fE9",
    "transactionIndex": 125,
    "gasUsed": "786516",
    "logsBloom": "0x
    "blockHash": "0xeb8365dc2ab145faac755d5dfaaff0c80d39b5d974cfc91e504a6cc0021885c9",
    "transactionHash": "0xfeddb16dc08af1d041fb86bd507554825ae71ae3d670fe516b6eb2076cf28728",
    "logs": [],
    "blockNumber": 17391874,
    "cumulativeGasUsed": "6945801",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7C2ca9D502f2409BeceAfa68E97a176Ff805029F"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9303397e20c2b4613b58e6ec221d180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"_repository\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FetcherAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FetcherIsNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFetcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceProviderRepository\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICurveLPTokensDetailsFetcher\",\"name\":\"fetcher\",\"type\":\"address\"}],\"name\":\"FetcherAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICurveLPTokensDetailsFetcher\",\"name\":\"fetcher\",\"type\":\"address\"}],\"name\":\"FetcherRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ICurveLPTokensDetailsFetcher\",\"name\":\"_fetcher\",\"type\":\"address\"}],\"name\":\"addFetcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveLPTokensFetchersRepositoryPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFetchers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getLPTokenDetails\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"}],\"internalType\":\"struct Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"}],\"internalType\":\"struct LPTokenDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getLPTokenPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICurveLPTokensDetailsFetcher\",\"name\":\"_fetcher\",\"type\":\"address\"}],\"name\":\"removeFetcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For more info about Curve LP Tokens details fetchers see ICurveLPTokensDetailsFetcher\",\"errors\":{\"FetcherAlreadyAdded()\":[{\"details\":\"Revert if Curve LP Tokens details fetcher is already added to the set\"}],\"FetcherIsNotRegistered()\":[{\"details\":\"Revert if Curve LP Tokens details fetcher is not registered in the repository\"}],\"InvalidFetcher()\":[{\"details\":\"Revert on a false sanity check with `Ping` library for a fetcher\"}],\"InvalidPriceProviderRepository()\":[{\"details\":\"Revert on a false sanity check with `Ping` library\"}],\"OnlyManager()\":[{\"details\":\"Revert if `msg.sender` is not Price Providers Repository manager\"}]},\"kind\":\"dev\",\"methods\":{\"addFetcher(address)\":{\"params\":{\"_fetcher\":\"A Curve LP token details fetcher to be added to the repository\"}},\"constructor\":{\"details\":\"Constructor is required for indirect PriceProvidersRepositoryManager initialization. Arguments for PriceProvidersRepositoryManager initialization are given in the modifier-style in the derived constructor. CurveLPTokensDetailsFetchersRepository constructor body should be empty as we need to do nothing.\",\"params\":{\"_repository\":\"Price providers repository address\"}},\"curveLPTokensFetchersRepositoryPing()\":{\"returns\":{\"_0\":\"always curveLPTokensFetchersRepositoryPing.selector\"}},\"getFetchers()\":{\"details\":\"Returns a list of the registered fetchers\"},\"getLPTokenDetails(address,bytes)\":{\"params\":{\"_data\":\"Any additional data that can be required\",\"_lpToken\":\"Curve LP token address\"},\"returns\":{\"data\":\"Any additional data to return\",\"details\":\"LP token details. See CurveLPTokensDataTypes.LPTokenDetails\"}},\"getLPTokenPool(address)\":{\"returns\":{\"pool\":\"of the `_lpToken`\"}},\"removeFetcher(address)\":{\"params\":{\"_fetcher\":\"A Curve LP token details fetcher to be removed from the repository\"}}},\"stateVariables\":{\"_fetchers\":{\"details\":\"Curve LP Tokens details fetchers set\"}},\"title\":\"Curve LP Tokens details fetchers repository\",\"version\":1},\"userdoc\":{\"events\":{\"FetcherAdded(address)\":{\"notice\":\"Emitted when Curve LP token fetcher added to the repository\"},\"FetcherRemoved(address)\":{\"notice\":\"Emitted when Curve LP token fetcher removed from the repository\"}},\"kind\":\"user\",\"methods\":{\"addFetcher(address)\":{\"notice\":\"Add Curve LP token details fetcher to the repository\"},\"curveLPTokensFetchersRepositoryPing()\":{\"notice\":\"Helper method that allows easily detects, if contract is Curve Repository fetcher\"},\"getLPTokenDetails(address,bytes)\":{\"notice\":\"Curve LP Token details getter\"},\"removeFetcher(address)\":{\"notice\":\"Remove Curve LP token details fetcher from the repository\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol\":\"CurveLPTokensDetailsFetchersRepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/_common/PriceProvidersRepositoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../../lib/Ping.sol\\\";\\nimport \\\"../../interfaces/IPriceProvidersRepository.sol\\\";\\n\\n/// @title Price Providers Repository manager\\nabstract contract PriceProvidersRepositoryManager  {\\n    /// @dev Price Providers Repository\\n    IPriceProvidersRepository internal immutable _priceProvidersRepository;\\n\\n    /// @dev Revert if `msg.sender` is not Price Providers Repository manager\\n    error OnlyManager();\\n    /// @dev Revert on a false sanity check with `Ping` library\\n    error InvalidPriceProviderRepository();\\n\\n    /// @dev Permissions verification modifier.\\n    /// Functions execution with this modifier will be allowed only for the Price Providers Repository manager\\n    modifier onlyManager() {\\n        if (_priceProvidersRepository.manager() != msg.sender) revert OnlyManager();\\n        _;\\n    }\\n\\n    /// @param _repository address of the Price Providers Repository\\n    constructor(IPriceProvidersRepository _repository) {\\n        if (!Ping.pong(_repository.priceProvidersRepositoryPing)) {\\n            revert InvalidPriceProviderRepository();\\n        }\\n\\n        _priceProvidersRepository = _repository;\\n    }\\n}\\n\",\"keccak256\":\"0xd56090bcd216381415fc0f05f19c6fd5e3920cf4df9590eb530675d343bed925\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\\\";\\nimport \\\"../../_common/PriceProvidersRepositoryManager.sol\\\";\\nimport \\\"../../../lib/Ping.sol\\\";\\nimport \\\"../../../interfaces/IPriceProvidersRepository.sol\\\";\\n\\n/// @title Curve LP Tokens details fetchers repository\\n/// @dev For more info about Curve LP Tokens details fetchers see ICurveLPTokensDetailsFetcher\\ncontract CurveLPTokensDetailsFetchersRepository is\\n    ICurveLPTokensDetailsFetchersRepository,\\n    PriceProvidersRepositoryManager\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Curve LP Tokens details fetchers set\\n    EnumerableSet.AddressSet internal _fetchers;\\n\\n    /// @dev Revert if Curve LP Tokens details fetcher is already added to the set\\n    error FetcherAlreadyAdded();\\n    /// @dev Revert if Curve LP Tokens details fetcher is not registered in the repository\\n    error FetcherIsNotRegistered();\\n    /// @dev Revert on a false sanity check with `Ping` library for a fetcher\\n    error InvalidFetcher();\\n\\n    /// @dev Constructor is required for indirect PriceProvidersRepositoryManager initialization.\\n    /// Arguments for PriceProvidersRepositoryManager initialization are given in the modifier-style\\n    /// in the derived constructor.\\n    /// CurveLPTokensDetailsFetchersRepository constructor body should be empty as we need to do nothing.\\n    /// @param _repository Price providers repository address\\n    constructor(IPriceProvidersRepository _repository) PriceProvidersRepositoryManager(_repository) {\\n        // The code will not compile without it. So, we need to keep an empty constructor.\\n    }\\n\\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external virtual onlyManager() {\\n        if (!Ping.pong(_fetcher.curveLPTokensDetailsFetcherPing)) revert InvalidFetcher();\\n        if (!_fetchers.add(address(_fetcher))) revert FetcherAlreadyAdded();\\n\\n        emit FetcherAdded(_fetcher);\\n    }\\n\\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external virtual onlyManager() {\\n        if (!_fetchers.remove(address(_fetcher))) revert FetcherIsNotRegistered();\\n\\n        emit FetcherRemoved(_fetcher);\\n    }\\n\\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n        external\\n        virtual\\n        view\\n        returns (\\n            LPTokenDetails memory details,\\n            bytes memory data\\n        )\\n    {\\n        uint256 i = 0;\\n        uint256 numberOfFetchers = _fetchers.length();\\n\\n        while(i < numberOfFetchers) {\\n            ICurveLPTokensDetailsFetcher fetcher = ICurveLPTokensDetailsFetcher(_fetchers.at(i));\\n\\n            (details, data) = fetcher.getLPTokenDetails(_lpToken, _data);\\n\\n            // Assume that if a pool address is not address(0), we are done\\n            if (details.pool.addr != address(0)) {\\n                return (details, data);\\n            }\\n\\n            // variables 'i' and 'numberOfFetchers' have the same data type,\\n            // so due to condition (i < numberOfFetchers) overflow is impossible.\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @return pool of the `_lpToken`\\n    function getLPTokenPool(address _lpToken) external view returns (address pool) {\\n        uint256 i = 0;\\n        bytes memory data;\\n        LPTokenDetails memory details;\\n        uint256 numberOfFetchers = _fetchers.length();\\n\\n        while(i < numberOfFetchers) {\\n            ICurveLPTokensDetailsFetcher fetcher = ICurveLPTokensDetailsFetcher(_fetchers.at(i));\\n\\n            (details, data) = fetcher.getLPTokenDetails(_lpToken, data);\\n\\n            // Assume that if a pool address is not address(0), we are done\\n            if (details.pool.addr != address(0)) {\\n                return details.pool.addr;\\n            }\\n\\n            // variables 'i' and 'numberOfFetchers' have the same data type,\\n            // so due to condition (i < numberOfFetchers) overflow is impossible.\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\\n    function getFetchers() external virtual view returns (address[] memory) {\\n        return _fetchers.values();\\n    }\\n\\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\\n    function curveLPTokensFetchersRepositoryPing() external virtual pure returns (bytes4) {\\n        return this.curveLPTokensFetchersRepositoryPing.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x074054bd4a778d8ea5541e48bf8e137af765abc7ccfb794f055b66968668d975\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev Identifiers of the Curve protocol components in the Curve address provider\\nenum RegistryId {\\n    MAIN_REGISTRY_0,\\n    POOL_INFO_GETTER_1,\\n    EXCHANGES_2,\\n    META_POOL_FACTORY_3,\\n    FEE_DISTRIBUTOR_4,\\n    CRYPTO_SWAP_REGISTRY_5,\\n    CRYPTO_POOL_FACTORY_6\\n}\\n\\n/// @dev Storage struct that holds Curve pool coin details\\nstruct PoolCoin {\\n    /// @dev Coin address\\n    address addr;\\n    /// @dev `true` if a coin is Curve LP Token (used in the meta pools)\\n    bool isLPToken;\\n}\\n\\n/// @dev Storage struct that holds Curve pool details\\nstruct Pool {\\n    /// @dev Pool address\\n    address addr;\\n    /// @dev `true` if a pool is the meta pool (the pool that contains other Curve LP Tokens)\\n    bool isMeta;\\n}\\n\\n/// @dev Describes an LP Token with all the details required for the price calculation\\nstruct LPTokenDetails {\\n    /// @dev A pool of the LP Token. See a Pool struct\\n    Pool pool;\\n    /// @dev A list of the LP token pool coins\\n    address[] coins;\\n}\\n\",\"keccak256\":\"0x1ac2f9680532ec19462b5d3a9dbc5081bac531c93e938bcbb25c72d200563b76\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetcher\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetcher {\\n    /// @notice Emitted when Curve LP registry address has been updated\\n    /// @param registry The configured registry address\\n    event RegistryUpdated(address indexed registry);\\n\\n    /// @notice Pulls a registry address from the Curve address provider\\n    function updateRegistry() external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @dev This method should not revert. If the data is not found or provided an invalid LP token address,\\n    /// it should return an empty data structure.\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n      external\\n      view\\n      returns (\\n        LPTokenDetails memory details,\\n        bytes memory data\\n      );\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Registry Fatcher\\n    /// @return always curveLPTokensDetailsFetcherPing.selector\\n    function curveLPTokensDetailsFetcherPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf16275af21fc6262495a13f19596467df8bda0999044bae0ed941d8e24bd14c0\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ICurveLPTokensDetailsFetcher.sol\\\";\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetchers repository\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetchersRepository {\\n    /// @notice Emitted when Curve LP token fetcher added to the repository\\n    /// @param fetcher Added fetcher address\\n    event FetcherAdded(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Emitted when Curve LP token fetcher removed from the repository\\n    /// @param fetcher Removed fetcher address\\n    event FetcherRemoved(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Add Curve LP token details fetcher to the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be added to the repository\\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Remove Curve LP token details fetcher from the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be removed from the repository\\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (\\n            LPTokenDetails memory details,\\n            bytes memory data\\n        );\\n\\n    /// @return pool of the `_lpToken`\\n    function getLPTokenPool(address _lpToken) external view returns (address pool);\\n\\n    /// @dev Returns a list of the registered fetchers\\n    function getFetchers() external view returns (address[] memory);\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Repository fetcher\\n    /// @return always curveLPTokensFetchersRepositoryPing.selector\\n    function curveLPTokensFetchersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x442748d5327968d3430e35c35f792b7dccb46f9d2e5836564f598b2fde35621e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e98380380610e9883398101604081905261002f91610106565b80610051816001600160a01b031663eec3e6a761008060201b61055b1760201c565b61006e5760405163352cccdf60e01b815260040160405180910390fd5b6001600160a01b031660805250610159565b60006001600160a01b038316158015906100ff575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ea919061012f565b60e083901b6001600160e01b03199081169116145b9392505050565b60006020828403121561011857600080fd5b81516001600160a01b03811681146100ff57600080fd5b60006020828403121561014157600080fd5b81516001600160e01b0319811681146100ff57600080fd5b608051610d1d61017b6000396000818161011601526104440152610d1d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063010e3eb51461006757806306592e611461007c5780630956403e146100ac5780633afc259d146100c15780634537f354146100e2578063b918b49f146100f5575b600080fd5b61007a610075366004610817565b61010a565b005b61008f61008a366004610817565b610250565b6040516001600160a01b0390911681526020015b60405180910390f35b6040516304ab201f60e11b81526020016100a3565b6100d46100cf3660046108cc565b610347565b6040516100a39291906109bb565b61007a6100f0366004610817565b610438565b6100fd61054a565b6040516100a39190610a48565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101969190610a95565b6001600160a01b0316146101bd5760405163605919ad60e11b815260040160405180910390fd5b6101d4816001600160a01b03166314f2627e61055b565b6101f15760405163945b158960e01b815260040160405180910390fd5b6101fc6000826105e3565b6102195760405163eafc395960e01b815260040160405180910390fd5b6040516001600160a01b038216907f95fb75c8f58681a64a6224cbf82dda1fd42f4c1de0a308d3530d910543d10c1f90600090a250565b6040805160808101825260009181018281526060828101849052908252602082018190528291600061028260006105f8565b90505b8084101561033e5760006102998186610602565b604051633afc259d60e01b81529091506001600160a01b03821690633afc259d906102ca908a908890600401610ab2565b600060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030f9190810190610b23565b8151519095509093506001600160a01b0316156103325750505151949350505050565b50600190930192610285565b50505050919050565b604080516080810182526000918101828152606080830184905290825260208201819052909180610377816105f8565b90505b8082101561042e57600061038e8184610602565b604051633afc259d60e01b81529091506001600160a01b03821690633afc259d906103bf908a908a90600401610ab2565b600060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104049190810190610b23565b81515191965094506001600160a01b03161561042257505050610431565b5060019091019061037a565b50505b9250929050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610a95565b6001600160a01b0316146104eb5760405163605919ad60e11b815260040160405180910390fd5b6104f660008261060e565b610513576040516303adf71f60e11b815260040160405180910390fd5b6040516001600160a01b038216907fe4bf6a1bd5d0986db3e12fe13fc6ab251b3c28656aa8d9c17952d66e82943ac790600090a250565b60606105566000610623565b905090565b60006001600160a01b038316158015906105da575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610c6c565b60e083901b6001600160e01b03199081169116145b90505b92915050565b60006105da836001600160a01b038416610637565b60006105dd825490565b60006105da8383610686565b60006105da836001600160a01b0384166106b0565b60606000610630836107a3565b9392505050565b600081815260018301602052604081205461067e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105dd565b5060006105dd565b600082600001828154811061069d5761069d610c96565b9060005260206000200154905092915050565b600081815260018301602052604081205480156107995760006106d4600183610cac565b85549091506000906106e890600190610cac565b905081811461074d57600086600001828154811061070857610708610c96565b906000526020600020015490508087600001848154811061072b5761072b610c96565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061075e5761075e610cd1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105dd565b60009150506105dd565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107f357602002820191906000526020600020905b8154815260200190600101908083116107df575b50505050509050919050565b6001600160a01b038116811461081457600080fd5b50565b60006020828403121561082957600080fd5b8135610630816107ff565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561086d5761086d610834565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561089c5761089c610834565b604052919050565b600067ffffffffffffffff8211156108be576108be610834565b50601f01601f191660200190565b600080604083850312156108df57600080fd5b82356108ea816107ff565b9150602083013567ffffffffffffffff81111561090657600080fd5b8301601f8101851361091757600080fd5b803561092a610925826108a4565b610873565b81815286602083850101111561093f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b8381101561097a578181015183820152602001610962565b83811115610989576000848401525b50505050565b600081518084526109a781602086016020860161095f565b601f01601f19169290920160200192915050565b60408152600060a08201845160018060a01b03808251166040860152602080830151151560608701528088015192506060608087015283835180865260c0880191508285019550600094505b80851015610a2957855184168252948201946001949094019390820190610a07565b5086810382880152610a3b818961098f565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610a895783516001600160a01b031683529284019291840191600101610a64565b50909695505050505050565b600060208284031215610aa757600080fd5b8151610630816107ff565b6001600160a01b0383168152604060208201819052600090610ad69083018461098f565b949350505050565b600082601f830112610aef57600080fd5b8151610afd610925826108a4565b818152846020838601011115610b1257600080fd5b610ad682602083016020870161095f565b60008060408385031215610b3657600080fd5b825167ffffffffffffffff80821115610b4e57600080fd5b908401908186036060811215610b6357600080fd5b610b6b61084a565b6040821215610b7957600080fd5b610b8161084a565b91508351610b8e816107ff565b82526020848101518015158114610ba457600080fd5b8382015291815260408401519183831115610bbe57600080fd5b828501945088601f860112610bd257600080fd5b8451925083831115610be657610be6610834565b8260051b610bf5828201610873565b938452858101820193828101908b861115610c0f57600080fd5b968301965b85881015610c395787519250610c29836107ff565b8282529683019690830190610c14565b84840152505087015190955092505080821115610c5557600080fd5b50610c6285828601610ade565b9150509250929050565b600060208284031215610c7e57600080fd5b81516001600160e01b03198116811461063057600080fd5b634e487b7160e01b600052603260045260246000fd5b600082821015610ccc57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122081d4d57b272e0ec842f17ce4563db3db5b1ff115600847dfe955fd91361a7e9b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063010e3eb51461006757806306592e611461007c5780630956403e146100ac5780633afc259d146100c15780634537f354146100e2578063b918b49f146100f5575b600080fd5b61007a610075366004610817565b61010a565b005b61008f61008a366004610817565b610250565b6040516001600160a01b0390911681526020015b60405180910390f35b6040516304ab201f60e11b81526020016100a3565b6100d46100cf3660046108cc565b610347565b6040516100a39291906109bb565b61007a6100f0366004610817565b610438565b6100fd61054a565b6040516100a39190610a48565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101969190610a95565b6001600160a01b0316146101bd5760405163605919ad60e11b815260040160405180910390fd5b6101d4816001600160a01b03166314f2627e61055b565b6101f15760405163945b158960e01b815260040160405180910390fd5b6101fc6000826105e3565b6102195760405163eafc395960e01b815260040160405180910390fd5b6040516001600160a01b038216907f95fb75c8f58681a64a6224cbf82dda1fd42f4c1de0a308d3530d910543d10c1f90600090a250565b6040805160808101825260009181018281526060828101849052908252602082018190528291600061028260006105f8565b90505b8084101561033e5760006102998186610602565b604051633afc259d60e01b81529091506001600160a01b03821690633afc259d906102ca908a908890600401610ab2565b600060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030f9190810190610b23565b8151519095509093506001600160a01b0316156103325750505151949350505050565b50600190930192610285565b50505050919050565b604080516080810182526000918101828152606080830184905290825260208201819052909180610377816105f8565b90505b8082101561042e57600061038e8184610602565b604051633afc259d60e01b81529091506001600160a01b03821690633afc259d906103bf908a908a90600401610ab2565b600060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104049190810190610b23565b81515191965094506001600160a01b03161561042257505050610431565b5060019091019061037a565b50505b9250929050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610a95565b6001600160a01b0316146104eb5760405163605919ad60e11b815260040160405180910390fd5b6104f660008261060e565b610513576040516303adf71f60e11b815260040160405180910390fd5b6040516001600160a01b038216907fe4bf6a1bd5d0986db3e12fe13fc6ab251b3c28656aa8d9c17952d66e82943ac790600090a250565b60606105566000610623565b905090565b60006001600160a01b038316158015906105da575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610c6c565b60e083901b6001600160e01b03199081169116145b90505b92915050565b60006105da836001600160a01b038416610637565b60006105dd825490565b60006105da8383610686565b60006105da836001600160a01b0384166106b0565b60606000610630836107a3565b9392505050565b600081815260018301602052604081205461067e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105dd565b5060006105dd565b600082600001828154811061069d5761069d610c96565b9060005260206000200154905092915050565b600081815260018301602052604081205480156107995760006106d4600183610cac565b85549091506000906106e890600190610cac565b905081811461074d57600086600001828154811061070857610708610c96565b906000526020600020015490508087600001848154811061072b5761072b610c96565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061075e5761075e610cd1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105dd565b60009150506105dd565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107f357602002820191906000526020600020905b8154815260200190600101908083116107df575b50505050509050919050565b6001600160a01b038116811461081457600080fd5b50565b60006020828403121561082957600080fd5b8135610630816107ff565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561086d5761086d610834565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561089c5761089c610834565b604052919050565b600067ffffffffffffffff8211156108be576108be610834565b50601f01601f191660200190565b600080604083850312156108df57600080fd5b82356108ea816107ff565b9150602083013567ffffffffffffffff81111561090657600080fd5b8301601f8101851361091757600080fd5b803561092a610925826108a4565b610873565b81815286602083850101111561093f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b8381101561097a578181015183820152602001610962565b83811115610989576000848401525b50505050565b600081518084526109a781602086016020860161095f565b601f01601f19169290920160200192915050565b60408152600060a08201845160018060a01b03808251166040860152602080830151151560608701528088015192506060608087015283835180865260c0880191508285019550600094505b80851015610a2957855184168252948201946001949094019390820190610a07565b5086810382880152610a3b818961098f565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610a895783516001600160a01b031683529284019291840191600101610a64565b50909695505050505050565b600060208284031215610aa757600080fd5b8151610630816107ff565b6001600160a01b0383168152604060208201819052600090610ad69083018461098f565b949350505050565b600082601f830112610aef57600080fd5b8151610afd610925826108a4565b818152846020838601011115610b1257600080fd5b610ad682602083016020870161095f565b60008060408385031215610b3657600080fd5b825167ffffffffffffffff80821115610b4e57600080fd5b908401908186036060811215610b6357600080fd5b610b6b61084a565b6040821215610b7957600080fd5b610b8161084a565b91508351610b8e816107ff565b82526020848101518015158114610ba457600080fd5b8382015291815260408401519183831115610bbe57600080fd5b828501945088601f860112610bd257600080fd5b8451925083831115610be657610be6610834565b8260051b610bf5828201610873565b938452858101820193828101908b861115610c0f57600080fd5b968301965b85881015610c395787519250610c29836107ff565b8282529683019690830190610c14565b84840152505087015190955092505080821115610c5557600080fd5b50610c6285828601610ade565b9150509250929050565b600060208284031215610c7e57600080fd5b81516001600160e01b03198116811461063057600080fd5b634e487b7160e01b600052603260045260246000fd5b600082821015610ccc57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122081d4d57b272e0ec842f17ce4563db3db5b1ff115600847dfe955fd91361a7e9b64736f6c634300080d0033",
  "devdoc": {
    "details": "For more info about Curve LP Tokens details fetchers see ICurveLPTokensDetailsFetcher",
    "errors": {
      "FetcherAlreadyAdded()": [
        {
          "details": "Revert if Curve LP Tokens details fetcher is already added to the set"
        }
      ],
      "FetcherIsNotRegistered()": [
        {
          "details": "Revert if Curve LP Tokens details fetcher is not registered in the repository"
        }
      ],
      "InvalidFetcher()": [
        {
          "details": "Revert on a false sanity check with `Ping` library for a fetcher"
        }
      ],
      "InvalidPriceProviderRepository()": [
        {
          "details": "Revert on a false sanity check with `Ping` library"
        }
      ],
      "OnlyManager()": [
        {
          "details": "Revert if `msg.sender` is not Price Providers Repository manager"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addFetcher(address)": {
        "params": {
          "_fetcher": "A Curve LP token details fetcher to be added to the repository"
        }
      },
      "constructor": {
        "details": "Constructor is required for indirect PriceProvidersRepositoryManager initialization. Arguments for PriceProvidersRepositoryManager initialization are given in the modifier-style in the derived constructor. CurveLPTokensDetailsFetchersRepository constructor body should be empty as we need to do nothing.",
        "params": {
          "_repository": "Price providers repository address"
        }
      },
      "curveLPTokensFetchersRepositoryPing()": {
        "returns": {
          "_0": "always curveLPTokensFetchersRepositoryPing.selector"
        }
      },
      "getFetchers()": {
        "details": "Returns a list of the registered fetchers"
      },
      "getLPTokenDetails(address,bytes)": {
        "params": {
          "_data": "Any additional data that can be required",
          "_lpToken": "Curve LP token address"
        },
        "returns": {
          "data": "Any additional data to return",
          "details": "LP token details. See CurveLPTokensDataTypes.LPTokenDetails"
        }
      },
      "getLPTokenPool(address)": {
        "returns": {
          "pool": "of the `_lpToken`"
        }
      },
      "removeFetcher(address)": {
        "params": {
          "_fetcher": "A Curve LP token details fetcher to be removed from the repository"
        }
      }
    },
    "stateVariables": {
      "_fetchers": {
        "details": "Curve LP Tokens details fetchers set"
      }
    },
    "title": "Curve LP Tokens details fetchers repository",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FetcherAdded(address)": {
        "notice": "Emitted when Curve LP token fetcher added to the repository"
      },
      "FetcherRemoved(address)": {
        "notice": "Emitted when Curve LP token fetcher removed from the repository"
      }
    },
    "kind": "user",
    "methods": {
      "addFetcher(address)": {
        "notice": "Add Curve LP token details fetcher to the repository"
      },
      "curveLPTokensFetchersRepositoryPing()": {
        "notice": "Helper method that allows easily detects, if contract is Curve Repository fetcher"
      },
      "getLPTokenDetails(address,bytes)": {
        "notice": "Curve LP Token details getter"
      },
      "removeFetcher(address)": {
        "notice": "Remove Curve LP token details fetcher from the repository"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40615,
        "contract": "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol:CurveLPTokensDetailsFetchersRepository",
        "label": "_fetchers",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)7648_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7648_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7647,
            "contract": "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol:CurveLPTokensDetailsFetchersRepository",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7347_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7347_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7342,
            "contract": "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol:CurveLPTokensDetailsFetchersRepository",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7346,
            "contract": "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol:CurveLPTokensDetailsFetchersRepository",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}