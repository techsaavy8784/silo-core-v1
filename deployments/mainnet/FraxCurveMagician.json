{
  "address": "0xE067b967A36A136084Eb9DF0149Dde64F01ea7d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveLPTokensDetailsFetchersRepository",
          "name": "_fetchersRepository",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "_priceProvidersRepository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crv3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tricrypto2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_frax",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurvePriceProviderLPTokenPair",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFetchersRepository",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOrNotSupportedLPToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unsupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "Cached",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRV_3_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FETCHERS_REPO",
      "outputs": [
        {
          "internalType": "contract ICurveLPTokensDetailsFetchersRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COINS",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRICTYPTO_2_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolCoins",
      "outputs": [
        {
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "towardsAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a8978be3fa247063e14cab86b3d892e75573ba65eb23e87c44fcc92e1fbb248",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0xE067b967A36A136084Eb9DF0149Dde64F01ea7d1",
    "transactionIndex": 554,
    "gasUsed": "1198647",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfef054d9a6a3f6e29b2ff2e5bcd9102a05d4dec158f39a5dea2bcf2a48e55a3d",
    "transactionHash": "0x4a8978be3fa247063e14cab86b3d892e75573ba65eb23e87c44fcc92e1fbb248",
    "logs": [],
    "blockNumber": 17391882,
    "cumulativeGasUsed": "25374213",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeaC05930c685A168c40C3aA9D017691a88e31fE9",
    "0x7C2ca9D502f2409BeceAfa68E97a176Ff805029F",
    "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
    "0xD51a44d3FaE010294C616388b506AcdA1bfAAE46",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x853d955aCEf822Db058eb8505911ED77F175b99e"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9303397e20c2b4613b58e6ec221d180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveLPTokensDetailsFetchersRepository\",\"name\":\"_fetchersRepository\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"_priceProvidersRepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tricrypto2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_frax\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurvePriceProviderLPTokenPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFetchersRepository\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOrNotSupportedLPToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"Cached\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV_3_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FETCHERS_REPO\",\"outputs\":[{\"internalType\":\"contract ICurveLPTokensDetailsFetchersRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COINS\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRICTYPTO_2_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Curve LP Tokens unwrapping IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\",\"errors\":{\"InvalidCurvePriceProviderLPTokenPair()\":[{\"details\":\"Revert if we are not able to get the pool coins by provided curve LP token\"}],\"InvalidFetchersRepository()\":[{\"details\":\"Revert on a false sanity check with `Ping` library\"}],\"InvalidOrNotSupportedLPToken()\":[{\"details\":\"Revert if we are not able to get LP Token pool details from the price provider\"}],\"Unsupported()\":[{\"details\":\"Revert on a `swapAmountOut` call as it in unsupported \"}]},\"kind\":\"dev\",\"methods\":{\"towardsAsset(address,uint256)\":{\"details\":\"As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\"},\"towardsNative(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be unwrapped\"},\"returns\":{\"amountOut\":\"Amount of the `tokenOut` that we received\",\"tokenOut\":\"A token that the `_asset` has been converted to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FETCHERS_REPO()\":{\"notice\":\"Curve LP Tokens details fetchers repository\"},\"towardsNative(address,uint256)\":{\"notice\":\"Operates to unwrap an `_asset`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol\":\"FraxCurveMagician\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/liquidation/magicians/_common/libraries/FraxUsdcPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary FraxUsdcPoolLib {\\n    int128 constant public FRAX_INDEX = 0;\\n    int128 constant public USDC_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function fraxToUsdcViaCurve(uint256 _amount, address _pool, IERC20 _frax) internal returns (uint256) {\\n        _frax.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            FRAX_INDEX,\\n            USDC_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function usdcToFraxViaCurve(uint256 _amount, address _pool, IERC20 _usdc) internal returns (uint256) {\\n        _usdc.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            USDC_INDEX,\\n            FRAX_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x48de59b787ae7673f557135ca0f8077ae4d90f5dc33b8564cf67ff4dc91e5de4\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/UsdcUsdt3poolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike128.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdcUsdt3poolLib {\\n    using SafeERC20 for IERC20;\\n\\n    int128 constant public USDC_INDEX = 1;\\n    int128 constant public USDT_INDEX = 2;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function usdcToUsdtVia3Pool(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdc,\\n        IERC20 _usdt\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _usdc.approve(_pool, _amount);\\n\\n        uint256 balanceBefore = _usdt.balanceOf(address(this));\\n\\n        ICurvePoolLike128(_pool).exchange(\\n            USDC_INDEX,\\n            USDT_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _usdt.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n}\\n\",\"keccak256\":\"0xcc49869c476c8f589b3624e5336155a0c35a3154629d93deeccac7298a606ddc\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/UsdtWethTricrypto2Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike256.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdtWethTricrypto2Lib {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public USDT_INDEX = 0;\\n    uint256 constant public WETH_INDEX = 2;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function usdtToWethTricrypto2(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdt,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _usdt.safeApprove(_pool, _amount);\\n\\n        uint256 balanceBefore = _weth.balanceOf(address(this));\\n\\n        ICurvePoolLike256(_pool).exchange(\\n            USDT_INDEX,\\n            WETH_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _weth.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n}\\n\",\"keccak256\":\"0xf58538dc78884b4d6c1d3b795262dbf2fb4203708d8146371db0719d4a07d504\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/curveLPTokens/CurveLPTokensMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/ICurvePoolLike.sol\\\";\\nimport \\\"../interfaces/ICurveLPTokensPriceProviderLike.sol\\\";\\nimport \\\"../interfaces/IMagician.sol\\\";\\nimport \\\"../../../lib/Ping.sol\\\";\\nimport \\\"../../../interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"../../../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../../../priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\\\";\\nimport \\\"../../../priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\\\";\\nimport \\\"../../../priceProviders/IERC20LikeV2.sol\\\";\\n\\n/// @dev Curve LP Tokens unwrapping\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nabstract contract CurveLPTokensMagician is IMagician {\\n    /// @dev Detail of the pool underlying coin required for the liquidation\\n    struct PoolCoinDetails {\\n        address coin;\\n        uint8 index; // an index of the coin in the pool\\n    }\\n\\n    /// @dev Max number of coins in the Curve protocol\\n    int128 constant public MAX_COINS = 8;\\n\\n    /// @notice Curve LP Tokens details fetchers repository\\n    // solhint-disable-next-line var-name-mixedcase\\n    ICurveLPTokensDetailsFetchersRepository public immutable FETCHERS_REPO;\\n    /// @dev Price providers repository quote token\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable QUOTE_TOKEN;\\n\\n    // Curve LP Token => coin and an index\\n    mapping(address => PoolCoinDetails) public poolCoins;\\n    // Curve LP Token => pool\\n    mapping(address => address) public pools;\\n\\n    /// @dev Revert if we are not able to get LP Token pool details from the price provider\\n    error InvalidOrNotSupportedLPToken();\\n    /// @dev Revert on a `swapAmountOut` call as it in unsupported \\n    error Unsupported();\\n    /// @dev Revert on a false sanity check with `Ping` library\\n    error InvalidFetchersRepository();\\n    /// @dev Revert if we are not able to get the pool coins by provided curve LP token\\n    error InvalidCurvePriceProviderLPTokenPair();\\n\\n    event Cached(address pool, address coin);\\n\\n    constructor(\\n        ICurveLPTokensDetailsFetchersRepository _fetcherRepository,\\n        IPriceProvidersRepository _priceProvidersRepository\\n    ) {\\n        if (!Ping.pong(_fetcherRepository.curveLPTokensFetchersRepositoryPing)) {\\n            revert InvalidFetchersRepository();\\n        }\\n\\n        FETCHERS_REPO = _fetcherRepository;\\n        QUOTE_TOKEN = _priceProvidersRepository.quoteToken();\\n    }\\n\\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\\n    function towardsAsset(address, uint256) external pure returns (address, uint256) {\\n        revert Unsupported();\\n    }\\n\\n    function _getCurvePoolUnderlyingCoin(address[] memory _coins) internal virtual view returns (address, uint256) {\\n        if (_coins.length == 0) revert InvalidCurvePriceProviderLPTokenPair();\\n\\n        // if one of the pool underlying coins is the same as quote token\\n        // we must return it. The operation will be similar to swap.\\n        // Otherwise we need to unwrap LP token, so we return _coins[0] and an index 0\\n        for (uint256 i; i < _coins.length;) {\\n            if (QUOTE_TOKEN == _coins[i]) {\\n                return (QUOTE_TOKEN, i);\\n            }\\n\\n            // Because of the condition, `i < coins.length` overflow is impossible\\n            unchecked { i++; }\\n        }\\n\\n        uint256 zeroIndex = 0;\\n        return (_coins[0], zeroIndex);\\n    }\\n\\n    function _getPoolAndCoin(address _asset) internal virtual returns (address pool, address coin) {\\n        pool = pools[_asset];\\n\\n        if (pool != address(0)) {\\n            return (pool, poolCoins[_asset].coin);\\n        }\\n\\n        bytes memory data; // We'll use it as an `input` and `return` data\\n        LPTokenDetails memory poolDetails;\\n\\n        (poolDetails, data) = FETCHERS_REPO.getLPTokenDetails(_asset, data);\\n\\n        if (poolDetails.pool.addr == address(0) || poolDetails.coins.length == 0) {\\n            revert InvalidOrNotSupportedLPToken();\\n        }\\n        \\n        uint256 index;\\n        pool = poolDetails.pool.addr;\\n        (coin, index) = _getCurvePoolUnderlyingCoin(poolDetails.coins);\\n\\n        pools[_asset] = pool;\\n        poolCoins[_asset] = PoolCoinDetails({ coin: coin, index: uint8(index)});\\n        \\n        emit Cached(pool, coin);\\n    }\\n}\\n\",\"keccak256\":\"0x191f1ba1d51d6136058018e512bcdea5fbe106fc350c1e898ffb429a52b688fc\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/curveLPTokens/CurveLPTokensMagician128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./CurveLPTokensMagician.sol\\\";\\nimport \\\"../interfaces/ICurvePoolExchange128.sol\\\";\\nimport \\\"../interfaces/ICurveLPTokensPriceProviderLike.sol\\\";\\nimport \\\"../../../interfaces/IPriceProvidersRepository.sol\\\";\\n\\n/// @dev Curve LP Tokens unwrapping\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract CurveLPTokensMagician128 is CurveLPTokensMagician {\\n    constructor(\\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\\n        IPriceProvidersRepository _priceProvidersRepository\\n    )\\n        CurveLPTokensMagician(\\n            _fetchersRepository,\\n            _priceProvidersRepository\\n        )\\n    {\\n        // initial setup is done in CurveLPTokensMagician, nothing to do here\\n    }\\n\\n    function towardsNative(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 amountOut)\\n    {\\n        (tokenOut, amountOut, ) = _towardsNative(_asset, _amount);\\n    }\\n\\n    function _towardsNative(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        internal\\n        virtual\\n        returns (address tokenOut, uint256 amountOut, address poolAddress)\\n    {\\n        (poolAddress, tokenOut) = _getPoolAndCoin(_asset);\\n\\n        ICurvePoolExchange128 pool = ICurvePoolExchange128(poolAddress);\\n\\n        int128 i = _getCoinIndex(_asset);\\n        uint256 amountToWithdraw = pool.calc_withdraw_one_coin(_amount, i);\\n\\n        uint256 swapperBalBefore = IERC20LikeV2(tokenOut).balanceOf(address(this));\\n\\n        // some versions of the Curve pools like 3Crv (0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\\n        // do not have a return value in the `remove_liquidity_one_coin` function\\n        // because of this we are calculating `amountOut`\\n        pool.remove_liquidity_one_coin(_amount, i, amountToWithdraw);\\n\\n        uint256 swapperBalAfter = IERC20LikeV2(tokenOut).balanceOf(address(this));\\n\\n        // Balance after withdrawal can't be less than it was before\\n        unchecked { amountOut = swapperBalAfter - swapperBalBefore; }\\n    }\\n\\n    function _getCoinIndex(address _asset) internal virtual view returns (int128 index) {\\n        uint8 coinIndex = poolCoins[_asset].index;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { index := coinIndex }\\n    }\\n}\\n\",\"keccak256\":\"0xbca1ab99b727e976527eae22246853ab9357f10b265eca603a75bfa5eba6df3f\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../CurveLPTokensMagician128.sol\\\";\\nimport \\\"../../_common/libraries/FraxUsdcPoolLib.sol\\\";\\nimport \\\"../../_common/libraries/UsdcUsdt3poolLib.sol\\\";\\nimport \\\"../../_common/libraries/UsdtWethTricrypto2Lib.sol\\\";\\n\\n/// @dev Curve LP Tokens unwrapping\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract FraxCurveMagician is CurveLPTokensMagician128 {\\n    using FraxUsdcPoolLib for uint256;\\n    using UsdcUsdt3poolLib for uint256;\\n    using UsdtWethTricrypto2Lib for uint256;\\n\\n    // solhint-disable var-name-mixedcase\\n    address public immutable CRV_3_POOL;\\n    address public immutable TRICTYPTO_2_POOL;\\n\\n    IERC20 public immutable USDC;\\n    IERC20 public immutable USDT;\\n    IERC20 public immutable WETH;\\n    IERC20 public immutable FRAX;\\n    // solhint-enable var-name-mixedcase\\n\\n    error EmptyAddress();\\n\\n    constructor(\\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        address _crv3Pool,\\n        address _tricrypto2,\\n        address _usdc,\\n        address _usdt,\\n        address _weth,\\n        address _frax\\n    )\\n        CurveLPTokensMagician128(\\n            _fetchersRepository,\\n            _priceProvidersRepository\\n        )\\n    {\\n        if (_crv3Pool == address(0)) revert EmptyAddress();\\n        if (_tricrypto2 == address(0)) revert EmptyAddress();\\n        if (_usdc == address(0)) revert EmptyAddress();\\n        if (_usdt == address(0)) revert EmptyAddress();\\n        if (_weth == address(0)) revert EmptyAddress();\\n        if (_frax == address(0)) revert EmptyAddress();\\n\\n        CRV_3_POOL = _crv3Pool;\\n        TRICTYPTO_2_POOL = _tricrypto2;\\n\\n        USDC = IERC20(_usdc);\\n        USDT = IERC20(_usdt);\\n        WETH = IERC20(_weth);\\n        FRAX = IERC20(_frax);\\n    }\\n\\n    function towardsNative(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        returns (address tokenOut, uint256 amountOut)\\n    {\\n        (, uint256 fraxAmount, address poolAddress) = _towardsNative(_asset, _amount);\\n\\n        tokenOut = address(WETH);\\n\\n        amountOut = fraxAmount\\n            .fraxToUsdcViaCurve(poolAddress, FRAX)\\n            .usdcToUsdtVia3Pool(CRV_3_POOL, USDC, USDT)\\n            .usdtToWethTricrypto2(TRICTYPTO_2_POOL, USDT, WETH);\\n    }\\n}\\n\",\"keccak256\":\"0x6200c7e988284f4bbafcdd54cbaf1af64959bb9ae4816ff57e474daa180ddf9b\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurveLPTokensPriceProviderLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../../../priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\\\";\\n\\ninterface ICurveLPTokensPriceProviderLike is IPriceProvider {\\n    function lpTokenPool(address _lpToken) external view returns (Pool memory);\\n    function getCoins(address _lpToken) external view returns (PoolCoin[] memory);\\n}\\n\",\"keccak256\":\"0x4ef1749abbbdbf6f331b3c1b1969e4cac10da40335f74b70a85e08888264c1d9\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolExchange128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ICurvePoolLike128.sol\\\";\\n\\ninterface ICurvePoolExchange128 is ICurvePoolLike128 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function remove_liquidity_one_coin(uint256 _tokenAmount, int128 i, uint256 _minAmount) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function calc_withdraw_one_coin(uint256 _tokenAmount, int128 i) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa90537653862b066063f6a089c07a47544f63d92ac37fe32d9f2353eaef85135\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev A simplified version of the Curve Pool interface with methods\\n/// that are required for the SETH Magician.\\ninterface ICurvePoolLike {\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external payable returns (uint256);\\n    function coins(uint256 i) external view returns (address);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfd167be654e636863836e6b339daaf90820ee311a6eefe4f79ef3a40a95d2c4d\",\"license\":\"BUSL-1.1\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa58ebdd5323cc5e1c7cf07db1eba8a7be095de549883987e62330ce0d49236d3\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike128WithReturn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128WithReturn {\\n    // solhint-disable func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 minDy) external returns (uint256);\\n    function exchange_underlying(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n    // solhint-enable func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x76678eaec7d80bcd814573eef3890219bc2b82e23c248730b3b3c686adb93f60\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike256 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06bcebb8b70b015b2664e41603f53f4d99356383b6e99e242939d7a02525c917\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xb48290785d1be3d5b1ed767ee628faa69ee7ded238de776d66b9e0795536ff50\",\"license\":\"MIT\"},\"contracts/priceProviders/IERC20LikeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6;\\n\\n/// @dev This is only meant to be used by price providers, which use a different\\n/// Solidity version than the rest of the codebase. This way de won't need to include\\n/// an additional version of OpenZeppelin's library.\\ninterface IERC20LikeV2 {\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x55746da5754f7a613f86beaf934509a76f6d54372f6799defae4a5a3ab94afe2\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev Identifiers of the Curve protocol components in the Curve address provider\\nenum RegistryId {\\n    MAIN_REGISTRY_0,\\n    POOL_INFO_GETTER_1,\\n    EXCHANGES_2,\\n    META_POOL_FACTORY_3,\\n    FEE_DISTRIBUTOR_4,\\n    CRYPTO_SWAP_REGISTRY_5,\\n    CRYPTO_POOL_FACTORY_6\\n}\\n\\n/// @dev Storage struct that holds Curve pool coin details\\nstruct PoolCoin {\\n    /// @dev Coin address\\n    address addr;\\n    /// @dev `true` if a coin is Curve LP Token (used in the meta pools)\\n    bool isLPToken;\\n}\\n\\n/// @dev Storage struct that holds Curve pool details\\nstruct Pool {\\n    /// @dev Pool address\\n    address addr;\\n    /// @dev `true` if a pool is the meta pool (the pool that contains other Curve LP Tokens)\\n    bool isMeta;\\n}\\n\\n/// @dev Describes an LP Token with all the details required for the price calculation\\nstruct LPTokenDetails {\\n    /// @dev A pool of the LP Token. See a Pool struct\\n    Pool pool;\\n    /// @dev A list of the LP token pool coins\\n    address[] coins;\\n}\\n\",\"keccak256\":\"0x1ac2f9680532ec19462b5d3a9dbc5081bac531c93e938bcbb25c72d200563b76\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetcher\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetcher {\\n    /// @notice Emitted when Curve LP registry address has been updated\\n    /// @param registry The configured registry address\\n    event RegistryUpdated(address indexed registry);\\n\\n    /// @notice Pulls a registry address from the Curve address provider\\n    function updateRegistry() external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @dev This method should not revert. If the data is not found or provided an invalid LP token address,\\n    /// it should return an empty data structure.\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n      external\\n      view\\n      returns (\\n        LPTokenDetails memory details,\\n        bytes memory data\\n      );\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Registry Fatcher\\n    /// @return always curveLPTokensDetailsFetcherPing.selector\\n    function curveLPTokensDetailsFetcherPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf16275af21fc6262495a13f19596467df8bda0999044bae0ed941d8e24bd14c0\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ICurveLPTokensDetailsFetcher.sol\\\";\\nimport \\\"../_common/CurveLPTokensDataTypes.sol\\\";\\n\\n/// @title Curve LP Tokens details fetchers repository\\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\\n/// have different interfaces.\\ninterface ICurveLPTokensDetailsFetchersRepository {\\n    /// @notice Emitted when Curve LP token fetcher added to the repository\\n    /// @param fetcher Added fetcher address\\n    event FetcherAdded(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Emitted when Curve LP token fetcher removed from the repository\\n    /// @param fetcher Removed fetcher address\\n    event FetcherRemoved(ICurveLPTokensDetailsFetcher indexed fetcher);\\n\\n    /// @notice Add Curve LP token details fetcher to the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be added to the repository\\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Remove Curve LP token details fetcher from the repository\\n    /// @param _fetcher A Curve LP token details fetcher to be removed from the repository\\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\\n\\n    /// @notice Curve LP Token details getter\\n    /// @param _lpToken Curve LP token address\\n    /// @param _data Any additional data that can be required\\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\\n    /// @return data Any additional data to return\\n    function getLPTokenDetails(\\n        address _lpToken,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (\\n            LPTokenDetails memory details,\\n            bytes memory data\\n        );\\n\\n    /// @return pool of the `_lpToken`\\n    function getLPTokenPool(address _lpToken) external view returns (address pool);\\n\\n    /// @dev Returns a list of the registered fetchers\\n    function getFetchers() external view returns (address[] memory);\\n\\n    /// @notice Helper method that allows easily detects, if contract is Curve Repository fetcher\\n    /// @return always curveLPTokensFetchersRepositoryPing.selector\\n    function curveLPTokensFetchersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x442748d5327968d3430e35c35f792b7dccb46f9d2e5836564f598b2fde35621e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620018d3380380620018d38339810160408190526200003591620002ce565b878781816200005d826001600160a01b0316630956403e6200022b60201b620004301760201c565b6200007b5760405163011848e160e11b815260040160405180910390fd5b816001600160a01b03166080816001600160a01b031681525050806001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fa91906200038f565b6001600160a01b0390811660a0528a1693506200012e9250505057604051637138356f60e01b815260040160405180910390fd5b6001600160a01b0385166200015657604051637138356f60e01b815260040160405180910390fd5b6001600160a01b0384166200017e57604051637138356f60e01b815260040160405180910390fd5b6001600160a01b038316620001a657604051637138356f60e01b815260040160405180910390fd5b6001600160a01b038216620001ce57604051637138356f60e01b815260040160405180910390fd5b6001600160a01b038116620001f657604051637138356f60e01b815260040160405180910390fd5b6001600160a01b0395861660c05293851660e05291841661010052831661012052821661014052166101605250620003db9050565b60006001600160a01b03831615801590620002ae575082826040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002999190620003af565b60e083901b6001600160e01b03199081169116145b9392505050565b6001600160a01b0381168114620002cb57600080fd5b50565b600080600080600080600080610100898b031215620002ec57600080fd5b8851620002f981620002b5565b60208a01519098506200030c81620002b5565b60408a01519097506200031f81620002b5565b60608a01519096506200033281620002b5565b60808a01519095506200034581620002b5565b60a08a01519094506200035881620002b5565b60c08a01519093506200036b81620002b5565b60e08a01519092506200037e81620002b5565b809150509295985092959890939650565b600060208284031215620003a257600080fd5b8151620002ae81620002b5565b600060208284031215620003c257600080fd5b81516001600160e01b031981168114620002ae57600080fd5b60805160a05160c05160e05161010051610120516101405161016051611453620004806000396000818161027101526103d501526000818161024a015261031a0152600081816102bf015261036801526000818161017d01526103ae01526000818161029801526103470152600081816102e6015261038d01526000818161013e01528181610e090152610e380152600081816101fa0152610ade01526114536000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639dca40001161008c578063b0e4556f11610066578063b0e4556f1461026c578063bc5ef46714610293578063c54e44eb146102ba578063fba084a1146102e157600080fd5b80639dca4000146101f5578063a4063dbc1461021c578063ad5c46481461024557600080fd5b806321ebbf01146100d4578063384302a91461010b5780636ea477da1461012657806378892cea1461013957806389a30271146101785780638ffcc0651461019f575b600080fd5b6100e76100e2366004611086565b610308565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b610113600881565b604051600f9190910b8152602001610102565b6100e7610134366004611086565b610414565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610102565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101d46101ad3660046110b2565b6000602081905290815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835260ff909116602083015201610102565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b61016061022a3660046110b2565b6001602052600090815260409020546001600160a01b031681565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b60008060008061031886866104b6565b7f00000000000000000000000000000000000000000000000000000000000000009650909350915061040990507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866104017f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846103f98a8a7f00000000000000000000000000000000000000000000000000000000000000006106c8565b9291906107c8565b929190610997565b925050509250929050565b600080604051634851657960e11b815260040160405180910390fd5b60006001600160a01b038316158015906104af575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a91906110cf565b60e083901b6001600160e01b03199081169116145b9392505050565b60008060006104c485610a5d565b935090508060006104f5876001600160a01b031660009081526020819052604090205460ff600160a01b9091041690565b60405163cc2b27d760e01b815260048101889052600f82900b60248201529091506000906001600160a01b0384169063cc2b27d790604401602060405180830381865afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e91906110f9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc91906110f9565b604051630d2680e960e11b8152600481018a9052600f85900b6024820152604481018490529091506001600160a01b03851690631a4d01d290606401600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a0823190602401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906110f9565b9050818103965050505050509250925092565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190611127565b50604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df02124906084016020604051808303816000875af115801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906110f9565b949350505050565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690526000919084169063095ea7b3906044016020604051808303816000875af115801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190611127565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906110f9565b604051630f7c084960e21b8152600160048201819052600260248301526044820189905260648201529091506001600160a01b03861690633df02124906084015b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906110f9565b919091039695505050505050565b60006109ad6001600160a01b0384168587610c72565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1891906110f9565b604051630b68372160e31b8152600060048201526002602482015260448101889052600160648201529091506001600160a01b03861690635b41b908906084016108ec565b6001600160a01b03808216600090815260016020526040812054909116908115610aa357506001600160a01b039182166000908152602081905260409020549092911690565b604080516080810182526000918101828152606082810193909352815260208101829052604051633afc259d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633afc259d90610b15908890869060040161119e565b600060405180830381865afa158015610b32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5a9190810190611296565b8151519093509091506001600160a01b03161580610b7b5750602081015151155b15610b9957604051632dab5ccd60e21b815260040160405180910390fd5b8051516020820151909450600090610bb090610db3565b6001600160a01b03888116600081815260016020908152604080832080548d87166001600160a01b031990911681179091558151808301835288871680825260ff89811683870190815297875286865295849020915182549751909616600160a01b026001600160a81b031990971695909716949094179490941790925581519283528201929092529296509092507fad100fb0d449551c9d88b48509ed4dcdd964416a7094b30659487c3ea2e10296910160405180910390a1505050915091565b801580610cec5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906110f9565b155b610d5c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610dae908490610e91565b505050565b6000808251600003610dd8576040516326aef2bd60e21b815260040160405180910390fd5b60005b8351811015610e6857838181518110610df657610df66113d8565b60200260200101516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603610e60577f000000000000000000000000000000000000000000000000000000000000000094909350915050565b600101610ddb565b50600083600081518110610e7e57610e7e6113d8565b6020026020010151819250925050915091565b6000610ee6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f639092919063ffffffff16565b805190915015610dae5780806020019051810190610f049190611127565b610dae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d53565b60606107c0848460008585843b610fbc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d53565b600080866001600160a01b03168587604051610fd891906113ee565b60006040518083038185875af1925050503d8060008114611015576040519150601f19603f3d011682016040523d82523d6000602084013e61101a565b606091505b509150915061102a828286611035565b979650505050505050565b606083156110445750816104af565b8251156110545782518084602001fd5b8160405162461bcd60e51b8152600401610d53919061140a565b6001600160a01b038116811461108357600080fd5b50565b6000806040838503121561109957600080fd5b82356110a48161106e565b946020939093013593505050565b6000602082840312156110c457600080fd5b81356104af8161106e565b6000602082840312156110e157600080fd5b81516001600160e01b0319811681146104af57600080fd5b60006020828403121561110b57600080fd5b5051919050565b8051801515811461112257600080fd5b919050565b60006020828403121561113957600080fd5b6104af82611112565b60005b8381101561115d578181015183820152602001611145565b8381111561116c576000848401525b50505050565b6000815180845261118a816020860160208601611142565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906107c090830184611172565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156111fb576111fb6111c2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561122a5761122a6111c2565b604052919050565b600082601f83011261124357600080fd5b815167ffffffffffffffff81111561125d5761125d6111c2565b611270601f8201601f1916602001611201565b81815284602083860101111561128557600080fd5b6107c0826020830160208701611142565b600080604083850312156112a957600080fd5b825167ffffffffffffffff808211156112c157600080fd5b9084019081860360608112156112d657600080fd5b6112de6111d8565b60408212156112ec57600080fd5b6112f46111d8565b915083516113018161106e565b82526020611310858201611112565b838201529181526040840151918383111561132a57600080fd5b828501945088601f86011261133e57600080fd5b8451925083831115611352576113526111c2565b8260051b611361828201611201565b938452858101820193828101908b86111561137b57600080fd5b968301965b858810156113a557875192506113958361106e565b8282529683019690830190611380565b848401525050870151909550925050808211156113c157600080fd5b506113ce85828601611232565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60008251611400818460208701611142565b9190910192915050565b6020815260006104af602083018461117256fea2646970667358221220a8dfe225bec77757a64228a4b2985739b8a64f116c574b0c22a5d3142cf1bca664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639dca40001161008c578063b0e4556f11610066578063b0e4556f1461026c578063bc5ef46714610293578063c54e44eb146102ba578063fba084a1146102e157600080fd5b80639dca4000146101f5578063a4063dbc1461021c578063ad5c46481461024557600080fd5b806321ebbf01146100d4578063384302a91461010b5780636ea477da1461012657806378892cea1461013957806389a30271146101785780638ffcc0651461019f575b600080fd5b6100e76100e2366004611086565b610308565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b610113600881565b604051600f9190910b8152602001610102565b6100e7610134366004611086565b610414565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610102565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101d46101ad3660046110b2565b6000602081905290815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835260ff909116602083015201610102565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b61016061022a3660046110b2565b6001602052600090815260409020546001600160a01b031681565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b60008060008061031886866104b6565b7f00000000000000000000000000000000000000000000000000000000000000009650909350915061040990507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866104017f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846103f98a8a7f00000000000000000000000000000000000000000000000000000000000000006106c8565b9291906107c8565b929190610997565b925050509250929050565b600080604051634851657960e11b815260040160405180910390fd5b60006001600160a01b038316158015906104af575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a91906110cf565b60e083901b6001600160e01b03199081169116145b9392505050565b60008060006104c485610a5d565b935090508060006104f5876001600160a01b031660009081526020819052604090205460ff600160a01b9091041690565b60405163cc2b27d760e01b815260048101889052600f82900b60248201529091506000906001600160a01b0384169063cc2b27d790604401602060405180830381865afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e91906110f9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc91906110f9565b604051630d2680e960e11b8152600481018a9052600f85900b6024820152604481018490529091506001600160a01b03851690631a4d01d290606401600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a0823190602401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906110f9565b9050818103965050505050509250925092565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190611127565b50604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df02124906084016020604051808303816000875af115801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906110f9565b949350505050565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690526000919084169063095ea7b3906044016020604051808303816000875af115801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190611127565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906110f9565b604051630f7c084960e21b8152600160048201819052600260248301526044820189905260648201529091506001600160a01b03861690633df02124906084015b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906110f9565b919091039695505050505050565b60006109ad6001600160a01b0384168587610c72565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1891906110f9565b604051630b68372160e31b8152600060048201526002602482015260448101889052600160648201529091506001600160a01b03861690635b41b908906084016108ec565b6001600160a01b03808216600090815260016020526040812054909116908115610aa357506001600160a01b039182166000908152602081905260409020549092911690565b604080516080810182526000918101828152606082810193909352815260208101829052604051633afc259d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633afc259d90610b15908890869060040161119e565b600060405180830381865afa158015610b32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5a9190810190611296565b8151519093509091506001600160a01b03161580610b7b5750602081015151155b15610b9957604051632dab5ccd60e21b815260040160405180910390fd5b8051516020820151909450600090610bb090610db3565b6001600160a01b03888116600081815260016020908152604080832080548d87166001600160a01b031990911681179091558151808301835288871680825260ff89811683870190815297875286865295849020915182549751909616600160a01b026001600160a81b031990971695909716949094179490941790925581519283528201929092529296509092507fad100fb0d449551c9d88b48509ed4dcdd964416a7094b30659487c3ea2e10296910160405180910390a1505050915091565b801580610cec5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea91906110f9565b155b610d5c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610dae908490610e91565b505050565b6000808251600003610dd8576040516326aef2bd60e21b815260040160405180910390fd5b60005b8351811015610e6857838181518110610df657610df66113d8565b60200260200101516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603610e60577f000000000000000000000000000000000000000000000000000000000000000094909350915050565b600101610ddb565b50600083600081518110610e7e57610e7e6113d8565b6020026020010151819250925050915091565b6000610ee6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f639092919063ffffffff16565b805190915015610dae5780806020019051810190610f049190611127565b610dae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d53565b60606107c0848460008585843b610fbc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d53565b600080866001600160a01b03168587604051610fd891906113ee565b60006040518083038185875af1925050503d8060008114611015576040519150601f19603f3d011682016040523d82523d6000602084013e61101a565b606091505b509150915061102a828286611035565b979650505050505050565b606083156110445750816104af565b8251156110545782518084602001fd5b8160405162461bcd60e51b8152600401610d53919061140a565b6001600160a01b038116811461108357600080fd5b50565b6000806040838503121561109957600080fd5b82356110a48161106e565b946020939093013593505050565b6000602082840312156110c457600080fd5b81356104af8161106e565b6000602082840312156110e157600080fd5b81516001600160e01b0319811681146104af57600080fd5b60006020828403121561110b57600080fd5b5051919050565b8051801515811461112257600080fd5b919050565b60006020828403121561113957600080fd5b6104af82611112565b60005b8381101561115d578181015183820152602001611145565b8381111561116c576000848401525b50505050565b6000815180845261118a816020860160208601611142565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906107c090830184611172565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156111fb576111fb6111c2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561122a5761122a6111c2565b604052919050565b600082601f83011261124357600080fd5b815167ffffffffffffffff81111561125d5761125d6111c2565b611270601f8201601f1916602001611201565b81815284602083860101111561128557600080fd5b6107c0826020830160208701611142565b600080604083850312156112a957600080fd5b825167ffffffffffffffff808211156112c157600080fd5b9084019081860360608112156112d657600080fd5b6112de6111d8565b60408212156112ec57600080fd5b6112f46111d8565b915083516113018161106e565b82526020611310858201611112565b838201529181526040840151918383111561132a57600080fd5b828501945088601f86011261133e57600080fd5b8451925083831115611352576113526111c2565b8260051b611361828201611201565b938452858101820193828101908b86111561137b57600080fd5b968301965b858810156113a557875192506113958361106e565b8282529683019690830190611380565b848401525050870151909550925050808211156113c157600080fd5b506113ce85828601611232565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60008251611400818460208701611142565b9190910192915050565b6020815260006104af602083018461117256fea2646970667358221220a8dfe225bec77757a64228a4b2985739b8a64f116c574b0c22a5d3142cf1bca664736f6c634300080d0033",
  "devdoc": {
    "details": "Curve LP Tokens unwrapping IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.",
    "errors": {
      "InvalidCurvePriceProviderLPTokenPair()": [
        {
          "details": "Revert if we are not able to get the pool coins by provided curve LP token"
        }
      ],
      "InvalidFetchersRepository()": [
        {
          "details": "Revert on a false sanity check with `Ping` library"
        }
      ],
      "InvalidOrNotSupportedLPToken()": [
        {
          "details": "Revert if we are not able to get LP Token pool details from the price provider"
        }
      ],
      "Unsupported()": [
        {
          "details": "Revert on a `swapAmountOut` call as it in unsupported "
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "towardsAsset(address,uint256)": {
        "details": "As Curve LP Tokens can be collateral-only assets we skip the implementation of this function"
      },
      "towardsNative(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be unwrapped"
        },
        "returns": {
          "amountOut": "Amount of the `tokenOut` that we received",
          "tokenOut": "A token that the `_asset` has been converted to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FETCHERS_REPO()": {
        "notice": "Curve LP Tokens details fetchers repository"
      },
      "towardsNative(address,uint256)": {
        "notice": "Operates to unwrap an `_asset`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35721,
        "contract": "contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol:FraxCurveMagician",
        "label": "poolCoins",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(PoolCoinDetails)35705_storage)"
      },
      {
        "astId": 35725,
        "contract": "contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol:FraxCurveMagician",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(PoolCoinDetails)35705_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurveLPTokensMagician.PoolCoinDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolCoinDetails)35705_storage"
      },
      "t_struct(PoolCoinDetails)35705_storage": {
        "encoding": "inplace",
        "label": "struct CurveLPTokensMagician.PoolCoinDetails",
        "members": [
          {
            "astId": 35702,
            "contract": "contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol:FraxCurveMagician",
            "label": "coin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35704,
            "contract": "contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol:FraxCurveMagician",
            "label": "index",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}