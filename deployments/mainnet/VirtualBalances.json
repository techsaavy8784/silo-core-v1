{
  "address": "0xa0F0e6B722Fb14565BDF0Cb0B03fD58603BCEC58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_pidUtilizationOptimal",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_pidKp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_interestsRateInterval",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_iterationsBeforeFlatRate",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_RANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_POINTS",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currentTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siloShareFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRateLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVirtualBalances.VirtualBalancesInputData",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "calcGasForInterestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_siloShareFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deltaTime",
          "type": "uint256"
        }
      ],
      "name": "calculateInterests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "siloInterestShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowAmountWithInterests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deltaTime",
          "type": "uint256"
        }
      ],
      "name": "calculatePastInterests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pastInterests",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currentTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siloShareFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRateLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVirtualBalances.VirtualBalancesInputData",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "getInterestData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "newDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newBorrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newBorrowAmountUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newInterestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newInterestRateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterests",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolInterestShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siloInterestShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVirtualBalances.VirtualBalancesOutput",
          "name": "output",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        }
      ],
      "name": "interestRateForInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newInterestRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestsRateInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iterationsBeforeFlatRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pidKp",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pidUtilizationOptimal",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currentTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siloShareFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmountLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRateLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVirtualBalances.VirtualBalancesInputData",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "preIterationCalculations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateTimestampAfterIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxIterations",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d6713edefb6860242a6293824c0e656d8e157fb2422dec1a46d59c3b8f8e174",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0xa0F0e6B722Fb14565BDF0Cb0B03fD58603BCEC58",
    "transactionIndex": 182,
    "gasUsed": "617047",
    "logsBloom": "0x
    "blockHash": "0x8eb93b9ef69cd483ed1a4432e7ab2221da9ca7cc852a15c16f2b8545fc4333cc",
    "transactionHash": "0x5d6713edefb6860242a6293824c0e656d8e157fb2422dec1a46d59c3b8f8e174",
    "logs": [],
    "blockNumber": 13628617,
    "cumulativeGasUsed": "12771162",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "500000000000000000",
    "1388888880000000",
    "1200",
    2160
  ],
  "solcInputHash": "537831d942c1ab4870aa40f6dd7512c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_pidUtilizationOptimal\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_pidKp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_interestsRateInterval\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_iterationsBeforeFlatRate\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACCEPTED_RANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_POINTS\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siloShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IVirtualBalances.VirtualBalancesInputData\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"calcGasForInterestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_siloShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deltaTime\",\"type\":\"uint256\"}],\"name\":\"calculateInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siloInterestShare\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmountWithInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deltaTime\",\"type\":\"uint256\"}],\"name\":\"calculatePastInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pastInterests\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siloShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IVirtualBalances.VirtualBalancesInputData\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"getInterestData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowAmountUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newInterestRateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolInterestShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siloInterestShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IVirtualBalances.VirtualBalancesOutput\",\"name\":\"output\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"}],\"name\":\"interestRateForInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsRateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterationsBeforeFlatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pidKp\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pidUtilizationOptimal\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siloShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IVirtualBalances.VirtualBalancesInputData\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"preIterationCalculations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateTimestampAfterIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIterations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcGasForInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"this is helper for gas calculations\"},\"getInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_params\":\"see VirtualBalancesInputData\"},\"returns\":{\"output\":\"see InterestDataOuptut\"}},\"interestRateForInterval(uint256,uint256,uint256)\":{\"params\":{\"_borrowAmount\":\"total borrow amount\",\"_deposit\":\"total deposit of the asset\",\"_interestRate\":\"interest rate at `_interestRateUpdateTimestamp`\"},\"returns\":{\"newInterestRate\":\"new current interest rate, it will be changed ONLY if `_deltaTime` >= `_interval`\"}}},\"stateVariables\":{\"iterationsBeforeFlatRate\":{\"details\":\"max iterations for calculating virtual interests rates, see `getInterestRate()`         interests rates can be different for each interval, they are calculated in a loop         in order to not run out of gas and do not lock silo, we need to stop iterating and apply flat rate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"calculates total interests since `_lastUpdateTimestamp`\"},\"interestRateForInterval(uint256,uint256,uint256)\":{\"notice\":\"calculates new interest rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VirtualBalances.sol\":\"VirtualBalances\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\n\\ncontract InterestRateModel {\\n    using EasyMath for int256;\\n\\n    uint256 public constant SECONDS_PER_YEAR = 31536000;\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    uint256 public constant ACCEPTED_RANGE = 5e16;\\n    int256 public constant DECIMAL_POINTS = 1e18;\\n\\n    /// @dev is our target value for borrowAmount utilization\\n    ///         eg. if optimal utilization is X, then if current utilization is less than X,\\n    ///         interest rate will be dropping to give incentive to borrow and bring utilization closer to X\\n    ///         when current utilization will be higher than X, interests will be increased to give incentive for return\\n    ///         money and bring utilization closer to X\\n    ///         utilization is using DECIMAL_POINTS, so base unit is 1e18\\n    int256 public immutable pidUtilizationOptimal;\\n\\n    int256 public immutable pidKp;\\n\\n    /// @dev interval for interest rate update in seconds\\n    uint256 public immutable interestsRateInterval;\\n\\n    constructor(\\n        uint64 _pidUtilizationOptimal,\\n        uint64 _pidKp,\\n        uint64 _interestsRateInterval\\n    ) {\\n        require(_pidUtilizationOptimal != 0, \\\"InterestRateModel: invalid _utilizationOptimal\\\");\\n        require(_pidKp != 0, \\\"InterestRateModel: invalid _pidKp\\\");\\n        require(_interestsRateInterval != 0, \\\"InterestRateModel: invalid _updateInterval\\\");\\n\\n        pidUtilizationOptimal = int256(uint256(_pidUtilizationOptimal));\\n        pidKp = int256(uint256(_pidKp));\\n        interestsRateInterval = uint256(_interestsRateInterval);\\n    }\\n\\n    /// @notice calculates new interest rate\\n    /// @param _deposit total deposit of the asset\\n    /// @param _borrowAmount total borrow amount\\n    /// @param _interestRate interest rate at `_interestRateUpdateTimestamp`\\n    /// @return newInterestRate new current interest rate, it will be changed ONLY if `_deltaTime` >= `_interval`\\n    function interestRateForInterval(uint256 _deposit, uint256 _borrowAmount, uint256 _interestRate)\\n        public\\n        view\\n        returns (uint256 newInterestRate)\\n    {\\n        unchecked {\\n            // borrowAmountUtilization\\n            int256 u = int256(_borrowAmount) * DECIMAL_POINTS / int256(_deposit);\\n\\n            int256 error = u - pidUtilizationOptimal;\\n\\n            if (error.abs() <= ACCEPTED_RANGE) {\\n                error = 0;\\n            }\\n\\n            int256 p = pidKp * error / DECIMAL_POINTS;\\n            int256 interestRate = int256(_interestRate) + p.toBasisPoint();\\n\\n            if (interestRate < 0) {\\n                interestRate = 0;\\n            }\\n\\n            return uint256(interestRate);\\n        }\\n    }\\n\\n    function calculatePastInterests(\\n        uint256 _borrowAmountWithInterests,\\n        uint256 _interestRate,\\n        uint256 _deltaTime\\n    ) public pure returns (uint256 pastInterests) {\\n        uint256 x = _interestRate * _deltaTime;\\n        pastInterests = _borrowAmountWithInterests * x / (BASIS_POINTS * SECONDS_PER_YEAR + x);\\n    }\\n\\n    function calculateInterests(uint256 _borrowAmount, uint256 _interestRate, uint256 _siloShareFee, uint256 _deltaTime)\\n        public\\n        pure\\n        returns (uint256 interests, uint256 siloInterestShare)\\n    {\\n        uint256 fullInterests = _borrowAmount * _interestRate * _deltaTime;\\n\\n        unchecked {\\n            interests = fullInterests / BASIS_POINTS / SECONDS_PER_YEAR;\\n            siloInterestShare = interests * _siloShareFee / BASIS_POINTS;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb0e48882984a8558d83602001bd7315091dc8d1e646cfd02a7791c379bc3444\",\"license\":\"BUSL-1.1\"},\"contracts/VirtualBalances.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./interfaces/IVirtualBalances.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract VirtualBalances is IVirtualBalances, InterestRateModel {\\n    /// @dev max iterations for calculating virtual interests rates, see `getInterestRate()`\\n    ///         interests rates can be different for each interval, they are calculated in a loop\\n    ///         in order to not run out of gas and do not lock silo, we need to stop iterating and apply flat rate\\n    uint256 public immutable iterationsBeforeFlatRate;\\n\\n    constructor(\\n        uint64 _pidUtilizationOptimal,\\n        uint64 _pidKp,\\n        uint64 _interestsRateInterval,\\n        uint64 _iterationsBeforeFlatRate\\n    ) InterestRateModel(_pidUtilizationOptimal, _pidKp, _interestsRateInterval) {\\n        require(_iterationsBeforeFlatRate != 0, \\\"VirtualBalances: invalid _intervalIterationsForFlatRate\\\");\\n\\n        iterationsBeforeFlatRate = uint256(_iterationsBeforeFlatRate);\\n    }\\n\\n    /// @dev this is helper for gas calculations\\n    function calcGasForInterestData(VirtualBalancesInputData calldata _input) external {\\n        _getInterestData(_input);\\n    }\\n\\n    /// @inheritdoc IVirtualBalances\\n    function getInterestData(VirtualBalancesInputData calldata _input)\\n        external view override returns (VirtualBalancesOutput memory output)\\n    {\\n        output = _getInterestData(_input);\\n        output.newBorrowAmountUpdateTimestamp = _input.currentTimestamp;\\n    }\\n\\n    function preIterationCalculations(VirtualBalancesInputData calldata _input) public view returns (\\n        uint256 newDeposit,\\n        uint256 newBorrowAmount,\\n        uint256 interestRateTimestampAfterIterations,\\n        uint256 maxIterations\\n    ) {\\n        unchecked {\\n            require(\\n                _input.borrowAmountLastUpdateTimestamp - _input.interestRateLastUpdateTimestamp < interestsRateInterval,\\n                \\\"_calculateDebtAndInterest: invalid timestamps\\\"\\n            );\\n\\n            uint256 timePassed = _input.borrowAmountLastUpdateTimestamp - _input.interestRateLastUpdateTimestamp;\\n            uint256 passedInterests = calculatePastInterests(_input.borrowAmount, _input.interestRate, timePassed);\\n            uint256 siloPassedInterests  = passedInterests * _input.siloShareFee / BASIS_POINTS;\\n\\n            // when we subtract this interests, we can do full iterations for first period\\n            newBorrowAmount = _input.borrowAmount - passedInterests;\\n            newDeposit = _input.deposit - siloPassedInterests;\\n\\n            // at this moment we know, we will do at least one iteration, so:\\n            // _input.currentTimestamp is >= _input.interestRateLastUpdateTimestamp + iteration\\n\\n            uint256 borrowAmountFullDeltaTime = _input.currentTimestamp - _input.interestRateLastUpdateTimestamp;\\n            maxIterations = borrowAmountFullDeltaTime / interestsRateInterval;\\n            // console.log(\\\"%s - %s\\\", _input.currentTimestamp, _input.interestRateLastUpdateTimestamp);\\n            // console.log(\\\"borrowAmountFullDeltaTime %s, max: %s\\\", borrowAmountFullDeltaTime, maxIterations);\\n\\n            if (maxIterations > iterationsBeforeFlatRate) {\\n                maxIterations = iterationsBeforeFlatRate;\\n            }\\n\\n            return (\\n                newDeposit,\\n                newBorrowAmount,\\n                _input.interestRateLastUpdateTimestamp + maxIterations * interestsRateInterval,\\n                maxIterations\\n            );\\n        }\\n    }\\n\\n    /// @dev should always calculate all interest, regardless of the intervals.\\n    ///      Intervals should be used only to change interest rate.\\n    function _getInterestData(VirtualBalancesInputData calldata _input)\\n        internal\\n        view\\n        returns (VirtualBalancesOutput memory output)\\n    {\\n        unchecked {\\n            if (_input.borrowAmount == 0) {\\n                output.newInterestRateTimestamp =\\n                    _input.currentTimestamp - (_input.currentTimestamp % interestsRateInterval);\\n\\n                output.newDeposit = _input.deposit;\\n\\n                return output;\\n            }\\n\\n            if (_input.deposit == 0) {\\n                // TODO this is still weird case, is it possible to have _borrowAmount > 0 and _deposit == 0?\\n                //      idk what should be correct values here\\n                output.newBorrowAmount = _input.borrowAmount;\\n                output.newInterestRate = _input.interestRate;\\n                output.newInterestRateTimestamp = _input.interestRateLastUpdateTimestamp;\\n\\n                return output;\\n            }\\n\\n            (\\n                output.newDeposit,\\n                output.newBorrowAmount,\\n                output.newInterestRate,\\n                output.newInterestRateTimestamp\\n            ) = _calculateDebtAndInterest(_input);\\n\\n            require(\\n                _input.borrowAmount <= output.newBorrowAmount,\\n                \\\"VirtualBalances._getInterestRate: borrowAmount overflow\\\"\\n            );\\n\\n            output.totalInterests = output.newBorrowAmount - _input.borrowAmount;\\n        }\\n    }\\n\\n    // TODO return number of iterations?\\n    // solhint-disable-next-line function-max-lines\\n    function _calculateDebtAndInterest(VirtualBalancesInputData calldata _input) internal view returns (\\n        uint256 newDeposit,\\n        uint256 newBorrowAmount,\\n        uint256 newInterestRate,\\n        uint256 newInterestRateTimestamp\\n    ) {\\n        uint256 interestRateTimestampAfterIterations;\\n        uint256 maxIterations;\\n        newInterestRate = _input.interestRate;\\n\\n        (\\n            newDeposit,\\n            newBorrowAmount,\\n            interestRateTimestampAfterIterations,\\n            maxIterations\\n        ) = preIterationCalculations(_input);\\n\\n        // TODO test how much iterations it can handle but not on its own - inside tx when we will be updating interests\\n        // TODO is recurrence more optimal way?\\n        // we doing \\\"full\\\" iterations, means every deltaTime is equal to interestsRateInterval\\n        while (maxIterations != 0) {\\n            unchecked {\\n                maxIterations--;\\n\\n                (uint256 interests, uint256 siloInterestShare) = calculateInterests(\\n                    newBorrowAmount,\\n                    newInterestRate,\\n                    _input.siloShareFee,\\n                    interestsRateInterval\\n                );\\n\\n                newBorrowAmount += interests;\\n                newDeposit += siloInterestShare;\\n                newInterestRate = interestRateForInterval(_input.deposit, newBorrowAmount, newInterestRate);\\n            }\\n        }\\n\\n        uint256 timeLeft = _input.currentTimestamp - interestRateTimestampAfterIterations;\\n\\n        // we need to handle last step, it might be:\\n        // - because we have flat rate\\n        // - because last iteration is not for full interval\\n        if (timeLeft != 0) {\\n            (uint256 interests, uint256 siloInterestShare) = calculateInterests(\\n                newBorrowAmount,\\n                newInterestRate,\\n                _input.siloShareFee,\\n                timeLeft\\n            );\\n\\n            newBorrowAmount += interests;\\n            newDeposit += siloInterestShare;\\n        }\\n\\n        newInterestRateTimestamp = _input.currentTimestamp - (_input.currentTimestamp % interestsRateInterval);\\n    }\\n}\\n\",\"keccak256\":\"0xe0e3b86f352f7c735d987309bcd1307f97c2c6751fbe9aac41f9afc5eae2bb57\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVirtualBalances.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IVirtualBalances {\\n    /// @param currentTimestamp block.timestamp\\n    /// @param siloShareFee BASIS_POINTS - factory.protocolShareFee\\n    /// @param deposit total deposit of the asset\\n    /// @param borrowAmount total borrow amount\\n    /// @param borrowAmountLastUpdateTimestamp time when `borrowAmount` was updated\\n    /// @param interestRate interest rate at `interestRateLastUpdateTimestamp`\\n    /// @param interestRateLastUpdateTimestamp time when `interestRate` was updated\\n    struct VirtualBalancesInputData {\\n        uint256 currentTimestamp;\\n        uint256 siloShareFee;\\n        uint256 deposit;\\n        uint256 borrowAmount;\\n        uint256 borrowAmountLastUpdateTimestamp;\\n        uint256 interestRate;\\n        uint256 interestRateLastUpdateTimestamp;\\n    }\\n\\n    /// @param newDeposit new deposit after apply interests for interval\\n    /// @param newBorrowAmount new borrowAmount after apply interests for interval\\n    /// @param newBorrowAmountUpdateTimestamp timestamp for `newBorrowAmount`\\n    /// @param newInterestRate new current interest rate\\n    /// @param newInterestRateTimestamp timestamp for `newInterestRate`\\n    /// @param totalInterests interest for provided period of time\\n    ///        from `borrowAmountLastUpdateTimestamp` to `newBorrowAmountUpdateTimestamp`\\n    /// @param protocolInterestShare % for protocol\\n    /// @param siloInterestShare % for users\\n    struct VirtualBalancesOutput {\\n        uint256 newDeposit;\\n        uint256 newBorrowAmount;\\n        uint256 newBorrowAmountUpdateTimestamp;\\n        uint256 newInterestRate;\\n        uint256 newInterestRateTimestamp;\\n        uint256 totalInterests;\\n        uint256 protocolInterestShare;\\n        uint256 siloInterestShare;\\n    }\\n\\n    /// @notice calculates total interests since `_lastUpdateTimestamp`\\n    /// @param _params see VirtualBalancesInputData\\n    /// @return output see InterestDataOuptut\\n    function getInterestData(VirtualBalancesInputData memory _params)\\n        external view returns (VirtualBalancesOutput memory output);\\n}\\n\",\"keccak256\":\"0xca32ee9e268a280bddf2affd0da6d9d847182900a55d57e2fd60ee7708dcde9a\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount * 1e14;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount * 1e14;\\n    }\\n}\\n\",\"keccak256\":\"0x6fad7557ec8708b17bfe6919acf2fb2ad59635591a12d82a8ba662786dd6e019\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610d0f380380610d0f8339810160408190526100309161022c565b8383836001600160401b0383166100a55760405162461bcd60e51b815260206004820152602e60248201527f496e746572657374526174654d6f64656c3a20696e76616c6964205f7574696c60448201526d1a5e985d1a5bdb93dc1d1a5b585b60921b60648201526084015b60405180910390fd5b6001600160401b0382166101055760405162461bcd60e51b815260206004820152602160248201527f496e746572657374526174654d6f64656c3a20696e76616c6964205f7069644b6044820152600760fc1b606482015260840161009c565b6001600160401b03811661016e5760405162461bcd60e51b815260206004820152602a60248201527f496e746572657374526174654d6f64656c3a20696e76616c6964205f757064616044820152691d19525b9d195c9d985b60b21b606482015260840161009c565b6001600160401b0392831660805290821660a052811660c05281166101fb5760405162461bcd60e51b815260206004820152603760248201527f5669727475616c42616c616e6365733a20696e76616c6964205f696e7465727660448201527f616c497465726174696f6e73466f72466c617452617465000000000000000000606482015260840161009c565b6001600160401b031660e05250610280915050565b80516001600160401b038116811461022757600080fd5b919050565b6000806000806080858703121561024257600080fd5b61024b85610210565b935061025960208601610210565b925061026760408601610210565b915061027560608601610210565b905092959194509250565b60805160a05160c05160e051610a106102ff6000396000818161013d0152818161052b01526105530152600081816101b30152818161041b015281816104f901528181610580015281816105da0152818161075f01526107f501526000818161017901526103ca0152600081816102ac01526103840152610a106000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b161a9bd1161008c578063ce47696f11610066578063ce47696f1461028f578063e1f1c4a71461029e578063e2fe6e47146102a7578063e6a69ab8146102ce57600080fd5b8063b161a9bd146101d5578063bb08ba68146101e8578063c894a0711461021b57600080fd5b80638d453ccc116100c85780638d453ccc1461015f5780639fc2ab89146101745780639fef78211461019b578063aaacb49c146101ae57600080fd5b8063597548c6146100ef5780636a70a4e0146101105780636dc7f85d14610138575b600080fd5b6100fd66b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b61012361011e3660046108bb565b6102d9565b60408051928352602083019190915201610107565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b61017261016d366004610877565b61030f565b005b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6101a936600461088f565b61031c565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6101e336600461088f565b610363565b6101fb6101f6366004610877565b610413565b604080519485526020850193909352918301526060820152608001610107565b61022e610229366004610877565b6105ab565b6040516101079190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b6100fd670de0b6b3a764000081565b6100fd61271081565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6301e1338081565b60008080836102e88789610947565b6102f29190610947565b6301e1338061271091829004049895890204965093945050505050565b610318816105c7565b5050565b6000806103298385610947565b90508061033c6301e13380612710610947565b61034691906108ed565b6103508287610947565b61035a9190610933565b95945050505050565b60008084670de0b6b3a764000085028161037f5761037f6109c4565b0590507f0000000000000000000000000000000000000000000000000000000000000000810366b1a2bc2ec500006103b6826106f6565b116103bf575060005b670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000082020560006103f782610715565b860190506000811215610408575060005b979650505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000008560c00135866080013503106104ad5760405162461bcd60e51b815260206004820152602d60248201527f5f63616c63756c61746544656274416e64496e7465726573743a20696e76616c60448201526c69642074696d657374616d707360981b60648201526084015b60405180910390fd5b60c085013560808601350360006104cd606088013560a08901358461031c565b6127106020890135820204604089013581900397506060890135829003965090915060c08801358835037f00000000000000000000000000000000000000000000000000000000000000008181610526576105266109c4565b0494507f0000000000000000000000000000000000000000000000000000000000000000851115610575577f000000000000000000000000000000000000000000000000000000000000000094505b5050505060c08501357f000000000000000000000000000000000000000000000000000000000000000082020191509193509193565b6105b3610832565b6105bc826105c7565b913560408301525090565b6105cf610832565b606082013561061c577f0000000000000000000000000000000000000000000000000000000000000000823581610608576106086109c4565b068235036080820152604090910135815290565b604082013561064757606080830135602083015260a08301359082015260c090910135608082015290565b61065082610727565b6080850152606080850191909152602084018290529183529083013511156106e05760405162461bcd60e51b815260206004820152603760248201527f5669727475616c42616c616e6365732e5f676574496e7465726573745261746560448201527f3a20626f72726f77416d6f756e74206f766572666c6f7700000000000000000060648201526084016104a4565b602081015160609092013590910360a082015290565b600080821315610706578161070f565b61070f82610991565b92915050565b600061070f655af3107a400083610905565b60008060a083013581808061073b87610413565b929850909650925090505b80156107a85760001901600080610783878760208c01357f00000000000000000000000000000000000000000000000000000000000000006102d9565b9889019897810197909250905061079f60408a01358888610363565b95505050610746565b60006107b5838935610966565b905080156107f0576000806107d088888c60200135866102d9565b90925090506107df82896108ed565b97506107eb818a6108ed565b985050505b61081b7f0000000000000000000000000000000000000000000000000000000000000000893561097d565b610826908935610966565b93505050509193509193565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060e0828403121561088957600080fd5b50919050565b6000806000606084860312156108a457600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156108d157600080fd5b5050823594602084013594506040840135936060013592509050565b60008219821115610900576109006109ae565b500190565b600082610914576109146109c4565b600160ff1b82146000198414161561092e5761092e6109ae565b500590565b600082610942576109426109c4565b500490565b6000816000190483118215151615610961576109616109ae565b500290565b600082821015610978576109786109ae565b500390565b60008261098c5761098c6109c4565b500690565b6000600160ff1b8214156109a7576109a76109ae565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea264697066735822122083c4a78a6b277862746172e50cbe7be0d2ca8fbe45a7c2f814b4af1202dc8c1b64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b161a9bd1161008c578063ce47696f11610066578063ce47696f1461028f578063e1f1c4a71461029e578063e2fe6e47146102a7578063e6a69ab8146102ce57600080fd5b8063b161a9bd146101d5578063bb08ba68146101e8578063c894a0711461021b57600080fd5b80638d453ccc116100c85780638d453ccc1461015f5780639fc2ab89146101745780639fef78211461019b578063aaacb49c146101ae57600080fd5b8063597548c6146100ef5780636a70a4e0146101105780636dc7f85d14610138575b600080fd5b6100fd66b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b61012361011e3660046108bb565b6102d9565b60408051928352602083019190915201610107565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b61017261016d366004610877565b61030f565b005b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6101a936600461088f565b61031c565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6101e336600461088f565b610363565b6101fb6101f6366004610877565b610413565b604080519485526020850193909352918301526060820152608001610107565b61022e610229366004610877565b6105ab565b6040516101079190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b6100fd670de0b6b3a764000081565b6100fd61271081565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6301e1338081565b60008080836102e88789610947565b6102f29190610947565b6301e1338061271091829004049895890204965093945050505050565b610318816105c7565b5050565b6000806103298385610947565b90508061033c6301e13380612710610947565b61034691906108ed565b6103508287610947565b61035a9190610933565b95945050505050565b60008084670de0b6b3a764000085028161037f5761037f6109c4565b0590507f0000000000000000000000000000000000000000000000000000000000000000810366b1a2bc2ec500006103b6826106f6565b116103bf575060005b670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000082020560006103f782610715565b860190506000811215610408575060005b979650505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000008560c00135866080013503106104ad5760405162461bcd60e51b815260206004820152602d60248201527f5f63616c63756c61746544656274416e64496e7465726573743a20696e76616c60448201526c69642074696d657374616d707360981b60648201526084015b60405180910390fd5b60c085013560808601350360006104cd606088013560a08901358461031c565b6127106020890135820204604089013581900397506060890135829003965090915060c08801358835037f00000000000000000000000000000000000000000000000000000000000000008181610526576105266109c4565b0494507f0000000000000000000000000000000000000000000000000000000000000000851115610575577f000000000000000000000000000000000000000000000000000000000000000094505b5050505060c08501357f000000000000000000000000000000000000000000000000000000000000000082020191509193509193565b6105b3610832565b6105bc826105c7565b913560408301525090565b6105cf610832565b606082013561061c577f0000000000000000000000000000000000000000000000000000000000000000823581610608576106086109c4565b068235036080820152604090910135815290565b604082013561064757606080830135602083015260a08301359082015260c090910135608082015290565b61065082610727565b6080850152606080850191909152602084018290529183529083013511156106e05760405162461bcd60e51b815260206004820152603760248201527f5669727475616c42616c616e6365732e5f676574496e7465726573745261746560448201527f3a20626f72726f77416d6f756e74206f766572666c6f7700000000000000000060648201526084016104a4565b602081015160609092013590910360a082015290565b600080821315610706578161070f565b61070f82610991565b92915050565b600061070f655af3107a400083610905565b60008060a083013581808061073b87610413565b929850909650925090505b80156107a85760001901600080610783878760208c01357f00000000000000000000000000000000000000000000000000000000000000006102d9565b9889019897810197909250905061079f60408a01358888610363565b95505050610746565b60006107b5838935610966565b905080156107f0576000806107d088888c60200135866102d9565b90925090506107df82896108ed565b97506107eb818a6108ed565b985050505b61081b7f0000000000000000000000000000000000000000000000000000000000000000893561097d565b610826908935610966565b93505050509193509193565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060e0828403121561088957600080fd5b50919050565b6000806000606084860312156108a457600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156108d157600080fd5b5050823594602084013594506040840135936060013592509050565b60008219821115610900576109006109ae565b500190565b600082610914576109146109c4565b600160ff1b82146000198414161561092e5761092e6109ae565b500590565b600082610942576109426109c4565b500490565b6000816000190483118215151615610961576109616109ae565b500290565b600082821015610978576109786109ae565b500390565b60008261098c5761098c6109c4565b500690565b6000600160ff1b8214156109a7576109a76109ae565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea264697066735822122083c4a78a6b277862746172e50cbe7be0d2ca8fbe45a7c2f814b4af1202dc8c1b64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcGasForInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "details": "this is helper for gas calculations"
      },
      "getInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_params": "see VirtualBalancesInputData"
        },
        "returns": {
          "output": "see InterestDataOuptut"
        }
      },
      "interestRateForInterval(uint256,uint256,uint256)": {
        "params": {
          "_borrowAmount": "total borrow amount",
          "_deposit": "total deposit of the asset",
          "_interestRate": "interest rate at `_interestRateUpdateTimestamp`"
        },
        "returns": {
          "newInterestRate": "new current interest rate, it will be changed ONLY if `_deltaTime` >= `_interval`"
        }
      }
    },
    "stateVariables": {
      "iterationsBeforeFlatRate": {
        "details": "max iterations for calculating virtual interests rates, see `getInterestRate()`         interests rates can be different for each interval, they are calculated in a loop         in order to not run out of gas and do not lock silo, we need to stop iterating and apply flat rate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getInterestData((uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "calculates total interests since `_lastUpdateTimestamp`"
      },
      "interestRateForInterval(uint256,uint256,uint256)": {
        "notice": "calculates new interest rate"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}