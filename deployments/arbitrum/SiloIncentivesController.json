{
  "address": "0x4999873bF8741bfFFB0ec242AAaA7EF1FE74FCE8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClaimerUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOverflowAtEmissionsPerSecond",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConfiguration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUserAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEmissionManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emission",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AssetIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ClaimerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDistributionEnd",
          "type": "uint256"
        }
      ],
      "name": "DistributionEndUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "UserIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEN_POW_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "emissionPerSecond",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "index",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "lastUpdateTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsToSelf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "emissionsPerSecond",
          "type": "uint256[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserUnclaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userBalance",
          "type": "uint256"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notificationReceiverPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onAfterTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distributionEnd",
          "type": "uint256"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf997eca4e0d34817be07957d63de1f4f9da450de9881bf68b1a12d664d201387",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0x4999873bF8741bfFFB0ec242AAaA7EF1FE74FCE8",
    "transactionIndex": 2,
    "gasUsed": "11789059",
    "logsBloom": "0x
    "blockHash": "0x2ef7f8160584a172278936c586fa00bd23a5375e7ad03e45df7310ce913a2fbf",
    "transactionHash": "0xf997eca4e0d34817be07957d63de1f4f9da450de9881bf68b1a12d664d201387",
    "logs": [],
    "blockNumber": 63700551,
    "cumulativeGasUsed": "12056250",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0341c0c0ec423328621788d4854119b97f44e391",
    "0x80071b39aA896aa12240c5194E42661D671bDFB2"
  ],
  "numDeployments": 2,
  "solcInputHash": "347563b73141c76a3c140886e206f169",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClaimerUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOverflowAtEmissionsPerSecond\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUserAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEmissionManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"}],\"name\":\"DistributionEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEN_POW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"emissionPerSecond\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"index\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsToSelf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emissionsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notificationReceiverPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onAfterTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionEnd\",\"type\":\"uint256\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"DISTRIBUTION_END()\":{\"details\":\"for backwards compatibility with the previous DistributionManager used\",\"returns\":{\"_0\":\"The end of the distribution\"}},\"claimRewards(address[],uint256,address)\":{\"details\":\"Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"to\":\"Address that will be receiving the rewards\"},\"returns\":{\"_0\":\"Rewards claimed\"}},\"claimRewardsOnBehalf(address[],uint256,address,address)\":{\"details\":\"Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"to\":\"Address that will be receiving the rewards\",\"user\":\"Address to check and claim rewards\"},\"returns\":{\"_0\":\"Rewards claimed\"}},\"claimRewardsToSelf(address[],uint256)\":{\"details\":\"Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\",\"params\":{\"amount\":\"Amount of rewards to claim\"},\"returns\":{\"_0\":\"Rewards claimed\"}},\"configureAssets(address[],uint256[])\":{\"details\":\"Configure assets for a certain rewards emission\",\"params\":{\"assets\":\"The assets to incentivize\",\"emissionsPerSecond\":\"The emission for each asset\"}},\"getAssetData(address)\":{\"details\":\"Returns the configuration of the distribution for a certain asset\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\"},\"returns\":{\"_0\":\"The asset index, the emission per second and the last updated timestamp\"}},\"getClaimer(address)\":{\"details\":\"Returns the whitelisted claimer for a certain address (0x0 if not set)\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The claimer address\"}},\"getDistributionEnd()\":{\"details\":\"Gets the end date for the distribution\",\"returns\":{\"_0\":\"The end of the distribution\"}},\"getRewardsBalance(address[],address)\":{\"details\":\"Returns the total of rewards of an user, already accrued + not yet accrued\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The rewards\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index\"}},\"getUserUnclaimedRewards(address)\":{\"details\":\"returns the unclaimed rewards of the user\",\"params\":{\"user\":\"the address of the user\"},\"returns\":{\"_0\":\"the unclaimed user rewards\"}},\"handleAction(address,uint256,uint256)\":{\"details\":\"Called by the corresponding asset on any update that affects the rewards distribution\",\"params\":{\"asset\":\"The address of the user\",\"totalSupply\":\"The total supply of the asset in the lending pool\",\"userBalance\":\"The balance of the user of the asset in the lending pool\"}},\"notificationReceiverPing()\":{\"details\":\"Sanity check function\",\"returns\":{\"_0\":\"always true\"}},\"onAfterTransfer(address,address,address,uint256)\":{\"details\":\"Silo share token event handler\"},\"rescueRewards()\":{\"details\":\"it will transfer all balance of reward token to emission manager wallet\"},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another address\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(uint256)\":{\"details\":\"Sets the end date for the distribution\",\"params\":{\"distributionEnd\":\"The end date timestamp\"}}},\"title\":\"SiloIncentivesController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset. The contract stakes the rewards before redistributing them to the Aave protocol participants. The reference staked token implementation is at https://github.com/aave/aave-stake-v2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/incentives/SiloIncentivesController.sol\":\"SiloIncentivesController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/external/aave/incentives/base/BaseIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.13;\\n\\nimport {DistributionTypes} from \\\"../../lib/DistributionTypes.sol\\\";\\nimport {DistributionManager} from \\\"./DistributionManager.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title BaseIncentivesController\\n * @notice Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\\n * @author Aave\\n  */\\nabstract contract BaseIncentivesController is IAaveIncentivesController, DistributionManager {\\n    uint256 public constant REVISION = 1;\\n\\n    address public immutable override REWARD_TOKEN; // solhint-disable-line var-name-mixedcase\\n\\n    mapping(address => uint256) internal _usersUnclaimedRewards;\\n\\n    // this mapping allows whitelisted addresses to claim on behalf of others\\n    // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining\\n    // rewards\\n    mapping(address => address) internal _authorizedClaimers;\\n\\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\\n        if (_authorizedClaimers[user] != claimer) revert ClaimerUnauthorized();\\n\\n        _;\\n    }\\n\\n    error InvalidConfiguration();\\n    error IndexOverflowAtEmissionsPerSecond();\\n    error InvalidToAddress();\\n    error InvalidUserAddress();\\n    error ClaimerUnauthorized();\\n\\n    constructor(IERC20 rewardToken, address emissionManager) DistributionManager(emissionManager) {\\n        REWARD_TOKEN = address(rewardToken);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n        external\\n        override\\n        onlyEmissionManager\\n    {\\n        if (assets.length != emissionsPerSecond.length) revert InvalidConfiguration();\\n\\n        DistributionTypes.AssetConfigInput[] memory assetsConfig =\\n            new DistributionTypes.AssetConfigInput[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length;) {\\n            if (uint104(emissionsPerSecond[i]) != emissionsPerSecond[i]) revert IndexOverflowAtEmissionsPerSecond();\\n\\n            assetsConfig[i].underlyingAsset = assets[i];\\n            assetsConfig[i].emissionPerSecond = uint104(emissionsPerSecond[i]);\\n            assetsConfig[i].totalStaked = IERC20(assets[i]).totalSupply();\\n\\n            unchecked { i++; }\\n        }\\n\\n        _configureAssets(assetsConfig);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) public override {\\n        uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\\n\\n        if (accruedRewards != 0) {\\n            _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user] + accruedRewards;\\n            emit RewardsAccrued(user, accruedRewards);\\n        }\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n        DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length;) {\\n            userState[i].underlyingAsset = assets[i];\\n            (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\\n\\n            unchecked { i++; }\\n        }\\n\\n        unclaimedRewards = unclaimedRewards + _getUnclaimedRewards(user, userState);\\n        return unclaimedRewards;\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external override returns (uint256) {\\n        if (to == address(0)) revert InvalidToAddress();\\n\\n        return _claimRewards(assets, amount, msg.sender, msg.sender, to);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\\n        if (user == address(0)) revert InvalidUserAddress();\\n        if (to == address(0)) revert InvalidToAddress();\\n\\n        return _claimRewards(assets, amount, msg.sender, user, to);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function setClaimer(address user, address caller) external override onlyEmissionManager {\\n        _authorizedClaimers[user] = caller;\\n        emit ClaimerSet(user, caller);\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getClaimer(address user) external view override returns (address) {\\n        return _authorizedClaimers[user];\\n    }\\n\\n    /// @inheritdoc IAaveIncentivesController\\n    function getUserUnclaimedRewards(address _user) external view override returns (uint256) {\\n        return _usersUnclaimedRewards[_user];\\n    }\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     */\\n    function _claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address claimer,\\n        address user,\\n        address to\\n    ) internal returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n        if (amount > unclaimedRewards) {\\n            DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\\n\\n            for (uint256 i = 0; i < assets.length;) {\\n                userState[i].underlyingAsset = assets[i];\\n                (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\\n\\n                unchecked { i++; }\\n            }\\n\\n            uint256 accruedRewards = _claimRewards(user, userState);\\n\\n            if (accruedRewards != 0) {\\n                unclaimedRewards = unclaimedRewards + accruedRewards;\\n                emit RewardsAccrued(user, accruedRewards);\\n            }\\n        }\\n\\n        if (unclaimedRewards == 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\\n        unchecked { _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; } // Safe due to the previous line\\n\\n        _transferRewards(to, amountToClaim);\\n        emit RewardsClaimed(user, to, claimer, amountToClaim);\\n\\n        return amountToClaim;\\n    }\\n\\n    /**\\n     * @dev Abstract function to transfer rewards to the desired account\\n     * @param to Account address to send the rewards\\n     * @param amount Amount of rewards to transfer\\n     */\\n    function _transferRewards(address to, uint256 amount) internal virtual;\\n\\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 userBalance, uint256 totalSupply);\\n}\\n\",\"keccak256\":\"0x16c50eee93c8bc9f30672d2abbceb6defaba140f94ae687ed3d6c7cae75a1976\",\"license\":\"agpl-3.0\"},\"contracts/external/aave/incentives/base/DistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.13;\\n\\nimport {IAaveDistributionManager} from \\\"../../interfaces/IAaveDistributionManager.sol\\\";\\nimport {DistributionTypes} from \\\"../../lib/DistributionTypes.sol\\\";\\n\\n/**\\n * @title DistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n */\\ncontract DistributionManager is IAaveDistributionManager {\\n    struct AssetData {\\n        uint104 emissionPerSecond;\\n        uint104 index;\\n        uint40 lastUpdateTimestamp;\\n        mapping(address => uint256) users;\\n    }\\n\\n    address public immutable EMISSION_MANAGER; // solhint-disable-line var-name-mixedcase\\n\\n    uint8 public constant PRECISION = 18;\\n    uint256 public constant TEN_POW_PRECISION = 10 ** PRECISION;\\n\\n    mapping(address => AssetData) public assets;\\n\\n    uint256 internal _distributionEnd;\\n\\n    error OnlyEmissionManager();\\n    error IndexOverflow();\\n\\n    modifier onlyEmissionManager() {\\n        if (msg.sender != EMISSION_MANAGER) revert OnlyEmissionManager();\\n\\n        _;\\n    }\\n\\n    constructor(address emissionManager) {\\n        EMISSION_MANAGER = emissionManager;\\n    }\\n\\n    /// @inheritdoc IAaveDistributionManager\\n    function setDistributionEnd(uint256 distributionEnd) external override onlyEmissionManager {\\n        _distributionEnd = distributionEnd;\\n        emit DistributionEndUpdated(distributionEnd);\\n    }\\n\\n    /// @inheritdoc IAaveDistributionManager\\n    function getDistributionEnd() external view override returns (uint256) {\\n        return _distributionEnd;\\n    }\\n\\n    /// @inheritdoc IAaveDistributionManager\\n    function DISTRIBUTION_END() external view override returns (uint256) { // solhint-disable-line func-name-mixedcase\\n        return _distributionEnd;\\n    }\\n\\n    /// @inheritdoc IAaveDistributionManager\\n    function getUserAssetData(address user, address asset) public view override returns (uint256) {\\n        return assets[asset].users[user];\\n    }\\n\\n    /// @inheritdoc IAaveDistributionManager\\n    function getAssetData(address asset) public view override returns (uint256, uint256, uint256) {\\n        return (assets[asset].index, assets[asset].emissionPerSecond, assets[asset].lastUpdateTimestamp);\\n    }\\n\\n    /**\\n     * @dev Configure the assets for a specific emission\\n     * @param assetsConfigInput The array of each asset configuration\\n     */\\n    function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput) internal {\\n        for (uint256 i = 0; i < assetsConfigInput.length;) {\\n            AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n            _updateAssetStateInternal(\\n                assetsConfigInput[i].underlyingAsset,\\n                assetConfig,\\n                assetsConfigInput[i].totalStaked\\n            );\\n\\n            assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n            emit AssetConfigUpdated(\\n                assetsConfigInput[i].underlyingAsset,\\n                assetsConfigInput[i].emissionPerSecond\\n            );\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n     * @param asset The address of the asset being updated\\n     * @param assetConfig Storage pointer to the distribution's config\\n     * @param totalStaked Current total of staked assets for this distribution\\n     * @return The new distribution index\\n     */\\n    function _updateAssetStateInternal(\\n        address asset,\\n        AssetData storage assetConfig,\\n        uint256 totalStaked\\n    ) internal returns (uint256) {\\n        uint256 oldIndex = assetConfig.index;\\n        uint256 emissionPerSecond = assetConfig.emissionPerSecond;\\n        uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n        if (block.timestamp == lastUpdateTimestamp) {\\n            return oldIndex;\\n        }\\n\\n        uint256 newIndex = _getAssetIndex(oldIndex, emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n        if (newIndex != oldIndex) {\\n            if (uint104(newIndex) != newIndex) revert IndexOverflow();\\n\\n            //optimization: storing one after another saves one SSTORE\\n            assetConfig.index = uint104(newIndex);\\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n            emit AssetIndexUpdated(asset, newIndex);\\n        } else {\\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n        }\\n\\n        return newIndex;\\n    }\\n\\n    /**\\n     * @dev Updates the state of an user in a distribution\\n     * @param user The user's address\\n     * @param asset The address of the reference asset of the distribution\\n     * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n     * @param totalStaked Total tokens staked in the distribution\\n     * @return The accrued rewards for the user until the moment\\n     */\\n    function _updateUserAssetInternal(\\n        address user,\\n        address asset,\\n        uint256 stakedByUser,\\n        uint256 totalStaked\\n    ) internal returns (uint256) {\\n        AssetData storage assetData = assets[asset];\\n        uint256 userIndex = assetData.users[user];\\n        uint256 accruedRewards = 0;\\n\\n        uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n        if (userIndex != newIndex) {\\n            if (stakedByUser != 0) {\\n                accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n            }\\n\\n            assetData.users[user] = newIndex;\\n            emit UserIndexUpdated(user, asset, newIndex);\\n        }\\n\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n     * @param user The address of the user\\n     * @param stakes List of structs of the user data related with his stake\\n     * @return The accrued rewards for the user until the moment\\n     */\\n    function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 accruedRewards = 0;\\n\\n        for (uint256 i = 0; i < stakes.length;) {\\n            accruedRewards = accruedRewards + _updateUserAssetInternal(\\n                    user,\\n                    stakes[i].underlyingAsset,\\n                    stakes[i].stakedByUser,\\n                    stakes[i].totalStaked\\n                );\\n\\n            unchecked { i++; }\\n        }\\n\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Return the accrued rewards for an user over a list of distribution\\n     * @param user The address of the user\\n     * @param stakes List of structs of the user data related with his stake\\n     * @return The accrued rewards for the user until the moment\\n     */\\n    function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 accruedRewards = 0;\\n\\n        for (uint256 i = 0; i < stakes.length;) {\\n            AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n\\n            uint256 assetIndex = _getAssetIndex(\\n                assetConfig.index,\\n                assetConfig.emissionPerSecond,\\n                assetConfig.lastUpdateTimestamp,\\n                stakes[i].totalStaked\\n            );\\n\\n            accruedRewards = accruedRewards + _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user]);\\n\\n            unchecked { i++; }\\n        }\\n\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Internal function for the calculation of user's rewards on a distribution\\n     * @param principalUserBalance Amount staked by the user on a distribution\\n     * @param reserveIndex Current index of the distribution\\n     * @param userIndex Index stored for the user, representation his staking moment\\n     * @return rewards The rewards\\n     */\\n    function _getRewards(\\n        uint256 principalUserBalance,\\n        uint256 reserveIndex,\\n        uint256 userIndex\\n    ) internal pure returns (uint256 rewards) {\\n        rewards = principalUserBalance * (reserveIndex - userIndex);\\n        unchecked { rewards /= TEN_POW_PRECISION; }\\n    }\\n\\n    /**\\n     * @dev Calculates the next value of an specific distribution index, with validations\\n     * @param currentIndex Current index of the distribution\\n     * @param emissionPerSecond Representing the total rewards distributed per second per asset unit,\\n     * on the distribution\\n     * @param lastUpdateTimestamp Last moment this distribution was updated\\n     * @param totalBalance of tokens considered for the distribution\\n     * @return newIndex The new index.\\n     */\\n    function _getAssetIndex(\\n        uint256 currentIndex,\\n        uint256 emissionPerSecond,\\n        uint128 lastUpdateTimestamp,\\n        uint256 totalBalance\\n    ) internal view returns (uint256 newIndex) {\\n        uint256 distributionEnd = _distributionEnd;\\n\\n        if (\\n            emissionPerSecond == 0 ||\\n            totalBalance == 0 ||\\n            lastUpdateTimestamp == block.timestamp ||\\n            lastUpdateTimestamp >= distributionEnd\\n        ) {\\n            return currentIndex;\\n        }\\n\\n        uint256 currentTimestamp = block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\\n        uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\\n\\n        newIndex = emissionPerSecond * timeDelta * TEN_POW_PRECISION;\\n        unchecked { newIndex /= totalBalance; }\\n        newIndex += currentIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x62a78047b769cc6e0996c7c41f93aedab0ad813f1cb55c93458c20c391e309f5\",\"license\":\"agpl-3.0\"},\"contracts/external/aave/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.13;\\n\\nimport {DistributionTypes} from \\\"../lib/DistributionTypes.sol\\\";\\n\\ninterface IAaveDistributionManager {\\n  \\n    event AssetConfigUpdated(address indexed asset, uint256 emission);\\n    event AssetIndexUpdated(address indexed asset, uint256 index);\\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n    event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param distributionEnd The end date timestamp\\n     */\\n    function setDistributionEnd(uint256 distributionEnd) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @return The end of the distribution\\n     */\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    /**\\n     * @dev for backwards compatibility with the previous DistributionManager used\\n     * @return The end of the distribution\\n     */\\n    function DISTRIBUTION_END() external view returns(uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @dev Returns the data of an user on a distribution\\n     * @param user Address of the user\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The new index\\n     */\\n    function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index, the emission per second and the last updated timestamp\\n     */\\n    function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x509864d52db393d9c017966b575f734a9ecdeaac69787e35faa6196e9c1ec124\",\"license\":\"agpl-3.0\"},\"contracts/external/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.13;\\n\\nimport {IAaveDistributionManager} from \\\"../interfaces/IAaveDistributionManager.sol\\\";\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     */\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Claims reward for an user to the desired address, on all the assets of the lending pool,\\n     * accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     */\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending\\n     * rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     */\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @return Rewards claimed\\n     */\\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     */\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x24e37e4e7c89f527e0ab567d9f089cc175b5d894d04fb20e7b18bcea1ce77760\",\"license\":\"agpl-3.0\"},\"contracts/external/aave/lib/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.13;\\n\\nlibrary DistributionTypes {\\n    struct AssetConfigInput {\\n        uint104 emissionPerSecond;\\n        uint256 totalStaked;\\n        address underlyingAsset;\\n    }\\n\\n    struct UserStakeInput {\\n        address underlyingAsset;\\n        uint256 stakedByUser;\\n        uint256 totalStaked;\\n    }\\n}\\n\",\"keccak256\":\"0x24a144d5625dd78034439d6b7ff74be5b9456bd49c781bd20e8bc4e6ed327821\",\"license\":\"agpl-3.0\"},\"contracts/incentives/SiloIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {BaseIncentivesController} from \\\"../external/aave/incentives/base/BaseIncentivesController.sol\\\";\\nimport \\\"../interfaces/INotificationReceiver.sol\\\";\\n\\n\\n/**\\n * @title SiloIncentivesController\\n * @notice Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset.\\n * The contract stakes the rewards before redistributing them to the Aave protocol participants.\\n * The reference staked token implementation is at https://github.com/aave/aave-stake-v2\\n * @author Aave\\n */\\ncontract SiloIncentivesController is BaseIncentivesController, INotificationReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(IERC20 rewardToken, address emissionManager) BaseIncentivesController(rewardToken, emissionManager) {}\\n\\n    /**\\n     * @dev Silo share token event handler\\n     */\\n    function onAfterTransfer(address /* _token */, address _from, address _to, uint256 _amount) external {\\n        if (assets[msg.sender].lastUpdateTimestamp == 0) {\\n            // optimisation check, if we never configured rewards distribution, then no need for updating any data\\n            return;\\n        }\\n\\n        uint256 totalSupplyBefore = IERC20(msg.sender).totalSupply();\\n\\n        if (_from == address(0x0)) {\\n            // we minting tokens, so supply before was less\\n            // we safe, because this amount came from token, if token handle them we can handle as well\\n            unchecked { totalSupplyBefore -= _amount; }\\n        } else if (_to == address(0x0)) {\\n            // we burning, so supply before was more\\n            // we safe, because this amount came from token, if token handle them we can handle as well\\n            unchecked { totalSupplyBefore += _amount; }\\n        }\\n\\n        // here user either transferring token to someone else or burning tokens\\n        // user state will be new, because this event is `onAfterTransfer`\\n        // we need to recreate status before event in order to automatically calculate rewards\\n        if (_from != address(0x0)) {\\n            uint256 balanceBefore;\\n            // we safe, because this amount came from token, if token handle them we can handle as well\\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_from) + _amount; }\\n            handleAction(_from, totalSupplyBefore, balanceBefore);\\n        }\\n\\n        // we have to checkout also user `_to`\\n        if (_to != address(0x0)) {\\n            uint256 balanceBefore;\\n            // we safe, because this amount came from token, if token handle them we can handle as well\\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_to) - _amount; }\\n            handleAction(_to, totalSupplyBefore, balanceBefore);\\n        }\\n    }\\n\\n    /// @dev it will transfer all balance of reward token to emission manager wallet\\n    function rescueRewards() external onlyEmissionManager {\\n        IERC20(REWARD_TOKEN).safeTransfer(msg.sender, IERC20(REWARD_TOKEN).balanceOf(address(this)));\\n    }\\n\\n    function notificationReceiverPing() external pure returns (bytes4) {\\n        return this.notificationReceiverPing.selector;\\n    }\\n\\n    function _transferRewards(address to, uint256 amount) internal override {\\n        IERC20(REWARD_TOKEN).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev in Silo, there is no scale, we simply using balance and total supply. Original method name is used here\\n     * to keep as much of original code.\\n     */\\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\\n        internal\\n        virtual\\n        view\\n        override\\n        returns (uint256 userBalance, uint256 totalSupply)\\n    {\\n        userBalance = IERC20(_asset).balanceOf(_user);\\n        totalSupply = IERC20(_asset).totalSupply();\\n    }\\n}\\n\",\"keccak256\":\"0xc441263ff74c820a047d0c29002ec6e6f0e30168e188b728831ae7e0a1e0d24c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdbfa701819d923d592f42926dbce3bbc6d0e64875d56685bb145ea0e7b449230\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200202838038062002028833981016040819052620000349162000065565b6001600160a01b039081166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051611f2d620000fb6000396000818161031a01528181610646015281816106bb015261166301526000818161035b015281816105e5015281816107f70152818161094b0152610d640152611f2d6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063711ec9ac116100c3578063aaf5eb681161007c578063aaf5eb681461033c578063cbcbb50714610356578063cc69afec1461030d578063dde43cba1461037d578063f11b818814610385578063f5cf673b146103f757600080fd5b8063711ec9ac1461029b57806374d945ec146102a357806379f171b2146102e75780638b599f26146102fa578063919cd40f1461030d57806399248ea71461031557600080fd5b80633111e7b3116101155780633111e7b31461022957806331873e2e1461023c5780633373ee4c1461024f57806339ccbdd31461026257806341485304146102755780636d34b96e1461028857600080fd5b80630f1bf70d1461015257806311279b4a146101675780631652e7b714610181578063198fa81e146101ea5780632b6995dc14610221575b600080fd5b6101656101603660046119a9565b61040a565b005b604051630893cda560e11b81526020015b60405180910390f35b6101cf61018f3660046119f4565b6001600160a01b0316600090815260208190526040902054600160681b81046001600160681b039081169290821691600160d01b900464ffffffffff1690565b60408051938452602084019290925290820152606001610178565b6102136101f83660046119f4565b6001600160a01b031660009081526002602052604090205490565b604051908152602001610178565b6101656105da565b610213610237366004611a5b565b6106e4565b61016561024a366004611ab8565b610726565b61021361025d366004611aeb565b6107bd565b610165610270366004611b15565b6107ec565b610213610283366004611b2e565b610870565b610213610296366004611b7a565b61088a565b610213610931565b6102cf6102b13660046119f4565b6001600160a01b039081166000908152600360205260409020541690565b6040516001600160a01b039091168152602001610178565b6101656102f5366004611be8565b610940565b610213610308366004611c54565b610bd0565b600154610213565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b610344601281565b60405160ff9091168152602001610178565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b610213600181565b6103ca6103933660046119f4565b6000602081905290815260409020546001600160681b0380821691600160681b810490911690600160d01b900464ffffffffff1683565b604080516001600160681b03948516815293909216602084015264ffffffffff1690820152606001610178565b610165610405366004611aeb565b610d59565b33600090815260208190526040902054600160d01b900464ffffffffff16156105d4576000336001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190611ca8565b90506001600160a01b0384166104a9578190036104ba565b6001600160a01b0383166104ba5781015b6001600160a01b03841615610546576040516370a0823160e01b81526001600160a01b0385166004820152600090839033906370a0823190602401602060405180830381865afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190611ca8565b019050610544858383610726565b505b6001600160a01b038316156105d2576040516370a0823160e01b81526001600160a01b0384166004820152600090839033906370a0823190602401602060405180830381865afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190611ca8565b0390506105d0848383610726565b505b505b50505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461062357604051632f1907a960e21b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526106e29033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190611ca8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610df9565b565b60006001600160a01b03821661070d57604051638aa3a72f60e01b815260040160405180910390fd5b61071b858585333387610e50565b90505b949350505050565b6000610734843384866110ec565b905080156105d4576001600160a01b038416600090815260026020526040902054610760908290611cd7565b6001600160a01b038516600081815260026020526040908190209290925590517f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76906107af9084815260200190565b60405180910390a250505050565b6001600160a01b0380821660009081526020818152604080832093861683526001909301905220545b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461083557604051632f1907a960e21b815260040160405180910390fd5b60018190556040518181527f1cc1849a6602c3e91f2088cadea4381cc5717f2f28584197060ed2ebb434c16f9060200160405180910390a150565b6000610880848484333333610e50565b90505b9392505050565b6001600160a01b038083166000908152600360205260408120549091339185911682146108c957604051620bb58b60e51b815260040160405180910390fd5b6001600160a01b0385166108f057604051630702b3d960e41b815260040160405180910390fd5b6001600160a01b03841661091757604051638aa3a72f60e01b815260040160405180910390fd5b610925888888338989610e50565b98975050505050505050565b61093d6012600a611dd3565b81565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461098957604051632f1907a960e21b815260040160405180910390fd5b8281146109a95760405163c52a9bd360e01b815260040160405180910390fd5b60008367ffffffffffffffff8111156109c4576109c4611de2565b604051908082528060200260200182016040528015610a0f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816109e25790505b50905060005b84811015610bc657838382818110610a2f57610a2f611df8565b90506020020135848483818110610a4857610a48611df8565b905060200201356001600160681b031614610a7657604051634266136760e11b815260040160405180910390fd5b858582818110610a8857610a88611df8565b9050602002016020810190610a9d91906119f4565b828281518110610aaf57610aaf611df8565b6020026020010151604001906001600160a01b031690816001600160a01b031681525050838382818110610ae557610ae5611df8565b90506020020135828281518110610afe57610afe611df8565b60209081029190910101516001600160681b039091169052858582818110610b2857610b28611df8565b9050602002016020810190610b3d91906119f4565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190611ca8565b828281518110610bb057610bb0611df8565b6020908102919091018101510152600101610a15565b506105d2816111ab565b6001600160a01b038116600090815260026020526040812054818467ffffffffffffffff811115610c0357610c03611de2565b604051908082528060200260200182016040528015610c6157816020015b610c4e604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610c215790505b50905060005b85811015610d3a57868682818110610c8157610c81611df8565b9050602002016020810190610c9691906119f4565b828281518110610ca857610ca8611df8565b60209081029190910101516001600160a01b039091169052610cf0878783818110610cd557610cd5611df8565b9050602002016020810190610cea91906119f4565b8661130f565b838381518110610d0257610d02611df8565b6020026020010151602001848481518110610d1f57610d1f611df8565b60209081029190910101516040019190915252600101610c67565b50610d4584826113eb565b610d4f9083611cd7565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da257604051632f1907a960e21b815260040160405180910390fd5b6001600160a01b0382811660008181526003602052604080822080546001600160a01b0319169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e4b9084906114fa565b505050565b600084600003610e6257506000610d4f565b6001600160a01b0383166000908152600260205260409020548086111561103d5760008767ffffffffffffffff811115610e9e57610e9e611de2565b604051908082528060200260200182016040528015610efc57816020015b610ee9604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610ebc5790505b50905060005b88811015610fd557898982818110610f1c57610f1c611df8565b9050602002016020810190610f3191906119f4565b828281518110610f4357610f43611df8565b60209081029190910101516001600160a01b039091169052610f8b8a8a83818110610f7057610f70611df8565b9050602002016020810190610f8591906119f4565b8761130f565b838381518110610f9d57610f9d611df8565b6020026020010151602001848481518110610fba57610fba611df8565b60209081029190910101516040019190915252600101610f02565b506000610fe286836115d1565b9050801561103a57610ff48184611cd7565b9250856001600160a01b03167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768260405161103191815260200190565b60405180910390a25b50505b8060000361104f576000915050610d4f565b600081871161105e5786611060565b815b6001600160a01b0386166000908152600260205260409020818403905590506110898482611656565b856001600160a01b0316846001600160a01b0316866001600160a01b03167f5637d7f962248a7f05a7ab69eec6446e31f3d0a299d997f135a65c62806e7891846040516110d891815260200190565b60405180910390a498975050505050505050565b6001600160a01b03808416600090815260208181526040808320938816835260018401909152812054909190828061112588858861168a565b905080831461119f5786156111425761113f8782856117bb565b91505b6001600160a01b03808a1660008181526001870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b906111969085815260200190565b60405180910390a35b50979650505050505050565b60005b815181101561130b5760008060008484815181106111ce576111ce611df8565b6020026020010151604001516001600160a01b03166001600160a01b03168152602001908152602001600020905061124183838151811061121157611211611df8565b6020026020010151604001518285858151811061123057611230611df8565b60200260200101516020015161168a565b5082828151811061125457611254611df8565b60209081029190910101515181546cffffffffffffffffffffffffff19166001600160681b03909116178155825183908390811061129457611294611df8565b6020026020010151604001516001600160a01b03167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8484815181106112dc576112dc611df8565b602090810291909101810151516040516001600160681b0390911681520160405180910390a2506001016111ae565b5050565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918516906370a0823190602401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190611ca8565b9150836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e29190611ca8565b90509250929050565b600080805b83518110156114f257600080600086848151811061141057611410611df8565b602090810291909101810151516001600160a01b0316825281019190915260400160009081208054875191935061148b91600160681b82046001600160681b039081169290811691600160d01b90910464ffffffffff16908a908890811061147a5761147a611df8565b6020026020010151604001516117e4565b90506114dc8684815181106114a2576114a2611df8565b602002602001015160200151828460010160008b6001600160a01b03166001600160a01b03168152602001908152602001600020546117bb565b6114e69085611cd7565b935050506001016113f0565b509392505050565b600061154f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118929092919063ffffffff16565b805190915015610e4b578080602001905181019061156d9190611e0e565b610e4b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600080805b83518110156114f257611642858583815181106115f5576115f5611df8565b60200260200101516000015186848151811061161357611613611df8565b60200260200101516020015187858151811061163157611631611df8565b6020026020010151604001516110ec565b61164c9083611cd7565b91506001016115d6565b61130b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610df9565b81546000906001600160681b03600160681b82048116919081169064ffffffffff600160d01b90910416428190036116c757829350505050610883565b60006116d5848484896117e4565b90508381146117915780816001600160681b03161461170757604051637decd25760e01b815260040160405180910390fd5b865471ffffffffffffffffffffffffffffffffffff60681b1916600160681b6001600160681b0383160264ffffffffff60d01b191617600160d01b4264ffffffffff16021787556040518181526001600160a01b038916907f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc9060200160405180910390a26117b0565b865464ffffffffff60d01b1916600160d01b4264ffffffffff16021787555b979650505050505050565b60006117c78284611e30565b6117d19085611e47565b670de0b6b3a76400009004949350505050565b6001546000908415806117f5575082155b80611808575042846001600160801b0316145b8061181c575080846001600160801b031610155b1561182a578591505061071e565b6000814211611839574261183b565b815b905060006118526001600160801b03871683611e30565b90506118606012600a611dd3565b61186a8289611e47565b6118749190611e47565b935084848161188557611885611e66565b0493506109258885611cd7565b6060610880848460008585843b6118eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016115c8565b600080866001600160a01b031685876040516119079190611ea8565b60006040518083038185875af1925050503d8060008114611944576040519150601f19603f3d011682016040523d82523d6000602084013e611949565b606091505b50915091506117b082828660608315611963575081610883565b8251156119735782518084602001fd5b8160405162461bcd60e51b81526004016115c89190611ec4565b80356001600160a01b03811681146119a457600080fd5b919050565b600080600080608085870312156119bf57600080fd5b6119c88561198d565b93506119d66020860161198d565b92506119e46040860161198d565b9396929550929360600135925050565b600060208284031215611a0657600080fd5b6108838261198d565b60008083601f840112611a2157600080fd5b50813567ffffffffffffffff811115611a3957600080fd5b6020830191508360208260051b8501011115611a5457600080fd5b9250929050565b60008060008060608587031215611a7157600080fd5b843567ffffffffffffffff811115611a8857600080fd5b611a9487828801611a0f565b90955093505060208501359150611aad6040860161198d565b905092959194509250565b600080600060608486031215611acd57600080fd5b611ad68461198d565b95602085013595506040909401359392505050565b60008060408385031215611afe57600080fd5b611b078361198d565b91506113e26020840161198d565b600060208284031215611b2757600080fd5b5035919050565b600080600060408486031215611b4357600080fd5b833567ffffffffffffffff811115611b5a57600080fd5b611b6686828701611a0f565b909790965060209590950135949350505050565b600080600080600060808688031215611b9257600080fd5b853567ffffffffffffffff811115611ba957600080fd5b611bb588828901611a0f565b90965094505060208601359250611bce6040870161198d565b9150611bdc6060870161198d565b90509295509295909350565b60008060008060408587031215611bfe57600080fd5b843567ffffffffffffffff80821115611c1657600080fd5b611c2288838901611a0f565b90965094506020870135915080821115611c3b57600080fd5b50611c4887828801611a0f565b95989497509550505050565b600080600060408486031215611c6957600080fd5b833567ffffffffffffffff811115611c8057600080fd5b611c8c86828701611a0f565b9094509250611c9f90506020850161198d565b90509250925092565b600060208284031215611cba57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611cea57611cea611cc1565b500190565b600181815b80851115611d2a578160001904821115611d1057611d10611cc1565b80851615611d1d57918102915b93841c9390800290611cf4565b509250929050565b600082611d41575060016107e6565b81611d4e575060006107e6565b8160018114611d645760028114611d6e57611d8a565b60019150506107e6565b60ff841115611d7f57611d7f611cc1565b50506001821b6107e6565b5060208310610133831016604e8410600b8410161715611dad575081810a6107e6565b611db78383611cef565b8060001904821115611dcb57611dcb611cc1565b029392505050565b600061088360ff841683611d32565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e2057600080fd5b8151801515811461088357600080fd5b600082821015611e4257611e42611cc1565b500390565b6000816000190483118215151615611e6157611e61611cc1565b500290565b634e487b7160e01b600052601260045260246000fd5b60005b83811015611e97578181015183820152602001611e7f565b838111156105d45750506000910152565b60008251611eba818460208701611e7c565b9190910192915050565b6020815260008251806020840152611ee3816040850160208701611e7c565b601f01601f1916919091016040019291505056fea26469706673582212204b5226506ce8ed6ebe8ba106262c3693a5ce96f32fc262f8f16a68716da9fe0664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063711ec9ac116100c3578063aaf5eb681161007c578063aaf5eb681461033c578063cbcbb50714610356578063cc69afec1461030d578063dde43cba1461037d578063f11b818814610385578063f5cf673b146103f757600080fd5b8063711ec9ac1461029b57806374d945ec146102a357806379f171b2146102e75780638b599f26146102fa578063919cd40f1461030d57806399248ea71461031557600080fd5b80633111e7b3116101155780633111e7b31461022957806331873e2e1461023c5780633373ee4c1461024f57806339ccbdd31461026257806341485304146102755780636d34b96e1461028857600080fd5b80630f1bf70d1461015257806311279b4a146101675780631652e7b714610181578063198fa81e146101ea5780632b6995dc14610221575b600080fd5b6101656101603660046119a9565b61040a565b005b604051630893cda560e11b81526020015b60405180910390f35b6101cf61018f3660046119f4565b6001600160a01b0316600090815260208190526040902054600160681b81046001600160681b039081169290821691600160d01b900464ffffffffff1690565b60408051938452602084019290925290820152606001610178565b6102136101f83660046119f4565b6001600160a01b031660009081526002602052604090205490565b604051908152602001610178565b6101656105da565b610213610237366004611a5b565b6106e4565b61016561024a366004611ab8565b610726565b61021361025d366004611aeb565b6107bd565b610165610270366004611b15565b6107ec565b610213610283366004611b2e565b610870565b610213610296366004611b7a565b61088a565b610213610931565b6102cf6102b13660046119f4565b6001600160a01b039081166000908152600360205260409020541690565b6040516001600160a01b039091168152602001610178565b6101656102f5366004611be8565b610940565b610213610308366004611c54565b610bd0565b600154610213565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b610344601281565b60405160ff9091168152602001610178565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b610213600181565b6103ca6103933660046119f4565b6000602081905290815260409020546001600160681b0380821691600160681b810490911690600160d01b900464ffffffffff1683565b604080516001600160681b03948516815293909216602084015264ffffffffff1690820152606001610178565b610165610405366004611aeb565b610d59565b33600090815260208190526040902054600160d01b900464ffffffffff16156105d4576000336001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190611ca8565b90506001600160a01b0384166104a9578190036104ba565b6001600160a01b0383166104ba5781015b6001600160a01b03841615610546576040516370a0823160e01b81526001600160a01b0385166004820152600090839033906370a0823190602401602060405180830381865afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190611ca8565b019050610544858383610726565b505b6001600160a01b038316156105d2576040516370a0823160e01b81526001600160a01b0384166004820152600090839033906370a0823190602401602060405180830381865afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190611ca8565b0390506105d0848383610726565b505b505b50505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461062357604051632f1907a960e21b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526106e29033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190611ca8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610df9565b565b60006001600160a01b03821661070d57604051638aa3a72f60e01b815260040160405180910390fd5b61071b858585333387610e50565b90505b949350505050565b6000610734843384866110ec565b905080156105d4576001600160a01b038416600090815260026020526040902054610760908290611cd7565b6001600160a01b038516600081815260026020526040908190209290925590517f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76906107af9084815260200190565b60405180910390a250505050565b6001600160a01b0380821660009081526020818152604080832093861683526001909301905220545b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461083557604051632f1907a960e21b815260040160405180910390fd5b60018190556040518181527f1cc1849a6602c3e91f2088cadea4381cc5717f2f28584197060ed2ebb434c16f9060200160405180910390a150565b6000610880848484333333610e50565b90505b9392505050565b6001600160a01b038083166000908152600360205260408120549091339185911682146108c957604051620bb58b60e51b815260040160405180910390fd5b6001600160a01b0385166108f057604051630702b3d960e41b815260040160405180910390fd5b6001600160a01b03841661091757604051638aa3a72f60e01b815260040160405180910390fd5b610925888888338989610e50565b98975050505050505050565b61093d6012600a611dd3565b81565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461098957604051632f1907a960e21b815260040160405180910390fd5b8281146109a95760405163c52a9bd360e01b815260040160405180910390fd5b60008367ffffffffffffffff8111156109c4576109c4611de2565b604051908082528060200260200182016040528015610a0f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816109e25790505b50905060005b84811015610bc657838382818110610a2f57610a2f611df8565b90506020020135848483818110610a4857610a48611df8565b905060200201356001600160681b031614610a7657604051634266136760e11b815260040160405180910390fd5b858582818110610a8857610a88611df8565b9050602002016020810190610a9d91906119f4565b828281518110610aaf57610aaf611df8565b6020026020010151604001906001600160a01b031690816001600160a01b031681525050838382818110610ae557610ae5611df8565b90506020020135828281518110610afe57610afe611df8565b60209081029190910101516001600160681b039091169052858582818110610b2857610b28611df8565b9050602002016020810190610b3d91906119f4565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190611ca8565b828281518110610bb057610bb0611df8565b6020908102919091018101510152600101610a15565b506105d2816111ab565b6001600160a01b038116600090815260026020526040812054818467ffffffffffffffff811115610c0357610c03611de2565b604051908082528060200260200182016040528015610c6157816020015b610c4e604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610c215790505b50905060005b85811015610d3a57868682818110610c8157610c81611df8565b9050602002016020810190610c9691906119f4565b828281518110610ca857610ca8611df8565b60209081029190910101516001600160a01b039091169052610cf0878783818110610cd557610cd5611df8565b9050602002016020810190610cea91906119f4565b8661130f565b838381518110610d0257610d02611df8565b6020026020010151602001848481518110610d1f57610d1f611df8565b60209081029190910101516040019190915252600101610c67565b50610d4584826113eb565b610d4f9083611cd7565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da257604051632f1907a960e21b815260040160405180910390fd5b6001600160a01b0382811660008181526003602052604080822080546001600160a01b0319169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e4b9084906114fa565b505050565b600084600003610e6257506000610d4f565b6001600160a01b0383166000908152600260205260409020548086111561103d5760008767ffffffffffffffff811115610e9e57610e9e611de2565b604051908082528060200260200182016040528015610efc57816020015b610ee9604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081610ebc5790505b50905060005b88811015610fd557898982818110610f1c57610f1c611df8565b9050602002016020810190610f3191906119f4565b828281518110610f4357610f43611df8565b60209081029190910101516001600160a01b039091169052610f8b8a8a83818110610f7057610f70611df8565b9050602002016020810190610f8591906119f4565b8761130f565b838381518110610f9d57610f9d611df8565b6020026020010151602001848481518110610fba57610fba611df8565b60209081029190910101516040019190915252600101610f02565b506000610fe286836115d1565b9050801561103a57610ff48184611cd7565b9250856001600160a01b03167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768260405161103191815260200190565b60405180910390a25b50505b8060000361104f576000915050610d4f565b600081871161105e5786611060565b815b6001600160a01b0386166000908152600260205260409020818403905590506110898482611656565b856001600160a01b0316846001600160a01b0316866001600160a01b03167f5637d7f962248a7f05a7ab69eec6446e31f3d0a299d997f135a65c62806e7891846040516110d891815260200190565b60405180910390a498975050505050505050565b6001600160a01b03808416600090815260208181526040808320938816835260018401909152812054909190828061112588858861168a565b905080831461119f5786156111425761113f8782856117bb565b91505b6001600160a01b03808a1660008181526001870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b906111969085815260200190565b60405180910390a35b50979650505050505050565b60005b815181101561130b5760008060008484815181106111ce576111ce611df8565b6020026020010151604001516001600160a01b03166001600160a01b03168152602001908152602001600020905061124183838151811061121157611211611df8565b6020026020010151604001518285858151811061123057611230611df8565b60200260200101516020015161168a565b5082828151811061125457611254611df8565b60209081029190910101515181546cffffffffffffffffffffffffff19166001600160681b03909116178155825183908390811061129457611294611df8565b6020026020010151604001516001600160a01b03167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8484815181106112dc576112dc611df8565b602090810291909101810151516040516001600160681b0390911681520160405180910390a2506001016111ae565b5050565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918516906370a0823190602401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190611ca8565b9150836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e29190611ca8565b90509250929050565b600080805b83518110156114f257600080600086848151811061141057611410611df8565b602090810291909101810151516001600160a01b0316825281019190915260400160009081208054875191935061148b91600160681b82046001600160681b039081169290811691600160d01b90910464ffffffffff16908a908890811061147a5761147a611df8565b6020026020010151604001516117e4565b90506114dc8684815181106114a2576114a2611df8565b602002602001015160200151828460010160008b6001600160a01b03166001600160a01b03168152602001908152602001600020546117bb565b6114e69085611cd7565b935050506001016113f0565b509392505050565b600061154f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118929092919063ffffffff16565b805190915015610e4b578080602001905181019061156d9190611e0e565b610e4b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600080805b83518110156114f257611642858583815181106115f5576115f5611df8565b60200260200101516000015186848151811061161357611613611df8565b60200260200101516020015187858151811061163157611631611df8565b6020026020010151604001516110ec565b61164c9083611cd7565b91506001016115d6565b61130b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610df9565b81546000906001600160681b03600160681b82048116919081169064ffffffffff600160d01b90910416428190036116c757829350505050610883565b60006116d5848484896117e4565b90508381146117915780816001600160681b03161461170757604051637decd25760e01b815260040160405180910390fd5b865471ffffffffffffffffffffffffffffffffffff60681b1916600160681b6001600160681b0383160264ffffffffff60d01b191617600160d01b4264ffffffffff16021787556040518181526001600160a01b038916907f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc9060200160405180910390a26117b0565b865464ffffffffff60d01b1916600160d01b4264ffffffffff16021787555b979650505050505050565b60006117c78284611e30565b6117d19085611e47565b670de0b6b3a76400009004949350505050565b6001546000908415806117f5575082155b80611808575042846001600160801b0316145b8061181c575080846001600160801b031610155b1561182a578591505061071e565b6000814211611839574261183b565b815b905060006118526001600160801b03871683611e30565b90506118606012600a611dd3565b61186a8289611e47565b6118749190611e47565b935084848161188557611885611e66565b0493506109258885611cd7565b6060610880848460008585843b6118eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016115c8565b600080866001600160a01b031685876040516119079190611ea8565b60006040518083038185875af1925050503d8060008114611944576040519150601f19603f3d011682016040523d82523d6000602084013e611949565b606091505b50915091506117b082828660608315611963575081610883565b8251156119735782518084602001fd5b8160405162461bcd60e51b81526004016115c89190611ec4565b80356001600160a01b03811681146119a457600080fd5b919050565b600080600080608085870312156119bf57600080fd5b6119c88561198d565b93506119d66020860161198d565b92506119e46040860161198d565b9396929550929360600135925050565b600060208284031215611a0657600080fd5b6108838261198d565b60008083601f840112611a2157600080fd5b50813567ffffffffffffffff811115611a3957600080fd5b6020830191508360208260051b8501011115611a5457600080fd5b9250929050565b60008060008060608587031215611a7157600080fd5b843567ffffffffffffffff811115611a8857600080fd5b611a9487828801611a0f565b90955093505060208501359150611aad6040860161198d565b905092959194509250565b600080600060608486031215611acd57600080fd5b611ad68461198d565b95602085013595506040909401359392505050565b60008060408385031215611afe57600080fd5b611b078361198d565b91506113e26020840161198d565b600060208284031215611b2757600080fd5b5035919050565b600080600060408486031215611b4357600080fd5b833567ffffffffffffffff811115611b5a57600080fd5b611b6686828701611a0f565b909790965060209590950135949350505050565b600080600080600060808688031215611b9257600080fd5b853567ffffffffffffffff811115611ba957600080fd5b611bb588828901611a0f565b90965094505060208601359250611bce6040870161198d565b9150611bdc6060870161198d565b90509295509295909350565b60008060008060408587031215611bfe57600080fd5b843567ffffffffffffffff80821115611c1657600080fd5b611c2288838901611a0f565b90965094506020870135915080821115611c3b57600080fd5b50611c4887828801611a0f565b95989497509550505050565b600080600060408486031215611c6957600080fd5b833567ffffffffffffffff811115611c8057600080fd5b611c8c86828701611a0f565b9094509250611c9f90506020850161198d565b90509250925092565b600060208284031215611cba57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611cea57611cea611cc1565b500190565b600181815b80851115611d2a578160001904821115611d1057611d10611cc1565b80851615611d1d57918102915b93841c9390800290611cf4565b509250929050565b600082611d41575060016107e6565b81611d4e575060006107e6565b8160018114611d645760028114611d6e57611d8a565b60019150506107e6565b60ff841115611d7f57611d7f611cc1565b50506001821b6107e6565b5060208310610133831016604e8410600b8410161715611dad575081810a6107e6565b611db78383611cef565b8060001904821115611dcb57611dcb611cc1565b029392505050565b600061088360ff841683611d32565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e2057600080fd5b8151801515811461088357600080fd5b600082821015611e4257611e42611cc1565b500390565b6000816000190483118215151615611e6157611e61611cc1565b500290565b634e487b7160e01b600052601260045260246000fd5b60005b83811015611e97578181015183820152602001611e7f565b838111156105d45750506000910152565b60008251611eba818460208701611e7c565b9190910192915050565b6020815260008251806020840152611ee3816040850160208701611e7c565b601f01601f1916919091016040019291505056fea26469706673582212204b5226506ce8ed6ebe8ba106262c3693a5ce96f32fc262f8f16a68716da9fe0664736f6c634300080d0033",
  "devdoc": {
    "author": "Aave",
    "kind": "dev",
    "methods": {
      "DISTRIBUTION_END()": {
        "details": "for backwards compatibility with the previous DistributionManager used",
        "returns": {
          "_0": "The end of the distribution"
        }
      },
      "claimRewards(address[],uint256,address)": {
        "details": "Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards",
        "params": {
          "amount": "Amount of rewards to claim",
          "to": "Address that will be receiving the rewards"
        },
        "returns": {
          "_0": "Rewards claimed"
        }
      },
      "claimRewardsOnBehalf(address[],uint256,address,address)": {
        "details": "Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "amount": "Amount of rewards to claim",
          "to": "Address that will be receiving the rewards",
          "user": "Address to check and claim rewards"
        },
        "returns": {
          "_0": "Rewards claimed"
        }
      },
      "claimRewardsToSelf(address[],uint256)": {
        "details": "Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards",
        "params": {
          "amount": "Amount of rewards to claim"
        },
        "returns": {
          "_0": "Rewards claimed"
        }
      },
      "configureAssets(address[],uint256[])": {
        "details": "Configure assets for a certain rewards emission",
        "params": {
          "assets": "The assets to incentivize",
          "emissionsPerSecond": "The emission for each asset"
        }
      },
      "getAssetData(address)": {
        "details": "Returns the configuration of the distribution for a certain asset",
        "params": {
          "asset": "The address of the reference asset of the distribution"
        },
        "returns": {
          "_0": "The asset index, the emission per second and the last updated timestamp"
        }
      },
      "getClaimer(address)": {
        "details": "Returns the whitelisted claimer for a certain address (0x0 if not set)",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The claimer address"
        }
      },
      "getDistributionEnd()": {
        "details": "Gets the end date for the distribution",
        "returns": {
          "_0": "The end of the distribution"
        }
      },
      "getRewardsBalance(address[],address)": {
        "details": "Returns the total of rewards of an user, already accrued + not yet accrued",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The rewards"
        }
      },
      "getUserAssetData(address,address)": {
        "details": "Returns the data of an user on a distribution",
        "params": {
          "asset": "The address of the reference asset of the distribution",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The new index"
        }
      },
      "getUserUnclaimedRewards(address)": {
        "details": "returns the unclaimed rewards of the user",
        "params": {
          "user": "the address of the user"
        },
        "returns": {
          "_0": "the unclaimed user rewards"
        }
      },
      "handleAction(address,uint256,uint256)": {
        "details": "Called by the corresponding asset on any update that affects the rewards distribution",
        "params": {
          "asset": "The address of the user",
          "totalSupply": "The total supply of the asset in the lending pool",
          "userBalance": "The balance of the user of the asset in the lending pool"
        }
      },
      "notificationReceiverPing()": {
        "details": "Sanity check function",
        "returns": {
          "_0": "always true"
        }
      },
      "onAfterTransfer(address,address,address,uint256)": {
        "details": "Silo share token event handler"
      },
      "rescueRewards()": {
        "details": "it will transfer all balance of reward token to emission manager wallet"
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another address",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(uint256)": {
        "details": "Sets the end date for the distribution",
        "params": {
          "distributionEnd": "The end date timestamp"
        }
      }
    },
    "title": "SiloIncentivesController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset. The contract stakes the rewards before redistributing them to the Aave protocol participants. The reference staked token implementation is at https://github.com/aave/aave-stake-v2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20528,
        "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
        "label": "assets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(AssetData)20513_storage)"
      },
      {
        "astId": 20530,
        "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
        "label": "_distributionEnd",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19881,
        "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
        "label": "_usersUnclaimedRewards",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19885,
        "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
        "label": "_authorizedClaimers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AssetData)20513_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DistributionManager.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)20513_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetData)20513_storage": {
        "encoding": "inplace",
        "label": "struct DistributionManager.AssetData",
        "members": [
          {
            "astId": 20504,
            "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
            "label": "emissionPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 20506,
            "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
            "label": "index",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 20508,
            "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
            "label": "lastUpdateTimestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 20512,
            "contract": "contracts/incentives/SiloIncentivesController.sol:SiloIncentivesController",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}