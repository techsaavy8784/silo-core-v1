{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title Common interface for Silo Price Providers\ninterface IPriceProvider {\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset.\n    /// It unifies all tokens decimal to 18, examples:\n    /// - if asses == quote it returns 1e18\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\n    /// @param _asset address of an asset for which to read price\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\n    /// Some providers implementations need time to \"build\" buffer for TWAP price,\n    /// so price may not be available yet but this method will return true.\n    /// @param _asset asset in question\n    /// @return TRUE if asset has been setup, otherwise false\n    function assetSupported(address _asset) external view returns (bool);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\n    /// @dev this can save us from simple human errors, in case we use invalid address\n    /// but this should NOT be treated as security check\n    /// @return always true\n    function priceProviderPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\ninterface IPriceProvidersRepository {\n    /// @notice Emitted when price provider is added\n    /// @param newPriceProvider new price provider address\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\n\n    /// @notice Emitted when price provider is removed\n    /// @param priceProvider removed price provider address\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\n\n    /// @notice Emitted when asset is assigned to price provider\n    /// @param asset assigned asset   address\n    /// @param priceProvider price provider address\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\n\n    /// @notice Register new price provider\n    /// @param _priceProvider address of price provider\n    function addPriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Unregister price provider\n    /// @param _priceProvider address of price provider to be removed\n    function removePriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Sets price provider for asset\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\n    /// @param _asset address of an asset for which price provider will be used\n    /// @param _priceProvider address of price provider\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\n\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset\n    /// @param _asset address of an asset for which to read price\n    /// @return price TWAP price of a token with 18 decimals\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @notice Gets price provider assigned to an asset\n    /// @param _asset address of an asset for which to get price provider\n    /// @return priceProvider address of price provider\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Gets manager role address\n    /// @return manager role address\n    function manager() external view returns (address);\n\n    /// @notice Checks if providers are available for an asset\n    /// @param _asset asset address to check\n    /// @return returns TRUE if price feed is ready, otherwise false\n    function providersReadyForAsset(address _asset) external view returns (bool);\n\n    /// @notice Returns true if address is a registered price provider\n    /// @param _provider address of price provider to be removed\n    /// @return true if address is a registered price provider, otherwise false\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\n\n    /// @notice Gets number of price providers registered\n    /// @return number of price providers registered\n    function providersCount() external view returns (uint256);\n\n    /// @notice Gets an array of price providers\n    /// @return array of price providers\n    function providerList() external view returns (address[] memory);\n\n    /// @notice Sanity check function\n    /// @return returns always TRUE\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProviderV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\n/// @title Common interface V2 for Silo Price Providers\ninterface IPriceProviderV2 is IPriceProvider {\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\n    /// we have this method to return on-chain provider that can be useful for liquidation\n    function getFallbackProvider(address _asset) external view returns (IPriceProvider);\n\n    /// @dev this is info method for LiquidationHelper\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\n    function offChainProvider() external pure returns (bool);\n}\n"
    },
    "contracts/lib/Ping.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n\nlibrary Ping {\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\n    }\n}\n"
    },
    "contracts/lib/TokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n\nlibrary TokenHelper {\n    uint256 private constant _BYTES32_SIZE = 32;\n\n    error TokenIsNotAContract();\n\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\n\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\n        // we assume there are no decimals and use 0.\n        if (!hasMetadata) {\n            return 0;\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Returns the symbol for the provided ERC20 token.\n    /// An empty string is returned if the call to the token didn't succeed.\n    /// @param _token address of the token to get the symbol for\n    /// @return assetSymbol the token symbol\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\n\n        if (!hasMetadata || data.length == 0) {\n            return \"?\";\n        } else if (data.length == _BYTES32_SIZE) {\n            return string(removeZeros(data));\n        } else {\n            return abi.decode(data, (string));\n        }\n    }\n\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\n    /// @param _data byte array from which to remove zeroes\n    /// @return result byte array with zeroes removed \n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\n        uint256 n = _data.length;\n\n        unchecked {\n            for (uint256 i; i < n; i++) {\n                if (_data[i] == 0) continue;\n\n                result = abi.encodePacked(result, _data[i]);\n            }\n        }\n    }\n\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\n\n        (bool success, bytes memory result) = _token.staticcall(_data);\n\n        // If the call reverted we assume the token doesn't follow the metadata extension\n        if (!success) {\n            return (false, \"\");\n        }\n\n        return (true, result);\n    }\n}\n"
    },
    "contracts/priceProviders/chainlinkV3/ChainlinkV3PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport \"../PriceProvider.sol\";\nimport \"../IERC20LikeV2.sol\";\n\ncontract ChainlinkV3PriceProvider is PriceProvider {\n    using SafeMath for uint256;\n\n    struct AssetData {\n        // Time threshold to invalidate stale prices\n        uint256 heartbeat;\n        // If true, we bypass the aggregator and consult the fallback provider directly\n        bool forceFallback;\n        // If true, the aggregator returns price in USD, so we need to convert to QUOTE\n        bool convertToQuote;\n        // Chainlink aggregator proxy\n        AggregatorV3Interface aggregator;\n        // Provider used if the aggregator's price is invalid or if it became disabled\n        IPriceProvider fallbackProvider;\n    }\n\n    /// @dev Aggregator that converts from USD to quote token\n    AggregatorV3Interface internal immutable _QUOTE_AGGREGATOR; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Decimals used by the _QUOTE_AGGREGATOR\n    uint8 internal immutable _QUOTE_AGGREGATOR_DECIMALS; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Used to optimize calculations in emergency disable function\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 internal immutable _MAX_PRICE_DIFF = type(uint256).max / (100 * EMERGENCY_PRECISION);\n    \n    // @dev Precision to use for the EMERGENCY_THRESHOLD\n    uint256 public constant EMERGENCY_PRECISION = 1e6;\n\n    /// @dev Disable the aggregator if the difference with the fallback is higher than this percentage (10%)\n    uint256 public constant EMERGENCY_THRESHOLD = 10 * EMERGENCY_PRECISION; // solhint-disable-line var-name-mixedcase\n\n    /// @dev this is basically `PriceProvider.quoteToken.decimals()`\n    uint8 internal immutable _QUOTE_TOKEN_DECIMALS; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Address allowed to call the emergencyDisable function, can be set by the owner\n    address public emergencyManager;\n\n    /// @dev Threshold used to determine if the price returned by the _QUOTE_AGGREGATOR is valid\n    uint256 public quoteAggregatorHeartbeat;\n\n    /// @dev Data used for each asset\n    mapping(address => AssetData) public assetData;\n\n    event NewAggregator(address indexed asset, AggregatorV3Interface indexed aggregator, bool convertToQuote);\n    event NewFallbackPriceProvider(address indexed asset, IPriceProvider indexed fallbackProvider);\n    event NewHeartbeat(address indexed asset, uint256 heartbeat);\n    event NewQuoteAggregatorHeartbeat(uint256 heartbeat);\n    event NewEmergencyManager(address indexed emergencyManager);\n    event AggregatorDisabled(address indexed asset, AggregatorV3Interface indexed aggregator);\n\n    error AggregatorDidNotChange();\n    error AggregatorPriceNotAvailable();\n    error AssetNotSupported();\n    error EmergencyManagerDidNotChange();\n    error EmergencyThresholdNotReached();\n    error FallbackProviderAlreadySet();\n    error FallbackProviderDidNotChange();\n    error FallbackProviderNotSet();\n    error HeartbeatDidNotChange();\n    error InvalidAggregator();\n    error InvalidAggregatorDecimals();\n    error InvalidFallbackPriceProvider();\n    error InvalidHeartbeat();\n    error OnlyEmergencyManager();\n    error QuoteAggregatorHeartbeatDidNotChange();\n\n    modifier onlyAssetSupported(address _asset) {\n        if (!assetSupported(_asset)) {\n            revert AssetNotSupported();\n        }\n\n        _;\n    }\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _emergencyManager,\n        AggregatorV3Interface _quoteAggregator,\n        uint256 _quoteAggregatorHeartbeat\n    ) PriceProvider(_priceProvidersRepository) {\n        _setEmergencyManager(_emergencyManager);\n        _QUOTE_TOKEN_DECIMALS = IERC20LikeV2(quoteToken).decimals();\n        _QUOTE_AGGREGATOR = _quoteAggregator;\n        _QUOTE_AGGREGATOR_DECIMALS = _quoteAggregator.decimals();\n        quoteAggregatorHeartbeat = _quoteAggregatorHeartbeat;\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        AssetData storage data = assetData[_asset];\n\n        // Asset is supported if:\n        //     - the asset is the quote token\n        //       OR\n        //     - the aggregator address is defined AND\n        //         - the aggregator is not disabled\n        //           OR\n        //         - the fallback is defined\n\n        if (_asset == quoteToken) {\n            return true;\n        }\n\n        if (address(data.aggregator) != address(0)) {\n            return !data.forceFallback || address(data.fallbackProvider) != address(0);\n        }\n\n        return false;\n    }\n\n    /// @dev Returns price directly from aggregator using all internal settings except of fallback provider\n    /// @param _asset Asset for which we want to get the price\n    function getAggregatorPrice(address _asset) public view virtual returns (bool success, uint256 price) {\n        (success, price) = _getAggregatorPrice(_asset);\n    }\n    \n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256) {\n        address quote = quoteToken;\n\n        if (_asset == quote) {\n            return 10 ** _QUOTE_TOKEN_DECIMALS;\n        }\n\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\n\n        return success ? price : _getFallbackPrice(_asset);\n    }\n\n    /// @dev Sets the aggregator, fallbackProvider and heartbeat for an asset. Can only be called by the manager.\n    /// @param _asset Asset to setup\n    /// @param _aggregator Chainlink aggregator proxy\n    /// @param _fallbackProvider Provider to use if the price is invalid or if the aggregator was disabled\n    /// @param _heartbeat Threshold in seconds to invalidate a stale price\n    function setupAsset(\n        address _asset,\n        AggregatorV3Interface _aggregator,\n        IPriceProvider _fallbackProvider,\n        uint256 _heartbeat,\n        bool _convertToQuote\n    ) external virtual onlyManager {\n        // This has to be done first so that `_setAggregator` works\n        _setHeartbeat(_asset, _heartbeat);\n\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\n\n        // We don't care if this doesn't change\n        _setFallbackPriceProvider(_asset, _fallbackProvider);\n    }\n\n    /// @dev Sets the aggregator for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the aggregator\n    /// @param _aggregator Aggregator to set\n    function setAggregator(address _asset, AggregatorV3Interface _aggregator, bool _convertToQuote)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\n    }\n\n    /// @dev Sets the fallback provider for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the fallback provider\n    /// @param _fallbackProvider Provider to set\n    function setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setFallbackPriceProvider(_asset, _fallbackProvider)) {\n            revert FallbackProviderDidNotChange();\n        }\n    }\n\n    /// @dev Sets the heartbeat threshold for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the heartbeat threshold\n    /// @param _heartbeat Threshold to set\n    function setHeartbeat(address _asset, uint256 _heartbeat)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setHeartbeat(_asset, _heartbeat)) revert HeartbeatDidNotChange();\n    }\n\n    /// @dev Sets the quote aggregator heartbeat threshold. Can only be called by the manager.\n    /// @param _heartbeat Threshold to set\n    function setQuoteAggregatorHeartbeat(uint256 _heartbeat)\n        external\n        virtual\n        onlyManager\n    {\n        if (!_setQuoteAggregatorHeartbeat(_heartbeat)) revert QuoteAggregatorHeartbeatDidNotChange();\n    }\n\n    /// @dev Sets the emergencyManager. Can only be called by the manager.\n    /// @param _emergencyManager Emergency manager to set\n    function setEmergencyManager(address _emergencyManager) external virtual onlyManager {\n        if (!_setEmergencyManager(_emergencyManager)) revert EmergencyManagerDidNotChange();\n    }\n\n    /// @dev Disables the aggregator for an asset if there is a big discrepancy between the aggregator and the\n    /// fallback provider. The only way to reenable the asset is by calling setupAsset or setAggregator again.\n    /// Can only be called by the emergencyManager.\n    /// @param _asset Asset for which to disable the aggregator\n    function emergencyDisable(address _asset) external virtual {\n        if (msg.sender != emergencyManager) {\n            revert OnlyEmergencyManager();\n        }\n\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\n\n        if (!success) {\n            revert AggregatorPriceNotAvailable();\n        }\n\n        uint256 fallbackPrice = _getFallbackPrice(_asset);\n\n        uint256 diff;\n\n        unchecked {\n            // It is ok to uncheck because of the initial fallbackPrice >= price check\n            diff = fallbackPrice >= price ? fallbackPrice - price : price - fallbackPrice;\n        }\n\n        if (diff > _MAX_PRICE_DIFF || (diff * 100 * EMERGENCY_PRECISION) / price < EMERGENCY_THRESHOLD) {\n            revert EmergencyThresholdNotReached();\n        }\n\n        // Disable main aggregator, fallback stays enabled\n        assetData[_asset].forceFallback = true;\n\n        emit AggregatorDisabled(_asset, assetData[_asset].aggregator);\n    }\n\n    function getFallbackProvider(address _asset) external view virtual returns (IPriceProvider) {\n        return assetData[_asset].fallbackProvider;\n    }\n\n    function _getAggregatorPrice(address _asset) internal view virtual returns (bool success, uint256 price) {\n        AssetData storage data = assetData[_asset];\n\n        uint256 heartbeat = data.heartbeat;\n        bool forceFallback = data.forceFallback;\n        AggregatorV3Interface aggregator = data.aggregator;\n\n        if (address(aggregator) == address(0)) revert AssetNotSupported();\n\n        (\n            /*uint80 roundID*/,\n            int256 aggregatorPrice,\n            /*uint256 startedAt*/,\n            uint256 timestamp,\n            /*uint80 answeredInRound*/\n        ) = aggregator.latestRoundData();\n\n        // If a valid price is returned and it was updated recently\n        if (!forceFallback && _isValidPrice(aggregatorPrice, timestamp, heartbeat)) {\n            uint256 result;\n\n            if (data.convertToQuote) {\n                // _toQuote performs decimal normalization internally\n                result = _toQuote(uint256(aggregatorPrice));\n            } else {\n                uint8 aggregatorDecimals = aggregator.decimals();\n                result = _normalizeWithDecimals(uint256(aggregatorPrice), aggregatorDecimals);\n            }\n\n            return (true, result);\n        }\n\n        return (false, 0);\n    }\n\n    function _getFallbackPrice(address _asset) internal view virtual returns (uint256) {\n        IPriceProvider fallbackProvider = assetData[_asset].fallbackProvider;\n\n        if (address(fallbackProvider) == address(0)) revert FallbackProviderNotSet();\n\n        return fallbackProvider.getPrice(_asset);\n    }\n\n    function _setEmergencyManager(address _emergencyManager) internal virtual returns (bool changed) {\n        if (_emergencyManager == emergencyManager) {\n            return false;\n        }\n\n        emergencyManager = _emergencyManager;\n\n        emit NewEmergencyManager(_emergencyManager);\n\n        return true;\n    }\n\n    function _setAggregator(\n        address _asset,\n        AggregatorV3Interface _aggregator,\n        bool _convertToQuote\n    ) internal virtual returns (bool changed) {\n        if (address(_aggregator) == address(0)) revert InvalidAggregator();\n\n        AssetData storage data = assetData[_asset];\n\n        if (data.aggregator == _aggregator && data.forceFallback == false) {\n            return false;\n        }\n\n        // There doesn't seem to be a way to verify if this is a \"valid\" aggregator (other than getting the price)\n        data.forceFallback = false;\n        data.aggregator = _aggregator;\n\n        (bool success,) = _getAggregatorPrice(_asset);\n\n        if (!success) revert AggregatorPriceNotAvailable();\n\n        if (_convertToQuote && _aggregator.decimals() != _QUOTE_AGGREGATOR_DECIMALS) {\n            revert InvalidAggregatorDecimals();\n        }\n\n        // We want to always update this\n        assetData[_asset].convertToQuote = _convertToQuote;\n\n        emit NewAggregator(_asset, _aggregator, _convertToQuote);\n\n        return true;\n    }\n\n    function _setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\n        internal\n        virtual\n        returns (bool changed)\n    {\n        if (_fallbackProvider == assetData[_asset].fallbackProvider) {\n            return false;\n        }\n\n        assetData[_asset].fallbackProvider = _fallbackProvider;\n\n        if (address(_fallbackProvider) != address(0)) {\n            if (\n                !priceProvidersRepository.isPriceProvider(_fallbackProvider) ||\n                !_fallbackProvider.assetSupported(_asset) ||\n                _fallbackProvider.quoteToken() != quoteToken\n            ) {\n                revert InvalidFallbackPriceProvider();\n            }\n\n            // Make sure it doesn't revert\n            _getFallbackPrice(_asset);\n        }\n\n        emit NewFallbackPriceProvider(_asset, _fallbackProvider);\n\n        return true;\n    }\n\n    function _setHeartbeat(address _asset, uint256 _heartbeat) internal virtual returns (bool changed) {\n        // Arbitrary limit, Chainlink's threshold is always less than a day\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\n\n        if (_heartbeat == assetData[_asset].heartbeat) {\n            return false;\n        }\n\n        assetData[_asset].heartbeat = _heartbeat;\n\n        emit NewHeartbeat(_asset, _heartbeat);\n\n        return true;\n    }\n\n    function _setQuoteAggregatorHeartbeat(uint256 _heartbeat) internal virtual returns (bool changed) {\n        // Arbitrary limit, Chainlink's threshold is always less than a day\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\n\n        if (_heartbeat == quoteAggregatorHeartbeat) {\n            return false;\n        }\n\n        quoteAggregatorHeartbeat = _heartbeat;\n\n        emit NewQuoteAggregatorHeartbeat(_heartbeat);\n\n        return true;\n    }\n\n    /// @dev Adjusts the given price to use the same decimals as the quote token.\n    /// @param _price Price to adjust decimals\n    /// @param _decimals Decimals considered in `_price`\n    function _normalizeWithDecimals(uint256 _price, uint8 _decimals) internal view virtual returns (uint256) {\n        // We want to return the price of 1 asset token, but with the decimals of the quote token\n        if (_QUOTE_TOKEN_DECIMALS == _decimals) {\n            return _price;\n        } else if (_QUOTE_TOKEN_DECIMALS < _decimals) {\n            return _price / 10 ** (_decimals - _QUOTE_TOKEN_DECIMALS);\n        } else {\n            return _price * 10 ** (_QUOTE_TOKEN_DECIMALS - _decimals);\n        }\n    }\n\n    /// @dev Converts a price returned by an aggregator to quote units\n    function _toQuote(uint256 _price) internal view virtual returns (uint256) {\n       (\n            /*uint80 roundID*/,\n            int256 aggregatorPrice,\n            /*uint256 startedAt*/,\n            uint256 timestamp,\n            /*uint80 answeredInRound*/\n        ) = _QUOTE_AGGREGATOR.latestRoundData();\n\n        // If an invalid price is returned\n        if (!_isValidPrice(aggregatorPrice, timestamp, quoteAggregatorHeartbeat)) {\n            revert AggregatorPriceNotAvailable();\n        }\n\n        // _price and aggregatorPrice should both have the same decimals so we normalize here\n        return _price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);\n    }\n\n    function _isValidPrice(int256 _price, uint256 _timestamp, uint256 _heartbeat) internal view virtual returns (bool) {\n        return _price > 0 && block.timestamp - _timestamp < _heartbeat;\n    }\n}\n"
    },
    "contracts/priceProviders/IERC20LikeV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6;\n\n/// @dev This is only meant to be used by price providers, which use a different\n/// Solidity version than the rest of the codebase. This way de won't need to include\n/// an additional version of OpenZeppelin's library.\ninterface IERC20LikeV2 {\n    function decimals() external view returns (uint8);\n    function balanceOf(address) external view returns(uint256);\n}\n"
    },
    "contracts/priceProviders/IndividualPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PriceProvider.sol\";\nimport \"./../lib/TokenHelper.sol\";\n\n/// @title IndividualPriceProvider\n/// @notice IndividualPriceProvider\n/// @custom:security-contact security@silo.finance\nabstract contract IndividualPriceProvider is PriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable ASSET;\n\n    error InvalidAssetAddress();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _asset,\n        string memory _symbol\n    ) PriceProvider(_priceProvidersRepository) {\n        if (keccak256(abi.encode(TokenHelper.symbol(_asset))) != keccak256(abi.encode(_symbol))) {\n            revert InvalidAssetAddress();\n        }\n\n        ASSET = _asset;\n    }\n\n    /// @notice Only ASSET token is supported, false otherwise.\n    /// @param _asset address of an asset\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        return _asset == ASSET;\n    }\n}\n"
    },
    "contracts/priceProviders/PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"../lib/Ping.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title PriceProvider\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\n/// and multiple assets.\nabstract contract PriceProvider is IPriceProvider {\n    /// @notice PriceProvidersRepository address\n    IPriceProvidersRepository public immutable priceProvidersRepository;\n\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\n    address public immutable override quoteToken;\n\n    modifier onlyManager() {\n        if (priceProvidersRepository.manager() != msg.sender) revert(\"OnlyManager\");\n        _;\n    }\n\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\n        if (\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \n        ) {\n            revert(\"InvalidPriceProviderRepository\");\n        }\n\n        priceProvidersRepository = _priceProvidersRepository;\n        quoteToken = _priceProvidersRepository.quoteToken();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function priceProviderPing() external pure override returns (bytes4) {\n        return this.priceProviderPing.selector;\n    }\n\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\n        if (_errMsg.length > 0) {\n            assembly { // solhint-disable-line no-inline-assembly\n                revert(add(32, _errMsg), mload(_errMsg))\n            }\n        }\n\n        revert(_customErr);\n    }\n}\n"
    },
    "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./../../lib/TokenHelper.sol\";\nimport \"../chainlinkV3/ChainlinkV3PriceProvider.sol\";\nimport \"./WSTETHPriceProvider.sol\";\nimport \"../../interfaces/IPriceProviderV2.sol\";\n\n\n/// @title WSTETHPriceByChainlinkArbitrum\n/// @notice WSTETHPriceByChainlinkArbitrum is the price provider for wstETH token for Arbitrum.\n/// Price calculations depends on the price of stETH and wstETH-stETH Exchange Rate.\n/// @custom:security-contact security@silo.finance\n/// @dev wstETH-stETH Exchange Rate rate reported by chainlink, means that for 1 wstETH we will get X of stETH\n/// with stETH/ETH aggregator: 1 stETH will give us N ETH\n/// wstETH price = X stETH price * N (STETH / ETH)\n/// to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);`\n/// we need to change `/` to `*`\ncontract WSTETHPriceByChainlinkArbitrum is ChainlinkV3PriceProvider, IPriceProviderV2 {\n    address public immutable WSTETH; // solhint-disable-line var-name-mixedcase\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _emergencyManager,\n        AggregatorV3Interface _stEthPriceAggregator,\n        uint256 _stEthPriceAggregatorHeartbeat,\n        address _wstETH\n    )\n        ChainlinkV3PriceProvider(\n            _priceProvidersRepository,\n            _emergencyManager,\n            _stEthPriceAggregator,\n            _stEthPriceAggregatorHeartbeat\n        )\n    {\n        WSTETH = _wstETH;\n    }\n\n    /// @inheritdoc ChainlinkV3PriceProvider\n    /// @notice this method overrides original to make sure `_convertToQuote` is always true, because we will be using\n    /// `toQuote` to calculate wstETH price.\n    function setupAsset(\n        address _asset,\n        AggregatorV3Interface _aggregator,\n        IPriceProvider _fallbackProvider,\n        uint256 _heartbeat,\n        bool _convertToQuote\n    ) external virtual override onlyManager {\n        _convertToQuote = true;\n\n        // This has to be done first so that `_setAggregator` works\n        _setHeartbeat(_asset, _heartbeat);\n\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\n\n        // We don't care if this doesn't change\n        _setFallbackPriceProvider(_asset, _fallbackProvider);\n    }\n\n    function offChainProvider() external pure returns (bool) {\n        return true;\n    }\n\n    function getFallbackProvider(address _asset)\n        external\n        view\n        override(ChainlinkV3PriceProvider, IPriceProviderV2)\n        returns (IPriceProvider)\n    {\n        return assetData[_asset].fallbackProvider;\n    }\n\n    /// @dev this provider is only for wstETH\n    function assetSupported(address _asset)\n        public\n        view\n        virtual\n        override(ChainlinkV3PriceProvider, IPriceProvider)\n        returns (bool)\n    {\n        return _asset == WSTETH;\n    }\n\n    /// @dev to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);`\n    /// we need to change `/` to `*` for this provider.\n    function _toQuote(uint256 _exchangeRate) internal view virtual override returns (uint256) {\n        (\n            /*uint80 roundID*/,\n            int256 stEthPrice,\n            /*uint256 startedAt*/,\n            uint256 timestamp,\n            /*uint80 answeredInRound*/\n        ) = _QUOTE_AGGREGATOR.latestRoundData();\n\n        // If an invalid price is returned\n        if (!_isValidPrice(stEthPrice, timestamp, quoteAggregatorHeartbeat)) {\n            revert AggregatorPriceNotAvailable();\n        }\n\n        // _price and aggregatorPrice should both have the same decimals so we normalize here\n        return _exchangeRate * uint256(stEthPrice) / 10 ** _QUOTE_TOKEN_DECIMALS;\n    }\n}\n"
    },
    "contracts/priceProviders/wstETH/WSTETHPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../IndividualPriceProvider.sol\";\nimport \"./../../lib/TokenHelper.sol\";\n\ninterface IStETHLike {\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\n}\n\n/// @title WSTETHPriceProvider\n/// @notice WSTETHPriceProvider is the price provider for wstETH token. Price calculations depends\n/// on the price of stETH. Price providers repository must be ready to provide the stETH price.\n/// @custom:security-contact security@silo.finance\ncontract WSTETHPriceProvider is IndividualPriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    IStETHLike public immutable STETH;\n\n    error AssetNotSupported();\n    error InvalidSTETHAddress();\n    error InvalidWSTETHAddress();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        IStETHLike _stETH,\n        address _wstETH\n    ) IndividualPriceProvider(_priceProvidersRepository, _wstETH, \"wstETH\") {\n        if (keccak256(abi.encode(TokenHelper.symbol(address(_stETH)))) != keccak256(abi.encode(\"stETH\"))) {\n            revert InvalidSTETHAddress();\n        }\n\n        STETH = _stETH;\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256 price) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        // solhint-disable-next-line var-name-mixedcase\n        uint256 ETHPerStETH = priceProvidersRepository.getPrice(address(STETH));\n\n        uint256 stETHPerWstETH = STETH.getPooledEthByShares(1 ether);\n\n        // Amount of ETH per stETH * Amount of stETH per wstETH = Amount of ETH per wstETH\n        return ETHPerStETH * stETHPerWstETH / 1e18;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}