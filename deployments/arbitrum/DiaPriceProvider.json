{
  "address": "0x2E4C07a88Ab9CBA800f3D5377E21bBe45405f247",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "_priceProvidersRepository",
          "type": "address"
        },
        {
          "internalType": "contract IDIAOracleV2",
          "name": "_diaOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableAsset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotSetEthKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackPriceProviderNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KeyDoesNotMatchSymbol",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationProviderAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationProviderAssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationProviderNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingETHPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingPriceOrSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OldPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyUSDPriceAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceCanNotBeFoundForProvidedKey",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "AssetSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPriceProvider",
          "name": "liquidationProvider",
          "type": "address"
        }
      ],
      "name": "LiquidationProvider",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DIA_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DIA_ORACLEV2",
      "outputs": [
        {
          "internalType": "contract IDIAOracleV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_USD_KEY",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXPECTED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_ASSET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFallbackPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFallbackProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "getPriceForKey",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "assetPriceInUsd",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "priceUpToDate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keys",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationProviders",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_assetPriceInUsd",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_ethPriceInUsd",
          "type": "uint128"
        }
      ],
      "name": "normalizePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetPriceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offChainProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProviderPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvidersRepository",
      "outputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "removeLiquidationProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_liquidationProvider",
          "type": "address"
        }
      ],
      "name": "setLiquidationProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_liquidationProvider",
          "type": "address"
        }
      ],
      "name": "setupAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "validateKey",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "validateSymbol",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8a1c71dbad558ebe8bda6db8d1e2cc0cfbb4cd779c7a0f9adeb7f43b669e1d8",
  "receipt": {
    "to": null,
    "from": "0x9c3832dB9F3c1375aA3542C55F6EE9B54F38D944",
    "contractAddress": "0x2E4C07a88Ab9CBA800f3D5377E21bBe45405f247",
    "transactionIndex": 2,
    "gasUsed": "11015102",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000000002000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000100000000000000000000000000000000",
    "blockHash": "0xa891b2e9e6f0ba29b61d52c8c523f39b5b9a55e3fdde243628c3500144a849c2",
    "transactionHash": "0xb8a1c71dbad558ebe8bda6db8d1e2cc0cfbb4cd779c7a0f9adeb7f43b669e1d8",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 79291581,
        "transactionHash": "0xb8a1c71dbad558ebe8bda6db8d1e2cc0cfbb4cd779c7a0f9adeb7f43b669e1d8",
        "address": "0x2E4C07a88Ab9CBA800f3D5377E21bBe45405f247",
        "topics": [
          "0xc2f6f093b57cdf216d94c3a0f96dbd1a3338ba2e2bfe0a42aac008c2f743fcaa",
          "0x000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000074554482f55534400000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xa891b2e9e6f0ba29b61d52c8c523f39b5b9a55e3fdde243628c3500144a849c2"
      }
    ],
    "blockNumber": 79291581,
    "cumulativeGasUsed": "11293580",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5bf4E67127263D951FC515E23B323d0e3b4485fd",
    "0xe871E9BD0ccc595A626f5e1657c216cE457CEa43",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8"
  ],
  "numDeployments": 1,
  "solcInputHash": "c2bec9fbf107952d7582f2caa1199ae6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"_priceProvidersRepository\",\"type\":\"address\"},{\"internalType\":\"contract IDIAOracleV2\",\"name\":\"_diaOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotSetEthKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackPriceProviderNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KeyDoesNotMatchSymbol\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationProviderAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationProviderAssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationProviderNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingETHPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingPriceOrSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OldPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyUSDPriceAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCanNotBeFoundForProvidedKey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"AssetSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPriceProvider\",\"name\":\"liquidationProvider\",\"type\":\"address\"}],\"name\":\"LiquidationProvider\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIA_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIA_ORACLEV2\",\"outputs\":[{\"internalType\":\"contract IDIAOracleV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPECTED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_ASSET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"assetSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFallbackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFallbackProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getPriceForKey\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"assetPriceInUsd\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"priceUpToDate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationProviders\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_assetPriceInUsd\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_ethPriceInUsd\",\"type\":\"uint128\"}],\"name\":\"normalizePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetPriceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProviderPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvidersRepository\",\"outputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeLiquidationProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_liquidationProvider\",\"type\":\"address\"}],\"name\":\"setLiquidationProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_liquidationProvider\",\"type\":\"address\"}],\"name\":\"setupAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"validateKey\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"validateSymbol\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetSupported(address)\":{\"details\":\"Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away. Some providers implementations need time to \\\"build\\\" buffer for TWAP price, so price may not be available yet but this method will return true.\",\"params\":{\"_asset\":\"asset in question\"},\"returns\":{\"_0\":\"TRUE if asset has been setup, otherwise false\"}},\"constructor\":{\"params\":{\"_diaOracle\":\"IDIAOracleV2 address of DIA oracle contract\",\"_priceProvidersRepository\":\"IPriceProvidersRepository\",\"_stableAsset\":\"address Address of asset that we will be using as reference for USD it has no affect on any price, this is only for be able to getPrice(_usdAsset) using `ETH_USD_KEY` key\"}},\"getFallbackProvider(address)\":{\"details\":\"for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper we have this method to return on-chain provider that can be useful for liquidation\"},\"getPrice(address)\":{\"params\":{\"_asset\":\"address of an asset for which to read price\"},\"returns\":{\"_0\":\"of asses with 18 decimals, throws when pool is not ready yet to provide price\"}},\"getPriceForKey(string)\":{\"params\":{\"_key\":\"string under this key asset price will be available in DIA oracle\"},\"returns\":{\"assetPriceInUsd\":\"uint128 asset price\",\"priceUpToDate\":\"bool TRUE if price is up to date (acceptable), FALSE otherwise\"}},\"normalizePrice(uint128,uint128)\":{\"details\":\"_assetPriceInUsd uint128 asset price returned by DIA oracle (8 decimals)_ethPriceInUsd uint128 ETH price returned by DIA oracle (8 decimals)\",\"returns\":{\"assetPriceInEth\":\"uint256 18 decimals price in ETH\"}},\"offChainProvider()\":{\"details\":\"this is info method for LiquidationHelper\",\"returns\":{\"_0\":\"bool TRUE if provider is off-chain, means it is not a dex\"}},\"priceProviderPing()\":{\"details\":\"this can save us from simple human errors, in case we use invalid address but this should NOT be treated as security check\",\"returns\":{\"_0\":\"always true\"}},\"setupAsset(address,string,address)\":{\"details\":\"Asset setup. Can only be called by the manager. Explanation from DIA team:     Updates will be done every time there is a deviation >1% btw the last onchain update and the current price.     We have a 24hrs default update though, so assuming the price remains completely flat you would still get     an update every 24hrs.\",\"params\":{\"_asset\":\"address Asset to setup\",\"_key\":\"string under this key asset price will be available in DIA oracle\",\"_liquidationProvider\":\"IPriceProvider on-chain provider that can help with liquidation it will not be use for providing price, it is only for liquidation process\"}},\"validateKey(string)\":{\"details\":\"checks if key has expected format. Atm provider is accepting only prices in USD, so key must end with \\\"/USD\\\". If key is invalid function will throw.\",\"params\":{\"_key\":\"string DIA key for asset\"}},\"validateSymbol(address,string)\":{\"details\":\"checks if key match token symbol. Reverts if does not match.\",\"params\":{\"_asset\":\"address Asset to setup\",\"_key\":\"string under this key asset price will be available in DIA oracle\"}}},\"stateVariables\":{\"DIA_DECIMALS\":{\"details\":\"decimals in DIA oracle\"},\"DIA_ORACLEV2\":{\"details\":\"Oracle deployed for Silo by DIA, all our prices will be submitted to this contract\"},\"ETH_USD_KEY\":{\"details\":\"price provider needs to return prices in ETH, but assets prices provided by DIA are in USD Under ETH_USD_KEY we will find ETH price in USD so we can convert price in USD into price in ETH\"},\"EXPECTED_DECIMALS\":{\"details\":\"decimals in Silo protocol\"},\"USD_ASSET\":{\"details\":\"Address of asset that we will be using as reference for USD\"},\"keys\":{\"details\":\"we accessing prices for assets by keys eg. \\\"Jones/USD\\\"\"},\"liquidationProviders\":{\"details\":\"asset => fallbackProvider\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(address)\":{\"notice\":\"Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset. It unifies all tokens decimal to 18, examples: - if asses == quote it returns 1e18 - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\"},\"priceProviderPing()\":{\"notice\":\"Helper method that allows easily detects, if contract is PriceProvider\"},\"priceProvidersRepository()\":{\"notice\":\"PriceProvidersRepository address\"},\"quoteToken()\":{\"notice\":\"Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/priceProviders/dia/DiaPriceProvider.sol\":\"DiaPriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/external/dia/IDIAOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/// @dev https://docs.diadata.org/documentation/oracle-documentation/access-the-oracle\\ninterface IDIAOracleV2 {\\n    function getValue(string memory key) external view returns (uint128 latestPrice, uint128 timestampOfLatestPrice);\\n}\\n\",\"keccak256\":\"0x39e8c9d381c2ceb72da50a211a22600c4a20af9ae39bace435fa27c10bc307a1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/// @title Common interface V2 for Silo Price Providers\\ninterface IPriceProviderV2 is IPriceProvider {\\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\\n    /// we have this method to return on-chain provider that can be useful for liquidation\\n    function getFallbackProvider(address _asset) external view returns (IPriceProvider);\\n\\n    /// @dev this is info method for LiquidationHelper\\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\\n    function offChainProvider() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xd7a62f4ba82d77d8018a3a15c6a61c0de511e70a75cd55d1bbe6f965c1994b0d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/IERC20LikeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6;\\n\\n/// @dev This is only meant to be used by price providers, which use a different\\n/// Solidity version than the rest of the codebase. This way de won't need to include\\n/// an additional version of OpenZeppelin's library.\\ninterface IERC20LikeV2 {\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x55746da5754f7a613f86beaf934509a76f6d54372f6799defae4a5a3ab94afe2\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"../lib/Ping.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../interfaces/IPriceProvidersRepository.sol\\\";\\n\\n/// @title PriceProvider\\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\\n/// and multiple assets.\\nabstract contract PriceProvider is IPriceProvider {\\n    /// @notice PriceProvidersRepository address\\n    IPriceProvidersRepository public immutable priceProvidersRepository;\\n\\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\\n    address public immutable override quoteToken;\\n\\n    modifier onlyManager() {\\n        if (priceProvidersRepository.manager() != msg.sender) revert(\\\"OnlyManager\\\");\\n        _;\\n    }\\n\\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\\n        if (\\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \\n        ) {\\n            revert(\\\"InvalidPriceProviderRepository\\\");\\n        }\\n\\n        priceProvidersRepository = _priceProvidersRepository;\\n        quoteToken = _priceProvidersRepository.quoteToken();\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function priceProviderPing() external pure override returns (bytes4) {\\n        return this.priceProviderPing.selector;\\n    }\\n\\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\\n        if (_errMsg.length > 0) {\\n            assembly { // solhint-disable-line no-inline-assembly\\n                revert(add(32, _errMsg), mload(_errMsg))\\n            }\\n        }\\n\\n        revert(_customErr);\\n    }\\n}\\n\",\"keccak256\":\"0xd5d1739891a5639048bdf0c7c72838e848c3f381b56f978780d4d866535f30a5\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/dia/DiaPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../PriceProvider.sol\\\";\\nimport \\\"../IERC20LikeV2.sol\\\";\\nimport \\\"../../external/dia/IDIAOracleV2.sol\\\";\\nimport \\\"../../interfaces/IPriceProviderV2.sol\\\";\\n\\ncontract DiaPriceProvider is IPriceProviderV2, PriceProvider {\\n    /// @dev price provider needs to return prices in ETH, but assets prices provided by DIA are in USD\\n    /// Under ETH_USD_KEY we will find ETH price in USD so we can convert price in USD into price in ETH\\n    string public constant ETH_USD_KEY = \\\"ETH/USD\\\";\\n\\n    /// @dev decimals in DIA oracle\\n    uint256 public constant DIA_DECIMALS = 1e8;\\n\\n    /// @dev decimals in Silo protocol\\n    uint256 public immutable EXPECTED_DECIMALS; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Oracle deployed for Silo by DIA, all our prices will be submitted to this contract\\n    IDIAOracleV2 public immutable DIA_ORACLEV2; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Address of asset that we will be using as reference for USD\\n    address public immutable USD_ASSET; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev we accessing prices for assets by keys eg. \\\"Jones/USD\\\"\\n    mapping (address => string) public keys;\\n\\n    /// @dev asset => fallbackProvider\\n    mapping(address => IPriceProvider) public liquidationProviders;\\n\\n    event AssetSetup(address indexed asset, string key);\\n\\n    event LiquidationProvider(address indexed asset, IPriceProvider indexed liquidationProvider);\\n\\n    error MissingETHPrice();\\n    error InvalidKey();\\n    error CanNotSetEthKey();\\n    error OnlyUSDPriceAccepted();\\n    error PriceCanNotBeFoundForProvidedKey();\\n    error OldPrice();\\n    error MissingPriceOrSetup();\\n    error LiquidationProviderAlreadySet();\\n    error AssetNotSupported();\\n    error LiquidationProviderAssetNotSupported();\\n    error LiquidationProviderNotExist();\\n    error KeyDoesNotMatchSymbol();\\n    error FallbackPriceProviderNotSet();\\n\\n    /// @param _priceProvidersRepository IPriceProvidersRepository\\n    /// @param _diaOracle IDIAOracleV2 address of DIA oracle contract\\n    /// @param _stableAsset address Address of asset that we will be using as reference for USD\\n    /// it has no affect on any price, this is only for be able to getPrice(_usdAsset) using `ETH_USD_KEY` key\\n    constructor(\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        IDIAOracleV2 _diaOracle,\\n        address _stableAsset\\n    )\\n        PriceProvider(_priceProvidersRepository)\\n    {\\n        EXPECTED_DECIMALS = 10 ** IERC20LikeV2(_priceProvidersRepository.quoteToken()).decimals();\\n        USD_ASSET = _stableAsset;\\n        DIA_ORACLEV2 = _diaOracle;\\n\\n        bool allowEthUsdKey = true;\\n        _setupAsset(_stableAsset, ETH_USD_KEY, IPriceProvider(address(0)), allowEthUsdKey);\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function assetSupported(address _asset) public view virtual override returns (bool) {\\n        return bytes(keys[_asset]).length != 0;\\n    }\\n\\n    /// @param _key string under this key asset price will be available in DIA oracle\\n    /// @return assetPriceInUsd uint128 asset price\\n    /// @return priceUpToDate bool TRUE if price is up to date (acceptable), FALSE otherwise\\n    function getPriceForKey(string memory _key)\\n        public\\n        view\\n        virtual\\n        returns (uint128 assetPriceInUsd, bool priceUpToDate)\\n    {\\n        uint128 priceTimestamp;\\n        (assetPriceInUsd, priceTimestamp) = DIA_ORACLEV2.getValue(_key);\\n\\n        // price must be updated at least once every 24h, otherwise something is wrong\\n        uint256 oldestAcceptedPriceTimestamp;\\n        // block.timestamp is more than 1 day, so we can not underflow\\n        unchecked { oldestAcceptedPriceTimestamp = block.timestamp - 1 days; }\\n\\n        // we not checking assetPriceInUsd != 0, because this is checked on setup, so it will be always some value here\\n        priceUpToDate = priceTimestamp > oldestAcceptedPriceTimestamp;\\n    }\\n\\n    function getFallbackPrice(address _asset) public view virtual returns (uint256) {\\n        IPriceProvider fallbackProvider = liquidationProviders[_asset];\\n\\n        if (address(fallbackProvider) != address(0)) {\\n            return fallbackProvider.getPrice(_asset);\\n        }\\n\\n        revert FallbackPriceProviderNotSet();\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPrice(address _asset) public view virtual override returns (uint256) {\\n        string memory key = keys[_asset];\\n\\n        if (bytes(key).length == 0) revert AssetNotSupported();\\n\\n        (uint128 assetPriceInUsd, bool priceUpToDate) = getPriceForKey(key);\\n\\n        if (!priceUpToDate) {\\n            return getFallbackPrice(_asset);\\n        }\\n\\n        if (_asset == USD_ASSET) {\\n            unchecked {\\n                // multiplication of decimals is safe, this are small values, division is safe as well\\n                return DIA_DECIMALS * EXPECTED_DECIMALS / assetPriceInUsd;\\n            }\\n        }\\n\\n        (uint128 ethPriceInUsd, bool ethPriceUpToDate) = getPriceForKey(ETH_USD_KEY);\\n\\n        if (!ethPriceUpToDate) {\\n            return getFallbackPrice(_asset);\\n        }\\n\\n        return normalizePrice(assetPriceInUsd, ethPriceInUsd);\\n    }\\n\\n    /// @dev Asset setup. Can only be called by the manager.\\n    /// Explanation from DIA team:\\n    ///     Updates will be done every time there is a deviation >1% btw the last onchain update and the current price.\\n    ///     We have a 24hrs default update though, so assuming the price remains completely flat you would still get\\n    ///     an update every 24hrs.\\n    /// @param _asset address Asset to setup\\n    /// @param _key string under this key asset price will be available in DIA oracle\\n    /// @param _liquidationProvider IPriceProvider on-chain provider that can help with liquidation\\n    /// it will not be use for providing price, it is only for liquidation process\\n    function setupAsset(\\n        address _asset,\\n        string calldata _key,\\n        IPriceProvider _liquidationProvider\\n    ) external virtual onlyManager {\\n        validateSymbol(_asset, _key);\\n\\n        bool allowEthUsdKey;\\n        _setupAsset(_asset, _key, _liquidationProvider, allowEthUsdKey);\\n    }\\n    \\n    function setLiquidationProvider(address _asset, IPriceProvider _liquidationProvider) public virtual onlyManager {\\n        _setLiquidationProvider(_asset, _liquidationProvider);\\n    }\\n\\n    function removeLiquidationProvider(address _asset) public virtual onlyManager {\\n        if (address(0) == address(liquidationProviders[_asset])) revert LiquidationProviderNotExist();\\n\\n        delete liquidationProviders[_asset];\\n\\n        emit LiquidationProvider(_asset, IPriceProvider(address(0)));\\n    }\\n\\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\\n    /// we have this method to return on-chain provider that can be useful for liquidation\\n    function getFallbackProvider(address _asset) external view virtual returns (IPriceProvider) {\\n        return liquidationProviders[_asset];\\n    }\\n\\n    /// @dev _assetPriceInUsd uint128 asset price returned by DIA oracle (8 decimals)\\n    /// @dev _ethPriceInUsd uint128 ETH price returned by DIA oracle (8 decimals)\\n    /// @return assetPriceInEth uint256 18 decimals price in ETH\\n    function normalizePrice(uint128 _assetPriceInUsd, uint128 _ethPriceInUsd)\\n        public\\n        view\\n        virtual\\n        returns (uint256 assetPriceInEth)\\n    {\\n        uint256 withDecimals = _assetPriceInUsd * EXPECTED_DECIMALS;\\n\\n        unchecked {\\n            // div is safe\\n            return withDecimals / _ethPriceInUsd;\\n        }\\n    }\\n\\n    /// @dev checks if key has expected format.\\n    /// Atm provider is accepting only prices in USD, so key must end with \\\"/USD\\\".\\n    /// If key is invalid function will throw.\\n    /// @param _key string DIA key for asset\\n    function validateKey(string memory _key) public pure virtual {\\n        _validateKey(_key, false);\\n    }\\n\\n    /// @dev checks if key match token symbol. Reverts if does not match.\\n    /// @param _asset address Asset to setup\\n    /// @param _key string under this key asset price will be available in DIA oracle\\n    function validateSymbol(address _asset, string memory _key) public view virtual {\\n        bytes memory symbol = bytes(IERC20Metadata(_asset).symbol());\\n\\n        unchecked {\\n            // `+4` for `/USD`, we will never have key with length that will overflow\\n            if (symbol.length + 4 != bytes(_key).length) revert KeyDoesNotMatchSymbol();\\n\\n            // we will never have key with length that will overflow, so i++ is safe\\n            for (uint256 i; i < symbol.length; i++) {\\n                if (symbol[i] != bytes(_key)[i]) revert KeyDoesNotMatchSymbol();\\n            }\\n        }\\n    }\\n\\n    /// @dev this is info method for LiquidationHelper\\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\\n    function offChainProvider() external pure virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @param _allowEthUsd bool use TRUE only when setting up `ETH_USD_KEY` key, FALSE in all other cases\\n    // solhint-disable-next-line code-complexity\\n    function _validateKey(string memory _key, bool _allowEthUsd) internal pure virtual {\\n        if (!_allowEthUsd) {\\n            if (keccak256(abi.encodePacked(_key)) == keccak256(abi.encodePacked(ETH_USD_KEY))) revert CanNotSetEthKey();\\n        }\\n\\n        uint256 keyLength = bytes(_key).length;\\n\\n        if (keyLength < 5) revert InvalidKey();\\n\\n        unchecked {\\n            // keyLength is at least 5, based on above check, so it is safe to uncheck all below subtractions\\n            if (bytes(_key)[keyLength - 4] != \\\"/\\\") revert OnlyUSDPriceAccepted();\\n            if (bytes(_key)[keyLength - 3] != \\\"U\\\") revert OnlyUSDPriceAccepted();\\n            if (bytes(_key)[keyLength - 2] != \\\"S\\\") revert OnlyUSDPriceAccepted();\\n            if (bytes(_key)[keyLength - 1] != \\\"D\\\") revert OnlyUSDPriceAccepted();\\n        }\\n    }\\n\\n    /// @param _asset Asset to setup\\n    /// @param _key string under this key asset price will be available in DIA oracle\\n    /// @param _liquidationProvider IPriceProvider on-chain provider that can help with liquidation\\n    /// it will not be use for providing price, it is only for liquidation process\\n    /// @param _allowEthUsd bool use TRUE only when setting up `ETH_USD_KEY` key, FALSE in all other cases\\n    function _setupAsset(\\n        address _asset,\\n        string memory _key,\\n        IPriceProvider _liquidationProvider,\\n        bool _allowEthUsd\\n    ) internal virtual {\\n        _validateKey(_key, _allowEthUsd);\\n\\n        (uint128 latestPrice, bool priceUpToDate) = getPriceForKey(_key);\\n\\n        if (latestPrice == 0) revert PriceCanNotBeFoundForProvidedKey();\\n        if (!priceUpToDate) revert OldPrice();\\n\\n        keys[_asset] = _key;\\n\\n        emit AssetSetup(_asset, _key);\\n\\n        if (address(_liquidationProvider) != address(0)) {\\n            _setLiquidationProvider(_asset, _liquidationProvider);\\n        }\\n    }\\n\\n    function _setLiquidationProvider(address _asset, IPriceProvider _liquidationProvider) internal virtual {\\n        if (!assetSupported(_asset)) revert AssetNotSupported();\\n        if (_liquidationProvider == liquidationProviders[_asset]) revert LiquidationProviderAlreadySet();\\n        if (!_liquidationProvider.assetSupported(_asset)) revert LiquidationProviderAssetNotSupported();\\n\\n        liquidationProviders[_asset] = _liquidationProvider;\\n\\n        emit LiquidationProvider(_asset, _liquidationProvider);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9c67631b800bde1eba7caf28a5d8c3eaef4a43dc415acbd276d4ec707c11b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002325380380620023258339810160408190526200003591620008a0565b826200005a816001600160a01b031663eec3e6a76200025e60201b62000c8b1760201c565b620000ab5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964507269636550726f76696465725265706f7369746f72790000604482015260640160405180910390fd5b6001600160a01b038116608081905260408051630217a4b760e41b8152905163217a4b70916004808201926020929091908290030181865afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c9190620008f4565b6001600160a01b031660a0816001600160a01b03168152505050826001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019b9190620008f4565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ff91906200091b565b6200020c90600a62000a53565b60c0526001600160a01b0380821661010052821660e0526040805180820190915260078152661155120bd554d160ca1b602082015260019062000254908390600084620002ea565b5050505062000be1565b60006001600160a01b03831615801590620002e1575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cc919062000a64565b60e083901b6001600160e01b03199081169116145b90505b92915050565b620002f68382620003e3565b6000806200030485620005d3565b91509150816001600160801b03166000036200033357604051631925ce4160e01b815260040160405180910390fd5b80620003525760405163045b830b60e31b815260040160405180910390fd5b6001600160a01b03861660009081526020818152604090912086516200037b92880190620007e1565b50856001600160a01b03167fc2f6f093b57cdf216d94c3a0f96dbd1a3338ba2e2bfe0a42aac008c2f743fcaa86604051620003b7919062000ac3565b60405180910390a26001600160a01b03841615620003db57620003db86856200066b565b505050505050565b806200047957604051806040016040528060078152602001661155120bd554d160ca1b8152506040516020016200041b919062000af8565b604051602081830303815290604052805190602001208260405160200162000444919062000af8565b6040516020818303038152906040528051906020012003620004795760405163176a5c0160e11b815260040160405180910390fd5b815160058110156200049e57604051630eda9c3d60e31b815260040160405180910390fd5b826004820381518110620004b657620004b662000b16565b6020910101516001600160f81b031916602f60f81b14620004ea576040516315a489af60e01b815260040160405180910390fd5b82600382038151811062000502576200050262000b16565b6020910101516001600160f81b031916605560f81b1462000536576040516315a489af60e01b815260040160405180910390fd5b8260028203815181106200054e576200054e62000b16565b6020910101516001600160f81b031916605360f81b1462000582576040516315a489af60e01b815260040160405180910390fd5b8260018203815181106200059a576200059a62000b16565b6020910101516001600160f81b031916601160fa1b14620005ce576040516315a489af60e01b815260040160405180910390fd5b505050565b600080600060e0516001600160a01b031663960384a0856040518263ffffffff1660e01b815260040162000608919062000ac3565b6040805180830381865afa15801562000625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200064b919062000b49565b90956201517f1942016001600160801b0390921691909111945092505050565b6200067682620007b3565b620006945760405163981a2a2b60e01b815260040160405180910390fd5b6001600160a01b03808316600090815260016020526040902054811690821603620006d2576040516358acd00960e01b815260040160405180910390fd5b60405163598fd92b60e11b81526001600160a01b03838116600483015282169063b31fb25690602401602060405180830381865afa15801562000719573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200073f919062000b81565b6200075c57604051620c174d60e61b815260040160405180910390fd5b6001600160a01b0382811660008181526001602052604080822080546001600160a01b0319169486169485179055517fa233da8ae896e8c05f64727b1e5a28a1498c6c98155dc48049dcfab977d349d69190a35050565b6001600160a01b03811660009081526020819052604081208054620007d89062000ba5565b15159392505050565b828054620007ef9062000ba5565b90600052602060002090601f0160209004810192826200081357600085556200085e565b82601f106200082e57805160ff19168380011785556200085e565b828001600101855582156200085e579182015b828111156200085e57825182559160200191906001019062000841565b506200086c92915062000870565b5090565b5b808211156200086c576000815560010162000871565b6001600160a01b03811681146200089d57600080fd5b50565b600080600060608486031215620008b657600080fd5b8351620008c38162000887565b6020850151909350620008d68162000887565b6040850151909250620008e98162000887565b809150509250925092565b6000602082840312156200090757600080fd5b8151620009148162000887565b9392505050565b6000602082840312156200092e57600080fd5b815160ff811681146200091457600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620009975781600019048211156200097b576200097b62000940565b808516156200098957918102915b93841c93908002906200095b565b509250929050565b600082620009b057506001620002e4565b81620009bf57506000620002e4565b8160018114620009d85760028114620009e35762000a03565b6001915050620002e4565b60ff841115620009f757620009f762000940565b50506001821b620002e4565b5060208310610133831016604e8410600b841016171562000a28575081810a620002e4565b62000a34838362000956565b806000190482111562000a4b5762000a4b62000940565b029392505050565b6000620002e160ff8416836200099f565b60006020828403121562000a7757600080fd5b81516001600160e01b0319811681146200091457600080fd5b60005b8381101562000aad57818101518382015260200162000a93565b8381111562000abd576000848401525b50505050565b602081526000825180602084015262000ae481604085016020870162000a90565b601f01601f19169190910160400192915050565b6000825162000b0c81846020870162000a90565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b80516001600160801b038116811462000b4457600080fd5b919050565b6000806040838503121562000b5d57600080fd5b62000b688362000b2c565b915062000b786020840162000b2c565b90509250929050565b60006020828403121562000b9457600080fd5b815180151581146200091457600080fd5b600181811c9082168062000bba57607f821691505b60208210810362000bdb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516116ce62000c57600039600081816102e5015261076001526000818161020d0152610b21015260008181610161015281816107a301526109ac015260006101ce015260008181610298015281816103f20152818161053c0152610bd701526116ce6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637939fdd7116100b8578063d6d9cb3f1161007c578063d6d9cb3f1461033c578063db09c3fd1461034f578063dd773a111461037b578063dea5c85a1461038e578063f514cd59146103a1578063fa70b3e7146103d357600080fd5b80637939fdd7146102cd578063a9552621146102e0578063b31fb25614610307578063ca0a8f221461032a578063d40c754f1461033157600080fd5b80632c2351581161010a5780632c2351581461022f578063335208971461024257806341976e091461026b57806357e0c50f1461027e5780635ddf2be314610293578063670d14b2146102ba57600080fd5b80631316386714610147578063140496981461015c5780631c8beab214610196578063217a4b70146101c957806323d8be0614610208575b600080fd5b61015a6101553660046111c3565b6103e6565b005b6101837f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101bc604051806040016040528060078152602001661155120bd554d160ca1b81525081565b60405161018d919061120c565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61015a61023d36600461123f565b610530565b6101f06102503660046111c3565b6001602052600090815260409020546001600160a01b031681565b6101836102793660046111c3565b61066f565b6040516357e0c50f60e01b815260200161018d565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6101bc6102c83660046111c3565b610831565b6101836102db3660046111c3565b6108cb565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61031a6103153660046111c3565b610978565b604051901515815260200161018d565b600161031a565b6101836305f5e10081565b61018361034a3660046112ec565b6109a4565b6101f061035d3660046111c3565b6001600160a01b039081166000908152600160205260409020541690565b61015a6103893660046113ea565b6109fd565b61015a61039c36600461143a565b610b0c565b6103b46103af36600461143a565b610b1a565b604080516001600160801b03909316835290151560208301520161018d565b61015a6103e1366004611477565b610bcb565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047291906114a5565b6001600160a01b0316146104a15760405162461bcd60e51b8152600401610498906114c2565b60405180910390fd5b6001600160a01b0380821660009081526001602052604081205490911690036104dd57604051636689787f60e01b815260040160405180910390fd5b6001600160a01b03811660008181526001602052604080822080546001600160a01b0319169055519091907fa233da8ae896e8c05f64727b1e5a28a1498c6c98155dc48049dcfab977d349d6908390a350565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906114a5565b6001600160a01b0316146105e25760405162461bcd60e51b8152600401610498906114c2565b6106228484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109fd92505050565b60006106688585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250869150610d109050565b5050505050565b6001600160a01b03811660009081526020819052604081208054829190610695906114e7565b80601f01602080910402602001604051908101604052809291908181526020018280546106c1906114e7565b801561070e5780601f106106e35761010080835404028352916020019161070e565b820191906000526020600020905b8154815290600101906020018083116106f157829003601f168201915b5050505050905080516000036107375760405163981a2a2b60e01b815260040160405180910390fd5b60008061074383610b1a565b915091508061075e57610755856108cb565b95945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316036107df57816001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006305f5e10002816107d5576107d5611521565b0495945050505050565b60008061080a604051806040016040528060078152602001661155120bd554d160ca1b815250610b1a565b91509150806108275761081c876108cb565b979650505050505050565b61081c84836109a4565b6000602081905290815260409020805461084a906114e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610876906114e7565b80156108c35780601f10610898576101008083540402835291602001916108c3565b820191906000526020600020905b8154815290600101906020018083116108a657829003601f168201915b505050505081565b6001600160a01b03808216600090815260016020526040812054909116801561095f576040516341976e0960e01b81526001600160a01b0384811660048301528216906341976e0990602401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611537565b9392505050565b60405163dc3810cb60e01b815260040160405180910390fd5b6001600160a01b0381166000908152602081905260408120805461099b906114e7565b15159392505050565b6000806109da7f00000000000000000000000000000000000000000000000000000000000000006001600160801b038616611550565b9050826001600160801b031681816109f4576109f4611521565b04949350505050565b6000826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a65919081019061157d565b90508151815160040114610a8c57604051632cb3a3c760e11b815260040160405180910390fd5b60005b8151811015610b0657828181518110610aaa57610aaa6115eb565b602001015160f81c60f81b6001600160f81b031916828281518110610ad157610ad16115eb565b01602001516001600160f81b03191614610afe57604051632cb3a3c760e11b815260040160405180910390fd5b600101610a8f565b50505050565b610b17816000610dfc565b50565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663960384a0856040518263ffffffff1660e01b8152600401610b6b919061120c565b6040805180830381865afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611601565b90956201517f1942016001600160801b0390921691909111945092505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5791906114a5565b6001600160a01b031614610c7d5760405162461bcd60e51b8152600401610498906114c2565b610c878282610fd5565b5050565b60006001600160a01b03831615801590610958575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf59190611630565b60e083901b6001600160e01b03199081169116149392505050565b610d1a8382610dfc565b600080610d2685610b1a565b91509150816001600160801b0316600003610d5457604051631925ce4160e01b815260040160405180910390fd5b80610d725760405163045b830b60e31b815260040160405180910390fd5b6001600160a01b0386166000908152602081815260409091208651610d9992880190611115565b50856001600160a01b03167fc2f6f093b57cdf216d94c3a0f96dbd1a3338ba2e2bfe0a42aac008c2f743fcaa86604051610dd3919061120c565b60405180910390a26001600160a01b03841615610df457610df48685610fd5565b505050505050565b80610e8c57604051806040016040528060078152602001661155120bd554d160ca1b815250604051602001610e31919061165a565b6040516020818303038152906040528051906020012082604051602001610e58919061165a565b6040516020818303038152906040528051906020012003610e8c5760405163176a5c0160e11b815260040160405180910390fd5b81516005811015610eb057604051630eda9c3d60e31b815260040160405180910390fd5b826004820381518110610ec557610ec56115eb565b6020910101516001600160f81b031916602f60f81b14610ef8576040516315a489af60e01b815260040160405180910390fd5b826003820381518110610f0d57610f0d6115eb565b6020910101516001600160f81b031916605560f81b14610f40576040516315a489af60e01b815260040160405180910390fd5b826002820381518110610f5557610f556115eb565b6020910101516001600160f81b031916605360f81b14610f88576040516315a489af60e01b815260040160405180910390fd5b826001820381518110610f9d57610f9d6115eb565b6020910101516001600160f81b031916601160fa1b14610fd0576040516315a489af60e01b815260040160405180910390fd5b505050565b610fde82610978565b610ffb5760405163981a2a2b60e01b815260040160405180910390fd5b6001600160a01b03808316600090815260016020526040902054811690821603611038576040516358acd00960e01b815260040160405180910390fd5b60405163598fd92b60e11b81526001600160a01b03838116600483015282169063b31fb25690602401602060405180830381865afa15801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190611676565b6110be57604051620c174d60e61b815260040160405180910390fd5b6001600160a01b0382811660008181526001602052604080822080546001600160a01b0319169486169485179055517fa233da8ae896e8c05f64727b1e5a28a1498c6c98155dc48049dcfab977d349d69190a35050565b828054611121906114e7565b90600052602060002090601f0160209004810192826111435760008555611189565b82601f1061115c57805160ff1916838001178555611189565b82800160010185558215611189579182015b8281111561118957825182559160200191906001019061116e565b50611195929150611199565b5090565b5b80821115611195576000815560010161119a565b6001600160a01b0381168114610b1757600080fd5b6000602082840312156111d557600080fd5b8135610958816111ae565b60005b838110156111fb5781810151838201526020016111e3565b83811115610b065750506000910152565b602081526000825180602084015261122b8160408501602087016111e0565b601f01601f19169190910160400192915050565b6000806000806060858703121561125557600080fd5b8435611260816111ae565b9350602085013567ffffffffffffffff8082111561127d57600080fd5b818701915087601f83011261129157600080fd5b8135818111156112a057600080fd5b8860208285010111156112b257600080fd5b60208301955080945050505060408501356112cc816111ae565b939692955090935050565b6001600160801b0381168114610b1757600080fd5b600080604083850312156112ff57600080fd5b823561130a816112d7565b9150602083013561131a816112d7565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561136457611364611325565b604052919050565b600067ffffffffffffffff82111561138657611386611325565b50601f01601f191660200190565b600082601f8301126113a557600080fd5b81356113b86113b38261136c565b61133b565b8181528460208386010111156113cd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156113fd57600080fd5b8235611408816111ae565b9150602083013567ffffffffffffffff81111561142457600080fd5b61143085828601611394565b9150509250929050565b60006020828403121561144c57600080fd5b813567ffffffffffffffff81111561146357600080fd5b61146f84828501611394565b949350505050565b6000806040838503121561148a57600080fd5b8235611495816111ae565b9150602083013561131a816111ae565b6000602082840312156114b757600080fd5b8151610958816111ae565b6020808252600b908201526a27b7363ca6b0b730b3b2b960a91b604082015260600190565b600181811c908216806114fb57607f821691505b60208210810361151b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561154957600080fd5b5051919050565b600081600019048311821515161561157857634e487b7160e01b600052601160045260246000fd5b500290565b60006020828403121561158f57600080fd5b815167ffffffffffffffff8111156115a657600080fd5b8201601f810184136115b757600080fd5b80516115c56113b38261136c565b8181528560208385010111156115da57600080fd5b6107558260208301602086016111e0565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561161457600080fd5b825161161f816112d7565b602084015190925061131a816112d7565b60006020828403121561164257600080fd5b81516001600160e01b03198116811461095857600080fd5b6000825161166c8184602087016111e0565b9190910192915050565b60006020828403121561168857600080fd5b8151801515811461095857600080fdfea2646970667358221220afe7222dc304278e7ea422afb3cb6ddbdf5b6c5444629479ff108176d396bceb64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetSupported(address)": {
        "details": "Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away. Some providers implementations need time to \"build\" buffer for TWAP price, so price may not be available yet but this method will return true.",
        "params": {
          "_asset": "asset in question"
        },
        "returns": {
          "_0": "TRUE if asset has been setup, otherwise false"
        }
      },
      "constructor": {
        "params": {
          "_diaOracle": "IDIAOracleV2 address of DIA oracle contract",
          "_priceProvidersRepository": "IPriceProvidersRepository",
          "_stableAsset": "address Address of asset that we will be using as reference for USD it has no affect on any price, this is only for be able to getPrice(_usdAsset) using `ETH_USD_KEY` key"
        }
      },
      "getFallbackProvider(address)": {
        "details": "for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper we have this method to return on-chain provider that can be useful for liquidation"
      },
      "getPrice(address)": {
        "params": {
          "_asset": "address of an asset for which to read price"
        },
        "returns": {
          "_0": "of asses with 18 decimals, throws when pool is not ready yet to provide price"
        }
      },
      "getPriceForKey(string)": {
        "params": {
          "_key": "string under this key asset price will be available in DIA oracle"
        },
        "returns": {
          "assetPriceInUsd": "uint128 asset price",
          "priceUpToDate": "bool TRUE if price is up to date (acceptable), FALSE otherwise"
        }
      },
      "normalizePrice(uint128,uint128)": {
        "details": "_assetPriceInUsd uint128 asset price returned by DIA oracle (8 decimals)_ethPriceInUsd uint128 ETH price returned by DIA oracle (8 decimals)",
        "returns": {
          "assetPriceInEth": "uint256 18 decimals price in ETH"
        }
      },
      "offChainProvider()": {
        "details": "this is info method for LiquidationHelper",
        "returns": {
          "_0": "bool TRUE if provider is off-chain, means it is not a dex"
        }
      },
      "priceProviderPing()": {
        "details": "this can save us from simple human errors, in case we use invalid address but this should NOT be treated as security check",
        "returns": {
          "_0": "always true"
        }
      },
      "setupAsset(address,string,address)": {
        "details": "Asset setup. Can only be called by the manager. Explanation from DIA team:     Updates will be done every time there is a deviation >1% btw the last onchain update and the current price.     We have a 24hrs default update though, so assuming the price remains completely flat you would still get     an update every 24hrs.",
        "params": {
          "_asset": "address Asset to setup",
          "_key": "string under this key asset price will be available in DIA oracle",
          "_liquidationProvider": "IPriceProvider on-chain provider that can help with liquidation it will not be use for providing price, it is only for liquidation process"
        }
      },
      "validateKey(string)": {
        "details": "checks if key has expected format. Atm provider is accepting only prices in USD, so key must end with \"/USD\". If key is invalid function will throw.",
        "params": {
          "_key": "string DIA key for asset"
        }
      },
      "validateSymbol(address,string)": {
        "details": "checks if key match token symbol. Reverts if does not match.",
        "params": {
          "_asset": "address Asset to setup",
          "_key": "string under this key asset price will be available in DIA oracle"
        }
      }
    },
    "stateVariables": {
      "DIA_DECIMALS": {
        "details": "decimals in DIA oracle"
      },
      "DIA_ORACLEV2": {
        "details": "Oracle deployed for Silo by DIA, all our prices will be submitted to this contract"
      },
      "ETH_USD_KEY": {
        "details": "price provider needs to return prices in ETH, but assets prices provided by DIA are in USD Under ETH_USD_KEY we will find ETH price in USD so we can convert price in USD into price in ETH"
      },
      "EXPECTED_DECIMALS": {
        "details": "decimals in Silo protocol"
      },
      "USD_ASSET": {
        "details": "Address of asset that we will be using as reference for USD"
      },
      "keys": {
        "details": "we accessing prices for assets by keys eg. \"Jones/USD\""
      },
      "liquidationProviders": {
        "details": "asset => fallbackProvider"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(address)": {
        "notice": "Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset. It unifies all tokens decimal to 18, examples: - if asses == quote it returns 1e18 - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC"
      },
      "priceProviderPing()": {
        "notice": "Helper method that allows easily detects, if contract is PriceProvider"
      },
      "priceProvidersRepository()": {
        "notice": "PriceProvidersRepository address"
      },
      "quoteToken()": {
        "notice": "Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34456,
        "contract": "contracts/priceProviders/dia/DiaPriceProvider.sol:DiaPriceProvider",
        "label": "keys",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 34462,
        "contract": "contracts/priceProviders/dia/DiaPriceProvider.sol:DiaPriceProvider",
        "label": "liquidationProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IPriceProvider)21423)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)21423": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IPriceProvider)21423)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)21423"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}