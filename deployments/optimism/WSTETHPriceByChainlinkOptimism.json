{
  "address": "0x9DEaA1Af59932c0D71DE6C04e50581f4605bE416",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "_priceProvidersRepository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_emergencyManager",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_stEthPriceAggregator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stEthPriceAggregatorHeartbeat",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wstETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AggregatorDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AggregatorPriceNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmergencyManagerDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmergencyThresholdNotReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackProviderAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackProviderDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackProviderNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HeartbeatDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAggregator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAggregatorDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFallbackPriceProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHeartbeat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEmergencyManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuoteAggregatorHeartbeatDidNotChange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract AggregatorV3Interface",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract AggregatorV3Interface",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "convertToQuote",
          "type": "bool"
        }
      ],
      "name": "NewAggregator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "emergencyManager",
          "type": "address"
        }
      ],
      "name": "NewEmergencyManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPriceProvider",
          "name": "fallbackProvider",
          "type": "address"
        }
      ],
      "name": "NewFallbackPriceProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heartbeat",
          "type": "uint256"
        }
      ],
      "name": "NewHeartbeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heartbeat",
          "type": "uint256"
        }
      ],
      "name": "NewQuoteAggregatorHeartbeat",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WSTETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heartbeat",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "forceFallback",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "convertToQuote",
          "type": "bool"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "aggregator",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "fallbackProvider",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "emergencyDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAggregatorPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFallbackProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offChainProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProviderPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvidersRepository",
      "outputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAggregatorHeartbeat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_convertToQuote",
          "type": "bool"
        }
      ],
      "name": "setAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emergencyManager",
          "type": "address"
        }
      ],
      "name": "setEmergencyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_fallbackProvider",
          "type": "address"
        }
      ],
      "name": "setFallbackPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heartbeat",
          "type": "uint256"
        }
      ],
      "name": "setHeartbeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_heartbeat",
          "type": "uint256"
        }
      ],
      "name": "setQuoteAggregatorHeartbeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_fallbackProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heartbeat",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_convertToQuote",
          "type": "bool"
        }
      ],
      "name": "setupAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbeb8cd683369ed0d496eff766b47c6a1238a2a32006f69d96f6ca97ff95c9cd",
  "receipt": {
    "to": null,
    "from": "0x6d228Fa4daD2163056A48Fc2186d716f5c65E89A",
    "contractAddress": "0x9DEaA1Af59932c0D71DE6C04e50581f4605bE416",
    "transactionIndex": 8,
    "gasUsed": "1597474",
    "logsBloom": "0x
    "blockHash": "0x4bb51a9b634f39edb9eadb758eec0132957c159355ac7379a825d12011425173",
    "transactionHash": "0xcbeb8cd683369ed0d496eff766b47c6a1238a2a32006f69d96f6ca97ff95c9cd",
    "logs": [],
    "blockNumber": 121594297,
    "cumulativeGasUsed": "2245736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E915d8950f0C6bf9d01C603D33c50b6110beDA3",
    "0x0000000000000000000000000000000000000000",
    "0x14d2d3a82AeD4019FddDfe07E8bdc485fb0d2249",
    4200,
    "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb"
  ],
  "numDeployments": 1,
  "solcInputHash": "6ce72f7db0079c1006da47f0339a808a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"_priceProvidersRepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyManager\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_stEthPriceAggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stEthPriceAggregatorHeartbeat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wstETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AggregatorDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AggregatorPriceNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmergencyManagerDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmergencyThresholdNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackProviderAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackProviderDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackProviderNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HeartbeatDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAggregatorDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFallbackPriceProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHeartbeat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEmergencyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteAggregatorHeartbeatDidNotChange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"AggregatorDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"convertToQuote\",\"type\":\"bool\"}],\"name\":\"NewAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emergencyManager\",\"type\":\"address\"}],\"name\":\"NewEmergencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPriceProvider\",\"name\":\"fallbackProvider\",\"type\":\"address\"}],\"name\":\"NewFallbackPriceProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heartbeat\",\"type\":\"uint256\"}],\"name\":\"NewHeartbeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heartbeat\",\"type\":\"uint256\"}],\"name\":\"NewQuoteAggregatorHeartbeat\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMERGENCY_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WSTETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heartbeat\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forceFallback\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertToQuote\",\"type\":\"bool\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"fallbackProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"assetSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"emergencyDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAggregatorPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFallbackProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProviderPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvidersRepository\",\"outputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAggregatorHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_convertToQuote\",\"type\":\"bool\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyManager\",\"type\":\"address\"}],\"name\":\"setEmergencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_fallbackProvider\",\"type\":\"address\"}],\"name\":\"setFallbackPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heartbeat\",\"type\":\"uint256\"}],\"name\":\"setHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heartbeat\",\"type\":\"uint256\"}],\"name\":\"setQuoteAggregatorHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_fallbackProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heartbeat\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_convertToQuote\",\"type\":\"bool\"}],\"name\":\"setupAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"details\":\"wstETH-stETH Exchange Rate rate reported by chainlink, means that for 1 wstETH we will get X of stETH with stETH/ETH aggregator: 1 stETH will give us N ETH wstETH price = X stETH price * N (STETH / ETH) to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);` we need to change `/` to `*`\",\"kind\":\"dev\",\"methods\":{\"assetSupported(address)\":{\"details\":\"this provider is only for wstETH\"},\"emergencyDisable(address)\":{\"details\":\"Disables the aggregator for an asset if there is a big discrepancy between the aggregator and the fallback provider. The only way to reenable the asset is by calling setupAsset or setAggregator again. Can only be called by the emergencyManager.\",\"params\":{\"_asset\":\"Asset for which to disable the aggregator\"}},\"getAggregatorPrice(address)\":{\"details\":\"Returns price directly from aggregator using all internal settings except of fallback provider\",\"params\":{\"_asset\":\"Asset for which we want to get the price\"}},\"getPrice(address)\":{\"params\":{\"_asset\":\"address of an asset for which to read price\"},\"returns\":{\"_0\":\"of asses with 18 decimals, throws when pool is not ready yet to provide price\"}},\"offChainProvider()\":{\"details\":\"this is info method for LiquidationHelper\",\"returns\":{\"_0\":\"bool TRUE if provider is off-chain, means it is not a dex\"}},\"priceProviderPing()\":{\"details\":\"this can save us from simple human errors, in case we use invalid address but this should NOT be treated as security check\",\"returns\":{\"_0\":\"always true\"}},\"setAggregator(address,address,bool)\":{\"details\":\"Sets the aggregator for an asset. Can only be called by the manager.\",\"params\":{\"_aggregator\":\"Aggregator to set\",\"_asset\":\"Asset for which to set the aggregator\"}},\"setEmergencyManager(address)\":{\"details\":\"Sets the emergencyManager. Can only be called by the manager.\",\"params\":{\"_emergencyManager\":\"Emergency manager to set\"}},\"setFallbackPriceProvider(address,address)\":{\"details\":\"Sets the fallback provider for an asset. Can only be called by the manager.\",\"params\":{\"_asset\":\"Asset for which to set the fallback provider\",\"_fallbackProvider\":\"Provider to set\"}},\"setHeartbeat(address,uint256)\":{\"details\":\"Sets the heartbeat threshold for an asset. Can only be called by the manager.\",\"params\":{\"_asset\":\"Asset for which to set the heartbeat threshold\",\"_heartbeat\":\"Threshold to set\"}},\"setQuoteAggregatorHeartbeat(uint256)\":{\"details\":\"Sets the quote aggregator heartbeat threshold. Can only be called by the manager.\",\"params\":{\"_heartbeat\":\"Threshold to set\"}},\"setupAsset(address,address,address,uint256,bool)\":{\"details\":\"Sets the aggregator, fallbackProvider and heartbeat for an asset. Can only be called by the manager.\",\"params\":{\"_aggregator\":\"Chainlink aggregator proxy\",\"_asset\":\"Asset to setup\",\"_fallbackProvider\":\"Provider to use if the price is invalid or if the aggregator was disabled\",\"_heartbeat\":\"Threshold in seconds to invalidate a stale price\"}}},\"title\":\"WSTETHPriceByChainlinkArbitrum\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(address)\":{\"notice\":\"Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset. It unifies all tokens decimal to 18, examples: - if asses == quote it returns 1e18 - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\"},\"priceProviderPing()\":{\"notice\":\"Helper method that allows easily detects, if contract is PriceProvider\"},\"priceProvidersRepository()\":{\"notice\":\"PriceProvidersRepository address\"},\"quoteToken()\":{\"notice\":\"Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\"},\"setupAsset(address,address,address,uint256,bool)\":{\"notice\":\"this method overrides original to make sure `_convertToQuote` is always true, because we will be using `toQuote` to calculate wstETH price.\"}},\"notice\":\"WSTETHPriceByChainlinkArbitrum is the price provider for wstETH token for Arbitrum. Price calculations depends on the price of stETH and wstETH-stETH Exchange Rate.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol\":\"WSTETHPriceByChainlinkArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/// @title Common interface V2 for Silo Price Providers\\ninterface IPriceProviderV2 is IPriceProvider {\\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\\n    /// we have this method to return on-chain provider that can be useful for liquidation\\n    function getFallbackProvider(address _asset) external view returns (IPriceProvider);\\n\\n    /// @dev this is info method for LiquidationHelper\\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\\n    function offChainProvider() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xd7a62f4ba82d77d8018a3a15c6a61c0de511e70a75cd55d1bbe6f965c1994b0d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n\\nlibrary TokenHelper {\\n    uint256 private constant _BYTES32_SIZE = 32;\\n\\n    error TokenIsNotAContract();\\n\\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\\n\\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\\n        // we assume there are no decimals and use 0.\\n        if (!hasMetadata) {\\n            return 0;\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Returns the symbol for the provided ERC20 token.\\n    /// An empty string is returned if the call to the token didn't succeed.\\n    /// @param _token address of the token to get the symbol for\\n    /// @return assetSymbol the token symbol\\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\\n\\n        if (!hasMetadata || data.length == 0) {\\n            return \\\"?\\\";\\n        } else if (data.length == _BYTES32_SIZE) {\\n            return string(removeZeros(data));\\n        } else {\\n            return abi.decode(data, (string));\\n        }\\n    }\\n\\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\\n    /// @param _data byte array from which to remove zeroes\\n    /// @return result byte array with zeroes removed \\n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\\n        uint256 n = _data.length;\\n\\n        unchecked {\\n            for (uint256 i; i < n; i++) {\\n                if (_data[i] == 0) continue;\\n\\n                result = abi.encodePacked(result, _data[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\\n\\n        (bool success, bytes memory result) = _token.staticcall(_data);\\n\\n        // If the call reverted we assume the token doesn't follow the metadata extension\\n        if (!success) {\\n            return (false, \\\"\\\");\\n        }\\n\\n        return (true, result);\\n    }\\n}\\n\",\"keccak256\":\"0x7e65c9647420e686cc897b3426cd94840cd42b25cc0a647e4bcdf45897fe6743\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/IERC20LikeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6;\\n\\n/// @dev This is only meant to be used by price providers, which use a different\\n/// Solidity version than the rest of the codebase. This way de won't need to include\\n/// an additional version of OpenZeppelin's library.\\ninterface IERC20LikeV2 {\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x55746da5754f7a613f86beaf934509a76f6d54372f6799defae4a5a3ab94afe2\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/IndividualPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./PriceProvider.sol\\\";\\nimport \\\"./../lib/TokenHelper.sol\\\";\\n\\n/// @title IndividualPriceProvider\\n/// @notice IndividualPriceProvider\\n/// @custom:security-contact security@silo.finance\\nabstract contract IndividualPriceProvider is PriceProvider {\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable ASSET;\\n\\n    error InvalidAssetAddress();\\n\\n    constructor(\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        address _asset,\\n        string memory _symbol\\n    ) PriceProvider(_priceProvidersRepository) {\\n        if (keccak256(abi.encode(TokenHelper.symbol(_asset))) != keccak256(abi.encode(_symbol))) {\\n            revert InvalidAssetAddress();\\n        }\\n\\n        ASSET = _asset;\\n    }\\n\\n    /// @notice Only ASSET token is supported, false otherwise.\\n    /// @param _asset address of an asset\\n    function assetSupported(address _asset) public view virtual override returns (bool) {\\n        return _asset == ASSET;\\n    }\\n}\\n\",\"keccak256\":\"0x67769099cb6a65f504ba5bd705041647376242c089a4494323c364572a76ac8d\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"../lib/Ping.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../interfaces/IPriceProvidersRepository.sol\\\";\\n\\n/// @title PriceProvider\\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\\n/// and multiple assets.\\nabstract contract PriceProvider is IPriceProvider {\\n    /// @notice PriceProvidersRepository address\\n    IPriceProvidersRepository public immutable priceProvidersRepository;\\n\\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\\n    address public immutable override quoteToken;\\n\\n    modifier onlyManager() {\\n        if (priceProvidersRepository.manager() != msg.sender) revert(\\\"OnlyManager\\\");\\n        _;\\n    }\\n\\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\\n        if (\\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \\n        ) {\\n            revert(\\\"InvalidPriceProviderRepository\\\");\\n        }\\n\\n        priceProvidersRepository = _priceProvidersRepository;\\n        quoteToken = _priceProvidersRepository.quoteToken();\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function priceProviderPing() external pure override returns (bytes4) {\\n        return this.priceProviderPing.selector;\\n    }\\n\\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\\n        if (_errMsg.length > 0) {\\n            assembly { // solhint-disable-line no-inline-assembly\\n                revert(add(32, _errMsg), mload(_errMsg))\\n            }\\n        }\\n\\n        revert(_customErr);\\n    }\\n}\\n\",\"keccak256\":\"0xd5d1739891a5639048bdf0c7c72838e848c3f381b56f978780d4d866535f30a5\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/chainlinkV3/ChainlinkV3PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../PriceProvider.sol\\\";\\nimport \\\"../IERC20LikeV2.sol\\\";\\n\\ncontract ChainlinkV3PriceProvider is PriceProvider {\\n    using SafeMath for uint256;\\n\\n    struct AssetData {\\n        // Time threshold to invalidate stale prices\\n        uint256 heartbeat;\\n        // If true, we bypass the aggregator and consult the fallback provider directly\\n        bool forceFallback;\\n        // If true, the aggregator returns price in USD, so we need to convert to QUOTE\\n        bool convertToQuote;\\n        // Chainlink aggregator proxy\\n        AggregatorV3Interface aggregator;\\n        // Provider used if the aggregator's price is invalid or if it became disabled\\n        IPriceProvider fallbackProvider;\\n    }\\n\\n    /// @dev Aggregator that converts from USD to quote token\\n    AggregatorV3Interface internal immutable _QUOTE_AGGREGATOR; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Decimals used by the _QUOTE_AGGREGATOR\\n    uint8 internal immutable _QUOTE_AGGREGATOR_DECIMALS; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Used to optimize calculations in emergency disable function\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 internal immutable _MAX_PRICE_DIFF = type(uint256).max / (100 * EMERGENCY_PRECISION);\\n    \\n    // @dev Precision to use for the EMERGENCY_THRESHOLD\\n    uint256 public constant EMERGENCY_PRECISION = 1e6;\\n\\n    /// @dev Disable the aggregator if the difference with the fallback is higher than this percentage (10%)\\n    uint256 public constant EMERGENCY_THRESHOLD = 10 * EMERGENCY_PRECISION; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev this is basically `PriceProvider.quoteToken.decimals()`\\n    uint8 internal immutable _QUOTE_TOKEN_DECIMALS; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Address allowed to call the emergencyDisable function, can be set by the owner\\n    address public emergencyManager;\\n\\n    /// @dev Threshold used to determine if the price returned by the _QUOTE_AGGREGATOR is valid\\n    uint256 public quoteAggregatorHeartbeat;\\n\\n    /// @dev Data used for each asset\\n    mapping(address => AssetData) public assetData;\\n\\n    event NewAggregator(address indexed asset, AggregatorV3Interface indexed aggregator, bool convertToQuote);\\n    event NewFallbackPriceProvider(address indexed asset, IPriceProvider indexed fallbackProvider);\\n    event NewHeartbeat(address indexed asset, uint256 heartbeat);\\n    event NewQuoteAggregatorHeartbeat(uint256 heartbeat);\\n    event NewEmergencyManager(address indexed emergencyManager);\\n    event AggregatorDisabled(address indexed asset, AggregatorV3Interface indexed aggregator);\\n\\n    error AggregatorDidNotChange();\\n    error AggregatorPriceNotAvailable();\\n    error AssetNotSupported();\\n    error EmergencyManagerDidNotChange();\\n    error EmergencyThresholdNotReached();\\n    error FallbackProviderAlreadySet();\\n    error FallbackProviderDidNotChange();\\n    error FallbackProviderNotSet();\\n    error HeartbeatDidNotChange();\\n    error InvalidAggregator();\\n    error InvalidAggregatorDecimals();\\n    error InvalidFallbackPriceProvider();\\n    error InvalidHeartbeat();\\n    error OnlyEmergencyManager();\\n    error QuoteAggregatorHeartbeatDidNotChange();\\n\\n    modifier onlyAssetSupported(address _asset) {\\n        if (!assetSupported(_asset)) {\\n            revert AssetNotSupported();\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        address _emergencyManager,\\n        AggregatorV3Interface _quoteAggregator,\\n        uint256 _quoteAggregatorHeartbeat\\n    ) PriceProvider(_priceProvidersRepository) {\\n        _setEmergencyManager(_emergencyManager);\\n        _QUOTE_TOKEN_DECIMALS = IERC20LikeV2(quoteToken).decimals();\\n        _QUOTE_AGGREGATOR = _quoteAggregator;\\n        _QUOTE_AGGREGATOR_DECIMALS = _quoteAggregator.decimals();\\n        quoteAggregatorHeartbeat = _quoteAggregatorHeartbeat;\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function assetSupported(address _asset) public view virtual override returns (bool) {\\n        AssetData storage data = assetData[_asset];\\n\\n        // Asset is supported if:\\n        //     - the asset is the quote token\\n        //       OR\\n        //     - the aggregator address is defined AND\\n        //         - the aggregator is not disabled\\n        //           OR\\n        //         - the fallback is defined\\n\\n        if (_asset == quoteToken) {\\n            return true;\\n        }\\n\\n        if (address(data.aggregator) != address(0)) {\\n            return !data.forceFallback || address(data.fallbackProvider) != address(0);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns price directly from aggregator using all internal settings except of fallback provider\\n    /// @param _asset Asset for which we want to get the price\\n    function getAggregatorPrice(address _asset) public view virtual returns (bool success, uint256 price) {\\n        (success, price) = _getAggregatorPrice(_asset);\\n    }\\n    \\n    /// @inheritdoc IPriceProvider\\n    function getPrice(address _asset) public view virtual override returns (uint256) {\\n        address quote = quoteToken;\\n\\n        if (_asset == quote) {\\n            return 10 ** _QUOTE_TOKEN_DECIMALS;\\n        }\\n\\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\\n\\n        return success ? price : _getFallbackPrice(_asset);\\n    }\\n\\n    /// @dev Sets the aggregator, fallbackProvider and heartbeat for an asset. Can only be called by the manager.\\n    /// @param _asset Asset to setup\\n    /// @param _aggregator Chainlink aggregator proxy\\n    /// @param _fallbackProvider Provider to use if the price is invalid or if the aggregator was disabled\\n    /// @param _heartbeat Threshold in seconds to invalidate a stale price\\n    function setupAsset(\\n        address _asset,\\n        AggregatorV3Interface _aggregator,\\n        IPriceProvider _fallbackProvider,\\n        uint256 _heartbeat,\\n        bool _convertToQuote\\n    ) external virtual onlyManager {\\n        // This has to be done first so that `_setAggregator` works\\n        _setHeartbeat(_asset, _heartbeat);\\n\\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\\n\\n        // We don't care if this doesn't change\\n        _setFallbackPriceProvider(_asset, _fallbackProvider);\\n    }\\n\\n    /// @dev Sets the aggregator for an asset. Can only be called by the manager.\\n    /// @param _asset Asset for which to set the aggregator\\n    /// @param _aggregator Aggregator to set\\n    function setAggregator(address _asset, AggregatorV3Interface _aggregator, bool _convertToQuote)\\n        external\\n        virtual\\n        onlyManager\\n        onlyAssetSupported(_asset)\\n    {\\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\\n    }\\n\\n    /// @dev Sets the fallback provider for an asset. Can only be called by the manager.\\n    /// @param _asset Asset for which to set the fallback provider\\n    /// @param _fallbackProvider Provider to set\\n    function setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\\n        external\\n        virtual\\n        onlyManager\\n        onlyAssetSupported(_asset)\\n    {\\n        if (!_setFallbackPriceProvider(_asset, _fallbackProvider)) {\\n            revert FallbackProviderDidNotChange();\\n        }\\n    }\\n\\n    /// @dev Sets the heartbeat threshold for an asset. Can only be called by the manager.\\n    /// @param _asset Asset for which to set the heartbeat threshold\\n    /// @param _heartbeat Threshold to set\\n    function setHeartbeat(address _asset, uint256 _heartbeat)\\n        external\\n        virtual\\n        onlyManager\\n        onlyAssetSupported(_asset)\\n    {\\n        if (!_setHeartbeat(_asset, _heartbeat)) revert HeartbeatDidNotChange();\\n    }\\n\\n    /// @dev Sets the quote aggregator heartbeat threshold. Can only be called by the manager.\\n    /// @param _heartbeat Threshold to set\\n    function setQuoteAggregatorHeartbeat(uint256 _heartbeat)\\n        external\\n        virtual\\n        onlyManager\\n    {\\n        if (!_setQuoteAggregatorHeartbeat(_heartbeat)) revert QuoteAggregatorHeartbeatDidNotChange();\\n    }\\n\\n    /// @dev Sets the emergencyManager. Can only be called by the manager.\\n    /// @param _emergencyManager Emergency manager to set\\n    function setEmergencyManager(address _emergencyManager) external virtual onlyManager {\\n        if (!_setEmergencyManager(_emergencyManager)) revert EmergencyManagerDidNotChange();\\n    }\\n\\n    /// @dev Disables the aggregator for an asset if there is a big discrepancy between the aggregator and the\\n    /// fallback provider. The only way to reenable the asset is by calling setupAsset or setAggregator again.\\n    /// Can only be called by the emergencyManager.\\n    /// @param _asset Asset for which to disable the aggregator\\n    function emergencyDisable(address _asset) external virtual {\\n        if (msg.sender != emergencyManager) {\\n            revert OnlyEmergencyManager();\\n        }\\n\\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\\n\\n        if (!success) {\\n            revert AggregatorPriceNotAvailable();\\n        }\\n\\n        uint256 fallbackPrice = _getFallbackPrice(_asset);\\n\\n        uint256 diff;\\n\\n        unchecked {\\n            // It is ok to uncheck because of the initial fallbackPrice >= price check\\n            diff = fallbackPrice >= price ? fallbackPrice - price : price - fallbackPrice;\\n        }\\n\\n        if (diff > _MAX_PRICE_DIFF || (diff * 100 * EMERGENCY_PRECISION) / price < EMERGENCY_THRESHOLD) {\\n            revert EmergencyThresholdNotReached();\\n        }\\n\\n        // Disable main aggregator, fallback stays enabled\\n        assetData[_asset].forceFallback = true;\\n\\n        emit AggregatorDisabled(_asset, assetData[_asset].aggregator);\\n    }\\n\\n    function getFallbackProvider(address _asset) external view virtual returns (IPriceProvider) {\\n        return assetData[_asset].fallbackProvider;\\n    }\\n\\n    function _getAggregatorPrice(address _asset) internal view virtual returns (bool success, uint256 price) {\\n        AssetData storage data = assetData[_asset];\\n\\n        uint256 heartbeat = data.heartbeat;\\n        bool forceFallback = data.forceFallback;\\n        AggregatorV3Interface aggregator = data.aggregator;\\n\\n        if (address(aggregator) == address(0)) revert AssetNotSupported();\\n\\n        (\\n            /*uint80 roundID*/,\\n            int256 aggregatorPrice,\\n            /*uint256 startedAt*/,\\n            uint256 timestamp,\\n            /*uint80 answeredInRound*/\\n        ) = aggregator.latestRoundData();\\n\\n        // If a valid price is returned and it was updated recently\\n        if (!forceFallback && _isValidPrice(aggregatorPrice, timestamp, heartbeat)) {\\n            uint256 result;\\n\\n            if (data.convertToQuote) {\\n                // _toQuote performs decimal normalization internally\\n                result = _toQuote(uint256(aggregatorPrice));\\n            } else {\\n                uint8 aggregatorDecimals = aggregator.decimals();\\n                result = _normalizeWithDecimals(uint256(aggregatorPrice), aggregatorDecimals);\\n            }\\n\\n            return (true, result);\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    function _getFallbackPrice(address _asset) internal view virtual returns (uint256) {\\n        IPriceProvider fallbackProvider = assetData[_asset].fallbackProvider;\\n\\n        if (address(fallbackProvider) == address(0)) revert FallbackProviderNotSet();\\n\\n        return fallbackProvider.getPrice(_asset);\\n    }\\n\\n    function _setEmergencyManager(address _emergencyManager) internal virtual returns (bool changed) {\\n        if (_emergencyManager == emergencyManager) {\\n            return false;\\n        }\\n\\n        emergencyManager = _emergencyManager;\\n\\n        emit NewEmergencyManager(_emergencyManager);\\n\\n        return true;\\n    }\\n\\n    function _setAggregator(\\n        address _asset,\\n        AggregatorV3Interface _aggregator,\\n        bool _convertToQuote\\n    ) internal virtual returns (bool changed) {\\n        if (address(_aggregator) == address(0)) revert InvalidAggregator();\\n\\n        AssetData storage data = assetData[_asset];\\n\\n        if (data.aggregator == _aggregator && data.forceFallback == false) {\\n            return false;\\n        }\\n\\n        // There doesn't seem to be a way to verify if this is a \\\"valid\\\" aggregator (other than getting the price)\\n        data.forceFallback = false;\\n        data.aggregator = _aggregator;\\n\\n        (bool success,) = _getAggregatorPrice(_asset);\\n\\n        if (!success) revert AggregatorPriceNotAvailable();\\n\\n        if (_convertToQuote && _aggregator.decimals() != _QUOTE_AGGREGATOR_DECIMALS) {\\n            revert InvalidAggregatorDecimals();\\n        }\\n\\n        // We want to always update this\\n        assetData[_asset].convertToQuote = _convertToQuote;\\n\\n        emit NewAggregator(_asset, _aggregator, _convertToQuote);\\n\\n        return true;\\n    }\\n\\n    function _setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\\n        internal\\n        virtual\\n        returns (bool changed)\\n    {\\n        if (_fallbackProvider == assetData[_asset].fallbackProvider) {\\n            return false;\\n        }\\n\\n        assetData[_asset].fallbackProvider = _fallbackProvider;\\n\\n        if (address(_fallbackProvider) != address(0)) {\\n            if (\\n                !priceProvidersRepository.isPriceProvider(_fallbackProvider) ||\\n                !_fallbackProvider.assetSupported(_asset) ||\\n                _fallbackProvider.quoteToken() != quoteToken\\n            ) {\\n                revert InvalidFallbackPriceProvider();\\n            }\\n\\n            // Make sure it doesn't revert\\n            _getFallbackPrice(_asset);\\n        }\\n\\n        emit NewFallbackPriceProvider(_asset, _fallbackProvider);\\n\\n        return true;\\n    }\\n\\n    function _setHeartbeat(address _asset, uint256 _heartbeat) internal virtual returns (bool changed) {\\n        // Arbitrary limit, Chainlink's threshold is always less than a day\\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\\n\\n        if (_heartbeat == assetData[_asset].heartbeat) {\\n            return false;\\n        }\\n\\n        assetData[_asset].heartbeat = _heartbeat;\\n\\n        emit NewHeartbeat(_asset, _heartbeat);\\n\\n        return true;\\n    }\\n\\n    function _setQuoteAggregatorHeartbeat(uint256 _heartbeat) internal virtual returns (bool changed) {\\n        // Arbitrary limit, Chainlink's threshold is always less than a day\\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\\n\\n        if (_heartbeat == quoteAggregatorHeartbeat) {\\n            return false;\\n        }\\n\\n        quoteAggregatorHeartbeat = _heartbeat;\\n\\n        emit NewQuoteAggregatorHeartbeat(_heartbeat);\\n\\n        return true;\\n    }\\n\\n    /// @dev Adjusts the given price to use the same decimals as the quote token.\\n    /// @param _price Price to adjust decimals\\n    /// @param _decimals Decimals considered in `_price`\\n    function _normalizeWithDecimals(uint256 _price, uint8 _decimals) internal view virtual returns (uint256) {\\n        // We want to return the price of 1 asset token, but with the decimals of the quote token\\n        if (_QUOTE_TOKEN_DECIMALS == _decimals) {\\n            return _price;\\n        } else if (_QUOTE_TOKEN_DECIMALS < _decimals) {\\n            return _price / 10 ** (_decimals - _QUOTE_TOKEN_DECIMALS);\\n        } else {\\n            return _price * 10 ** (_QUOTE_TOKEN_DECIMALS - _decimals);\\n        }\\n    }\\n\\n    /// @dev Converts a price returned by an aggregator to quote units\\n    function _toQuote(uint256 _price) internal view virtual returns (uint256) {\\n       (\\n            /*uint80 roundID*/,\\n            int256 aggregatorPrice,\\n            /*uint256 startedAt*/,\\n            uint256 timestamp,\\n            /*uint80 answeredInRound*/\\n        ) = _QUOTE_AGGREGATOR.latestRoundData();\\n\\n        // If an invalid price is returned\\n        if (!_isValidPrice(aggregatorPrice, timestamp, quoteAggregatorHeartbeat)) {\\n            revert AggregatorPriceNotAvailable();\\n        }\\n\\n        // _price and aggregatorPrice should both have the same decimals so we normalize here\\n        return _price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);\\n    }\\n\\n    function _isValidPrice(int256 _price, uint256 _timestamp, uint256 _heartbeat) internal view virtual returns (bool) {\\n        return _price > 0 && block.timestamp - _timestamp < _heartbeat;\\n    }\\n}\\n\",\"keccak256\":\"0x215834b7c29259ea630b42241679d870f9cc2502137c7307431e020c469d3ee4\",\"license\":\"MIT\"},\"contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./../../lib/TokenHelper.sol\\\";\\nimport \\\"../chainlinkV3/ChainlinkV3PriceProvider.sol\\\";\\nimport \\\"./WSTETHPriceProvider.sol\\\";\\nimport \\\"../../interfaces/IPriceProviderV2.sol\\\";\\n\\n\\n/// @title WSTETHPriceByChainlinkArbitrum\\n/// @notice WSTETHPriceByChainlinkArbitrum is the price provider for wstETH token for Arbitrum.\\n/// Price calculations depends on the price of stETH and wstETH-stETH Exchange Rate.\\n/// @custom:security-contact security@silo.finance\\n/// @dev wstETH-stETH Exchange Rate rate reported by chainlink, means that for 1 wstETH we will get X of stETH\\n/// with stETH/ETH aggregator: 1 stETH will give us N ETH\\n/// wstETH price = X stETH price * N (STETH / ETH)\\n/// to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);`\\n/// we need to change `/` to `*`\\ncontract WSTETHPriceByChainlinkArbitrum is ChainlinkV3PriceProvider, IPriceProviderV2 {\\n    address public immutable WSTETH; // solhint-disable-line var-name-mixedcase\\n\\n    constructor(\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        address _emergencyManager,\\n        AggregatorV3Interface _stEthPriceAggregator,\\n        uint256 _stEthPriceAggregatorHeartbeat,\\n        address _wstETH\\n    )\\n        ChainlinkV3PriceProvider(\\n            _priceProvidersRepository,\\n            _emergencyManager,\\n            _stEthPriceAggregator,\\n            _stEthPriceAggregatorHeartbeat\\n        )\\n    {\\n        WSTETH = _wstETH;\\n    }\\n\\n    /// @inheritdoc ChainlinkV3PriceProvider\\n    /// @notice this method overrides original to make sure `_convertToQuote` is always true, because we will be using\\n    /// `toQuote` to calculate wstETH price.\\n    function setupAsset(\\n        address _asset,\\n        AggregatorV3Interface _aggregator,\\n        IPriceProvider _fallbackProvider,\\n        uint256 _heartbeat,\\n        bool _convertToQuote\\n    ) external virtual override onlyManager {\\n        _convertToQuote = true;\\n\\n        // This has to be done first so that `_setAggregator` works\\n        _setHeartbeat(_asset, _heartbeat);\\n\\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\\n\\n        // We don't care if this doesn't change\\n        _setFallbackPriceProvider(_asset, _fallbackProvider);\\n    }\\n\\n    function getFallbackProvider(address _asset)\\n        external\\n        view\\n        override(ChainlinkV3PriceProvider, IPriceProviderV2)\\n        returns (IPriceProvider)\\n    {\\n        return assetData[_asset].fallbackProvider;\\n    }\\n\\n    function offChainProvider() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /// @dev this provider is only for wstETH\\n    function assetSupported(address _asset)\\n        public\\n        view\\n        virtual\\n        override(ChainlinkV3PriceProvider, IPriceProvider)\\n        returns (bool)\\n    {\\n        return _asset == WSTETH;\\n    }\\n\\n    /// @dev to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);`\\n    /// we need to change `/` to `*` for this provider.\\n    function _toQuote(uint256 _exchangeRate) internal view virtual override returns (uint256) {\\n        (\\n            /*uint80 roundID*/,\\n            int256 stEthPrice,\\n            /*uint256 startedAt*/,\\n            uint256 timestamp,\\n            /*uint80 answeredInRound*/\\n        ) = _QUOTE_AGGREGATOR.latestRoundData();\\n\\n        // If an invalid price is returned\\n        if (!_isValidPrice(stEthPrice, timestamp, quoteAggregatorHeartbeat)) {\\n            revert AggregatorPriceNotAvailable();\\n        }\\n\\n        // _price and aggregatorPrice should both have the same decimals so we normalize here\\n        return _exchangeRate * uint256(stEthPrice) / 10 ** _QUOTE_TOKEN_DECIMALS;\\n    }\\n}\\n\",\"keccak256\":\"0x759b75d6bcd1dbf0b58bc927ce4b6d074bd7a1b5905f2e576c7da4ada187fff5\",\"license\":\"BUSL-1.1\"},\"contracts/priceProviders/wstETH/WSTETHPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../IndividualPriceProvider.sol\\\";\\nimport \\\"./../../lib/TokenHelper.sol\\\";\\n\\ninterface IStETHLike {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n}\\n\\n/// @title WSTETHPriceProvider\\n/// @notice WSTETHPriceProvider is the price provider for wstETH token. Price calculations depends\\n/// on the price of stETH. Price providers repository must be ready to provide the stETH price.\\n/// @custom:security-contact security@silo.finance\\ncontract WSTETHPriceProvider is IndividualPriceProvider {\\n    // solhint-disable-next-line var-name-mixedcase\\n    IStETHLike public immutable STETH;\\n\\n    error AssetNotSupported();\\n    error InvalidSTETHAddress();\\n    error InvalidWSTETHAddress();\\n\\n    constructor(\\n        IPriceProvidersRepository _priceProvidersRepository,\\n        IStETHLike _stETH,\\n        address _wstETH\\n    ) IndividualPriceProvider(_priceProvidersRepository, _wstETH, \\\"wstETH\\\") {\\n        if (keccak256(abi.encode(TokenHelper.symbol(address(_stETH)))) != keccak256(abi.encode(\\\"stETH\\\"))) {\\n            revert InvalidSTETHAddress();\\n        }\\n\\n        STETH = _stETH;\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPrice(address _asset) public view virtual override returns (uint256 price) {\\n        if (!assetSupported(_asset)) revert AssetNotSupported();\\n\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 ETHPerStETH = priceProvidersRepository.getPrice(address(STETH));\\n\\n        uint256 stETHPerWstETH = STETH.getPooledEthByShares(1 ether);\\n\\n        // Amount of ETH per stETH * Amount of stETH per wstETH = Amount of ETH per wstETH\\n        return ETHPerStETH * stETHPerWstETH / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x04b80ccfb5f8636f5aa219cc19f5a4a3b87a4208bd541f34be929245baedadd0\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61016060405262000015620f4240606462000355565b620000239060001962000383565b610100523480156200003457600080fd5b506040516200204d3803806200204d8339810160408190526200005791620003bf565b848484848362000080816001600160a01b031663eec3e6a76200025e60201b62000bd21760201c565b620000d15760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964507269636550726f76696465725265706f7369746f72790000604482015260640160405180910390fd5b6001600160a01b038116608081905260408051630217a4b760e41b8152905163217a4b70916004808201926020929091908290030181865afa1580156200011c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000142919062000433565b6001600160a01b031660a052506200015a83620002e8565b5060a0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200019c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c2919062000453565b60ff16610120526001600160a01b03821660c08190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023a919062000453565b60ff1660e0526001555050506001600160a01b03166101405250620004a492505050565b60006001600160a01b03831615801590620002e1575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cc919062000478565b60e083901b6001600160e01b03199081169116145b9392505050565b600080546001600160a01b03908116908316036200030857506000919050565b600080546001600160a01b0319166001600160a01b038416908117825560405190917fc9f3c0828967b8c34f2d6bbf6797c2965918320a1b0cd659293a94bff918fecd91a2506001919050565b60008160001904831182151516156200037e57634e487b7160e01b600052601160045260246000fd5b500290565b600082620003a157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0381168114620003bc57600080fd5b50565b600080600080600060a08688031215620003d857600080fd5b8551620003e581620003a6565b6020870151909550620003f881620003a6565b60408701519094506200040b81620003a6565b6060870151608088015191945092506200042581620003a6565b809150509295509295909350565b6000602082840312156200044657600080fd5b8151620002e181620003a6565b6000602082840312156200046657600080fd5b815160ff81168114620002e157600080fd5b6000602082840312156200048b57600080fd5b81516001600160e01b031981168114620002e157600080fd5b60805160a05160c05160e051610100516101205161014051611ae562000568600039600081816103690152610aca01526000818161063401528181611563015281816115a5015281816115d901528181611606015261164d0152600061070f0152600061127f015260006114ad015260008181610190015281816105fd0152610f560152600081816102a6015281816103f701528181610505015281816107f8015281816108ff015281816109da01528181610b060152610e700152611ae56000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806375435703116100b8578063ca0a8f221161007c578063ca0a8f2214610337578063d0532d911461033e578063d2c18f5914610351578063d9fb643a14610364578063da31cf3c1461038b578063db09c3fd1461039457600080fd5b806375435703146102c85780637f2141c8146102db5780638f001f59146102ee5780639a2ca25714610301578063b31fb2561461031457600080fd5b80632f1605fc116100ff5780632f1605fc146101df57806341976e09146101f257806341fee44a1461020557806357e0c50f1461028c5780635ddf2be3146102a157600080fd5b8063087d31b71461013c5780630f2a1632146101575780631d498ad314610161578063217a4b701461018b5780632553b17f146101ca575b600080fd5b6101446103c4565b6040519081526020015b60405180910390f35b610144620f424081565b61017461016f36600461169b565b6103d5565b60408051921515835260208301919091520161014e565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014e565b6101dd6101d83660046116b8565b6103eb565b005b6101dd6101ed3660046116f1565b6104f9565b61014461020036600461169b565b6105f9565b61025561021336600461169b565b600260208190526000918252604090912080546001820154919092015460ff808316926101008104909116916001600160a01b03620100009092048216911685565b604080519586529315156020860152911515928401929092526001600160a01b03918216606084015216608082015260a00161014e565b6040516357e0c50f60e01b815260200161014e565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b6101dd6102d636600461169b565b61068f565b6101dd6102e936600461172b565b6107ec565b6101dd6102fc366004611776565b6108f3565b6101dd61030f36600461178f565b6109ce565b61032761032236600461169b565b610ac8565b604051901515815260200161014e565b6001610327565b6101dd61034c36600461169b565b610afa565b6000546101b2906001600160a01b031681565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b61014460015481565b6101b26103a236600461169b565b6001600160a01b03908116600090815260026020819052604090912001541690565b6103d2620f4240600a61180d565b81565b6000806103e183610c5a565b9094909350915050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610477919061182c565b6001600160a01b0316146104a65760405162461bcd60e51b815260040161049d90611849565b60405180910390fd5b816104b081610ac8565b6104cd5760405163981a2a2b60e01b815260040160405180910390fd5b6104d78383610de9565b6104f457604051630d51b37960e21b815260040160405180910390fd5b505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061182c565b6001600160a01b0316146105ab5760405162461bcd60e51b815260040161049d90611849565b816105b581610ac8565b6105d25760405163981a2a2b60e01b815260040160405180910390fd5b6105dc838361105e565b6104f45760405163d0abfce560e01b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03808216908416036106615761065a7f0000000000000000000000000000000000000000000000000000000000000000600a611952565b9392505050565b60008061066d85610c5a565b91509150816106845761067f85611109565b610686565b805b95945050505050565b6000546001600160a01b031633146106ba57604051633111da4560e21b815260040160405180910390fd5b6000806106c683610c5a565b91509150816106e857604051638a93c04960e01b815260040160405180910390fd5b60006106f384611109565b90506000828210156107075781830361070b565b8282035b90507f000000000000000000000000000000000000000000000000000000000000000081118061076a5750610744620f4240600a61180d565b83620f424061075484606461180d565b61075e919061180d565b6107689190611961565b105b15610788576040516332d3273560e21b815260040160405180910390fd5b6001600160a01b038086166000818152600260205260408082206001908101805460ff191690911790819055905162010000909104909316927f19986ca6379d8de58c363928f6de20927669b98ab030c431c2f2fee2625961d59190a35050505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610878919061182c565b6001600160a01b03161461089e5760405162461bcd60e51b815260040161049d90611849565b826108a881610ac8565b6108c55760405163981a2a2b60e01b815260040160405180910390fd5b6108d08484846111b1565b6108ed57604051630fe8d77760e11b815260040160405180910390fd5b50505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f919061182c565b6001600160a01b0316146109a55760405162461bcd60e51b815260040161049d90611849565b6109ae816113a2565b6109cb5760405163f620192160e01b815260040160405180910390fd5b50565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a919061182c565b6001600160a01b031614610a805760405162461bcd60e51b815260040161049d90611849565b506001610a8d858361105e565b50610a998585836111b1565b610ab657604051630fe8d77760e11b815260040160405180910390fd5b610ac08584610de9565b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b86919061182c565b6001600160a01b031614610bac5760405162461bcd60e51b815260040161049d90611849565b610bb581611419565b6109cb576040516393c3b9ab60e01b815260040160405180910390fd5b60006001600160a01b03831615801590610c51575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611983565b60e083901b6001600160e01b03199081169116145b90505b92915050565b6001600160a01b038082166000908152600260205260408120805460018201549293849360ff811691620100009091041680610ca95760405163981a2a2b60e01b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906119cc565b5093505092505083158015610d295750610d29828287611485565b15610dd8576001860154600090610100900460ff1615610d5357610d4c836114a6565b9050610dc7565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190611a1c565b9050610dc3848261159d565b9150505b60019a909950975050505050505050565b506000988998509650505050505050565b6001600160a01b03808316600090815260026020819052604082200154909190811690831603610e1b57506000610c54565b6001600160a01b0383811660009081526002602081905260409091200180546001600160a01b031916918416918217905515611015576040516312fd145b60e31b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906397e8a2d890602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611a3f565b1580610f4e575060405163598fd92b60e11b81526001600160a01b03848116600483015283169063b31fb25690602401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190611a3f565b155b80610fec57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe0919061182c565b6001600160a01b031614155b1561100a5760405163f7ebc71360e01b815260040160405180910390fd5b61101383611109565b505b816001600160a01b0316836001600160a01b03167f26f22f8c474f2065d47d555b7f96badf39d94093d6db814098680b098d96a27860405160405180910390a350600192915050565b60006202a30082111561108457604051638f1825c960e01b815260040160405180910390fd5b6001600160a01b03831660009081526002602052604090205482036110ab57506000610c54565b6001600160a01b03831660008181526002602052604090819020849055517f7892d1ac746d3db86c35b555e3c7ddbe78b1a209068eadaf1ad5bfe08a8653a9906110f89085815260200190565b60405180910390a250600192915050565b6001600160a01b038082166000908152600260208190526040822001549091168061114757604051631c48ef1360e21b815260040160405180910390fd5b6040516341976e0960e01b81526001600160a01b0384811660048301528216906341976e0990602401602060405180830381865afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190611a5c565b60006001600160a01b0383166111da5760405163029a68ed60e41b815260040160405180910390fd5b6001600160a01b0384811660009081526002602052604090206001810154909185811662010000909204161480156112175750600181015460ff16155b1561122657600091505061065a565b60018101805461ff01600160b01b031916620100006001600160a01b03871602179055600061125486610c5a565b5090508061127557604051638a93c04960e01b815260040160405180910390fd5b83801561130957507f000000000000000000000000000000000000000000000000000000000000000060ff16856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190611a1c565b60ff1614155b1561132757604051636322b92560e11b815260040160405180910390fd5b6001600160a01b038087166000818152600260205260409081902060010180548815156101000261ff001990911617905551918716917ffc4600a47c5e7ea766bb29e689a692a267b8549a1f07afa418b47bdd479e18179061138e90881515815260200190565b60405180910390a350600195945050505050565b60006202a3008211156113c857604051638f1825c960e01b815260040160405180910390fd5b60015482036113d957506000919050565b60018290556040518281527fcc859b6b85e71cdf22c35275e400cbd6817f8bdfd829e0d386dbf3edc292ffcc9060200160405180910390a1506001919050565b600080546001600160a01b039081169083160361143857506000919050565b600080546001600160a01b0319166001600160a01b038416908117825560405190917fc9f3c0828967b8c34f2d6bbf6797c2965918320a1b0cd659293a94bff918fecd91a2506001919050565b6000808413801561149e57508161149c8442611a75565b105b949350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152d91906119cc565b509350509250506115418282600154611485565b61155e57604051638a93c04960e01b815260040160405180910390fd5b6115897f0000000000000000000000000000000000000000000000000000000000000000600a611952565b611593838661180d565b61149e9190611961565b60008160ff167f000000000000000000000000000000000000000000000000000000000000000060ff16036115d3575081610c54565b8160ff167f000000000000000000000000000000000000000000000000000000000000000060ff1610156116475761162b7f000000000000000000000000000000000000000000000000000000000000000083611a8c565b61163690600a611952565b6116409084611961565b9050610c54565b611671827f0000000000000000000000000000000000000000000000000000000000000000611a8c565b61167c90600a611952565b611640908461180d565b6001600160a01b03811681146109cb57600080fd5b6000602082840312156116ad57600080fd5b813561065a81611686565b600080604083850312156116cb57600080fd5b82356116d681611686565b915060208301356116e681611686565b809150509250929050565b6000806040838503121561170457600080fd5b823561170f81611686565b946020939093013593505050565b80151581146109cb57600080fd5b60008060006060848603121561174057600080fd5b833561174b81611686565b9250602084013561175b81611686565b9150604084013561176b8161171d565b809150509250925092565b60006020828403121561178857600080fd5b5035919050565b600080600080600060a086880312156117a757600080fd5b85356117b281611686565b945060208601356117c281611686565b935060408601356117d281611686565b92506060860135915060808601356117e98161171d565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611827576118276117f7565b500290565b60006020828403121561183e57600080fd5b815161065a81611686565b6020808252600b908201526a27b7363ca6b0b730b3b2b960a91b604082015260600190565b600181815b808511156118a957816000190482111561188f5761188f6117f7565b8085161561189c57918102915b93841c9390800290611873565b509250929050565b6000826118c057506001610c54565b816118cd57506000610c54565b81600181146118e357600281146118ed57611909565b6001915050610c54565b60ff8411156118fe576118fe6117f7565b50506001821b610c54565b5060208310610133831016604e8410600b841016171561192c575081810a610c54565b611936838361186e565b806000190482111561194a5761194a6117f7565b029392505050565b6000610c5160ff8416836118b1565b60008261197e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561199557600080fd5b81516001600160e01b03198116811461065a57600080fd5b805169ffffffffffffffffffff811681146119c757600080fd5b919050565b600080600080600060a086880312156119e457600080fd5b6119ed866119ad565b9450602086015193506040860151925060608601519150611a10608087016119ad565b90509295509295909350565b600060208284031215611a2e57600080fd5b815160ff8116811461065a57600080fd5b600060208284031215611a5157600080fd5b815161065a8161171d565b600060208284031215611a6e57600080fd5b5051919050565b600082821015611a8757611a876117f7565b500390565b600060ff821660ff841680821015611aa657611aa66117f7565b9003939250505056fea2646970667358221220fe63896f3116734f0009f5d4f21951b139ecbb3f921684e16ed5ff0f48d36cbb64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806375435703116100b8578063ca0a8f221161007c578063ca0a8f2214610337578063d0532d911461033e578063d2c18f5914610351578063d9fb643a14610364578063da31cf3c1461038b578063db09c3fd1461039457600080fd5b806375435703146102c85780637f2141c8146102db5780638f001f59146102ee5780639a2ca25714610301578063b31fb2561461031457600080fd5b80632f1605fc116100ff5780632f1605fc146101df57806341976e09146101f257806341fee44a1461020557806357e0c50f1461028c5780635ddf2be3146102a157600080fd5b8063087d31b71461013c5780630f2a1632146101575780631d498ad314610161578063217a4b701461018b5780632553b17f146101ca575b600080fd5b6101446103c4565b6040519081526020015b60405180910390f35b610144620f424081565b61017461016f36600461169b565b6103d5565b60408051921515835260208301919091520161014e565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014e565b6101dd6101d83660046116b8565b6103eb565b005b6101dd6101ed3660046116f1565b6104f9565b61014461020036600461169b565b6105f9565b61025561021336600461169b565b600260208190526000918252604090912080546001820154919092015460ff808316926101008104909116916001600160a01b03620100009092048216911685565b604080519586529315156020860152911515928401929092526001600160a01b03918216606084015216608082015260a00161014e565b6040516357e0c50f60e01b815260200161014e565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b6101dd6102d636600461169b565b61068f565b6101dd6102e936600461172b565b6107ec565b6101dd6102fc366004611776565b6108f3565b6101dd61030f36600461178f565b6109ce565b61032761032236600461169b565b610ac8565b604051901515815260200161014e565b6001610327565b6101dd61034c36600461169b565b610afa565b6000546101b2906001600160a01b031681565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b61014460015481565b6101b26103a236600461169b565b6001600160a01b03908116600090815260026020819052604090912001541690565b6103d2620f4240600a61180d565b81565b6000806103e183610c5a565b9094909350915050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610477919061182c565b6001600160a01b0316146104a65760405162461bcd60e51b815260040161049d90611849565b60405180910390fd5b816104b081610ac8565b6104cd5760405163981a2a2b60e01b815260040160405180910390fd5b6104d78383610de9565b6104f457604051630d51b37960e21b815260040160405180910390fd5b505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061182c565b6001600160a01b0316146105ab5760405162461bcd60e51b815260040161049d90611849565b816105b581610ac8565b6105d25760405163981a2a2b60e01b815260040160405180910390fd5b6105dc838361105e565b6104f45760405163d0abfce560e01b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03808216908416036106615761065a7f0000000000000000000000000000000000000000000000000000000000000000600a611952565b9392505050565b60008061066d85610c5a565b91509150816106845761067f85611109565b610686565b805b95945050505050565b6000546001600160a01b031633146106ba57604051633111da4560e21b815260040160405180910390fd5b6000806106c683610c5a565b91509150816106e857604051638a93c04960e01b815260040160405180910390fd5b60006106f384611109565b90506000828210156107075781830361070b565b8282035b90507f000000000000000000000000000000000000000000000000000000000000000081118061076a5750610744620f4240600a61180d565b83620f424061075484606461180d565b61075e919061180d565b6107689190611961565b105b15610788576040516332d3273560e21b815260040160405180910390fd5b6001600160a01b038086166000818152600260205260408082206001908101805460ff191690911790819055905162010000909104909316927f19986ca6379d8de58c363928f6de20927669b98ab030c431c2f2fee2625961d59190a35050505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610878919061182c565b6001600160a01b03161461089e5760405162461bcd60e51b815260040161049d90611849565b826108a881610ac8565b6108c55760405163981a2a2b60e01b815260040160405180910390fd5b6108d08484846111b1565b6108ed57604051630fe8d77760e11b815260040160405180910390fd5b50505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f919061182c565b6001600160a01b0316146109a55760405162461bcd60e51b815260040161049d90611849565b6109ae816113a2565b6109cb5760405163f620192160e01b815260040160405180910390fd5b50565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a919061182c565b6001600160a01b031614610a805760405162461bcd60e51b815260040161049d90611849565b506001610a8d858361105e565b50610a998585836111b1565b610ab657604051630fe8d77760e11b815260040160405180910390fd5b610ac08584610de9565b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b86919061182c565b6001600160a01b031614610bac5760405162461bcd60e51b815260040161049d90611849565b610bb581611419565b6109cb576040516393c3b9ab60e01b815260040160405180910390fd5b60006001600160a01b03831615801590610c51575082826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611983565b60e083901b6001600160e01b03199081169116145b90505b92915050565b6001600160a01b038082166000908152600260205260408120805460018201549293849360ff811691620100009091041680610ca95760405163981a2a2b60e01b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906119cc565b5093505092505083158015610d295750610d29828287611485565b15610dd8576001860154600090610100900460ff1615610d5357610d4c836114a6565b9050610dc7565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190611a1c565b9050610dc3848261159d565b9150505b60019a909950975050505050505050565b506000988998509650505050505050565b6001600160a01b03808316600090815260026020819052604082200154909190811690831603610e1b57506000610c54565b6001600160a01b0383811660009081526002602081905260409091200180546001600160a01b031916918416918217905515611015576040516312fd145b60e31b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906397e8a2d890602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611a3f565b1580610f4e575060405163598fd92b60e11b81526001600160a01b03848116600483015283169063b31fb25690602401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190611a3f565b155b80610fec57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe0919061182c565b6001600160a01b031614155b1561100a5760405163f7ebc71360e01b815260040160405180910390fd5b61101383611109565b505b816001600160a01b0316836001600160a01b03167f26f22f8c474f2065d47d555b7f96badf39d94093d6db814098680b098d96a27860405160405180910390a350600192915050565b60006202a30082111561108457604051638f1825c960e01b815260040160405180910390fd5b6001600160a01b03831660009081526002602052604090205482036110ab57506000610c54565b6001600160a01b03831660008181526002602052604090819020849055517f7892d1ac746d3db86c35b555e3c7ddbe78b1a209068eadaf1ad5bfe08a8653a9906110f89085815260200190565b60405180910390a250600192915050565b6001600160a01b038082166000908152600260208190526040822001549091168061114757604051631c48ef1360e21b815260040160405180910390fd5b6040516341976e0960e01b81526001600160a01b0384811660048301528216906341976e0990602401602060405180830381865afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190611a5c565b60006001600160a01b0383166111da5760405163029a68ed60e41b815260040160405180910390fd5b6001600160a01b0384811660009081526002602052604090206001810154909185811662010000909204161480156112175750600181015460ff16155b1561122657600091505061065a565b60018101805461ff01600160b01b031916620100006001600160a01b03871602179055600061125486610c5a565b5090508061127557604051638a93c04960e01b815260040160405180910390fd5b83801561130957507f000000000000000000000000000000000000000000000000000000000000000060ff16856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190611a1c565b60ff1614155b1561132757604051636322b92560e11b815260040160405180910390fd5b6001600160a01b038087166000818152600260205260409081902060010180548815156101000261ff001990911617905551918716917ffc4600a47c5e7ea766bb29e689a692a267b8549a1f07afa418b47bdd479e18179061138e90881515815260200190565b60405180910390a350600195945050505050565b60006202a3008211156113c857604051638f1825c960e01b815260040160405180910390fd5b60015482036113d957506000919050565b60018290556040518281527fcc859b6b85e71cdf22c35275e400cbd6817f8bdfd829e0d386dbf3edc292ffcc9060200160405180910390a1506001919050565b600080546001600160a01b039081169083160361143857506000919050565b600080546001600160a01b0319166001600160a01b038416908117825560405190917fc9f3c0828967b8c34f2d6bbf6797c2965918320a1b0cd659293a94bff918fecd91a2506001919050565b6000808413801561149e57508161149c8442611a75565b105b949350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152d91906119cc565b509350509250506115418282600154611485565b61155e57604051638a93c04960e01b815260040160405180910390fd5b6115897f0000000000000000000000000000000000000000000000000000000000000000600a611952565b611593838661180d565b61149e9190611961565b60008160ff167f000000000000000000000000000000000000000000000000000000000000000060ff16036115d3575081610c54565b8160ff167f000000000000000000000000000000000000000000000000000000000000000060ff1610156116475761162b7f000000000000000000000000000000000000000000000000000000000000000083611a8c565b61163690600a611952565b6116409084611961565b9050610c54565b611671827f0000000000000000000000000000000000000000000000000000000000000000611a8c565b61167c90600a611952565b611640908461180d565b6001600160a01b03811681146109cb57600080fd5b6000602082840312156116ad57600080fd5b813561065a81611686565b600080604083850312156116cb57600080fd5b82356116d681611686565b915060208301356116e681611686565b809150509250929050565b6000806040838503121561170457600080fd5b823561170f81611686565b946020939093013593505050565b80151581146109cb57600080fd5b60008060006060848603121561174057600080fd5b833561174b81611686565b9250602084013561175b81611686565b9150604084013561176b8161171d565b809150509250925092565b60006020828403121561178857600080fd5b5035919050565b600080600080600060a086880312156117a757600080fd5b85356117b281611686565b945060208601356117c281611686565b935060408601356117d281611686565b92506060860135915060808601356117e98161171d565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611827576118276117f7565b500290565b60006020828403121561183e57600080fd5b815161065a81611686565b6020808252600b908201526a27b7363ca6b0b730b3b2b960a91b604082015260600190565b600181815b808511156118a957816000190482111561188f5761188f6117f7565b8085161561189c57918102915b93841c9390800290611873565b509250929050565b6000826118c057506001610c54565b816118cd57506000610c54565b81600181146118e357600281146118ed57611909565b6001915050610c54565b60ff8411156118fe576118fe6117f7565b50506001821b610c54565b5060208310610133831016604e8410600b841016171561192c575081810a610c54565b611936838361186e565b806000190482111561194a5761194a6117f7565b029392505050565b6000610c5160ff8416836118b1565b60008261197e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561199557600080fd5b81516001600160e01b03198116811461065a57600080fd5b805169ffffffffffffffffffff811681146119c757600080fd5b919050565b600080600080600060a086880312156119e457600080fd5b6119ed866119ad565b9450602086015193506040860151925060608601519150611a10608087016119ad565b90509295509295909350565b600060208284031215611a2e57600080fd5b815160ff8116811461065a57600080fd5b600060208284031215611a5157600080fd5b815161065a8161171d565b600060208284031215611a6e57600080fd5b5051919050565b600082821015611a8757611a876117f7565b500390565b600060ff821660ff841680821015611aa657611aa66117f7565b9003939250505056fea2646970667358221220fe63896f3116734f0009f5d4f21951b139ecbb3f921684e16ed5ff0f48d36cbb64736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "details": "wstETH-stETH Exchange Rate rate reported by chainlink, means that for 1 wstETH we will get X of stETH with stETH/ETH aggregator: 1 stETH will give us N ETH wstETH price = X stETH price * N (STETH / ETH) to reuse quote functionality: `_price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);` we need to change `/` to `*`",
    "kind": "dev",
    "methods": {
      "assetSupported(address)": {
        "details": "this provider is only for wstETH"
      },
      "emergencyDisable(address)": {
        "details": "Disables the aggregator for an asset if there is a big discrepancy between the aggregator and the fallback provider. The only way to reenable the asset is by calling setupAsset or setAggregator again. Can only be called by the emergencyManager.",
        "params": {
          "_asset": "Asset for which to disable the aggregator"
        }
      },
      "getAggregatorPrice(address)": {
        "details": "Returns price directly from aggregator using all internal settings except of fallback provider",
        "params": {
          "_asset": "Asset for which we want to get the price"
        }
      },
      "getPrice(address)": {
        "params": {
          "_asset": "address of an asset for which to read price"
        },
        "returns": {
          "_0": "of asses with 18 decimals, throws when pool is not ready yet to provide price"
        }
      },
      "offChainProvider()": {
        "details": "this is info method for LiquidationHelper",
        "returns": {
          "_0": "bool TRUE if provider is off-chain, means it is not a dex"
        }
      },
      "priceProviderPing()": {
        "details": "this can save us from simple human errors, in case we use invalid address but this should NOT be treated as security check",
        "returns": {
          "_0": "always true"
        }
      },
      "setAggregator(address,address,bool)": {
        "details": "Sets the aggregator for an asset. Can only be called by the manager.",
        "params": {
          "_aggregator": "Aggregator to set",
          "_asset": "Asset for which to set the aggregator"
        }
      },
      "setEmergencyManager(address)": {
        "details": "Sets the emergencyManager. Can only be called by the manager.",
        "params": {
          "_emergencyManager": "Emergency manager to set"
        }
      },
      "setFallbackPriceProvider(address,address)": {
        "details": "Sets the fallback provider for an asset. Can only be called by the manager.",
        "params": {
          "_asset": "Asset for which to set the fallback provider",
          "_fallbackProvider": "Provider to set"
        }
      },
      "setHeartbeat(address,uint256)": {
        "details": "Sets the heartbeat threshold for an asset. Can only be called by the manager.",
        "params": {
          "_asset": "Asset for which to set the heartbeat threshold",
          "_heartbeat": "Threshold to set"
        }
      },
      "setQuoteAggregatorHeartbeat(uint256)": {
        "details": "Sets the quote aggregator heartbeat threshold. Can only be called by the manager.",
        "params": {
          "_heartbeat": "Threshold to set"
        }
      },
      "setupAsset(address,address,address,uint256,bool)": {
        "details": "Sets the aggregator, fallbackProvider and heartbeat for an asset. Can only be called by the manager.",
        "params": {
          "_aggregator": "Chainlink aggregator proxy",
          "_asset": "Asset to setup",
          "_fallbackProvider": "Provider to use if the price is invalid or if the aggregator was disabled",
          "_heartbeat": "Threshold in seconds to invalidate a stale price"
        }
      }
    },
    "title": "WSTETHPriceByChainlinkArbitrum",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(address)": {
        "notice": "Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset. It unifies all tokens decimal to 18, examples: - if asses == quote it returns 1e18 - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC"
      },
      "priceProviderPing()": {
        "notice": "Helper method that allows easily detects, if contract is PriceProvider"
      },
      "priceProvidersRepository()": {
        "notice": "PriceProvidersRepository address"
      },
      "quoteToken()": {
        "notice": "Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken"
      },
      "setupAsset(address,address,address,uint256,bool)": {
        "notice": "this method overrides original to make sure `_convertToQuote` is always true, because we will be using `toQuote` to calculate wstETH price."
      }
    },
    "notice": "WSTETHPriceByChainlinkArbitrum is the price provider for wstETH token for Arbitrum. Price calculations depends on the price of stETH and wstETH-stETH Exchange Rate.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41581,
        "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
        "label": "emergencyManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41584,
        "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
        "label": "quoteAggregatorHeartbeat",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 41590,
        "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
        "label": "assetData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AssetData)41546_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)24571": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AssetData)41546_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainlinkV3PriceProvider.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)41546_storage"
      },
      "t_struct(AssetData)41546_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkV3PriceProvider.AssetData",
        "members": [
          {
            "astId": 41535,
            "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
            "label": "heartbeat",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41537,
            "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
            "label": "forceFallback",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 41539,
            "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
            "label": "convertToQuote",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 41542,
            "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
            "label": "aggregator",
            "offset": 2,
            "slot": "1",
            "type": "t_contract(AggregatorV3Interface)45"
          },
          {
            "astId": 41545,
            "contract": "contracts/priceProviders/wstETH/WSTETHPriceByChainlinkArbitrum.sol:WSTETHPriceByChainlinkArbitrum",
            "label": "fallbackProvider",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IPriceProvider)24571"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}